<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compilers on Glyphack</title><link>https://glyphack.com/tags/compilers/</link><description>Recent content in Compilers on Glyphack</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 15 Sep 2023 19:50:19 +0200</lastBuildDate><atom:link href="https://glyphack.com/tags/compilers/index.xml" rel="self" type="application/rss+xml"/><item><title>Compilers Resources</title><link>https://glyphack.com/compiler-resources/</link><pubDate>Fri, 15 Sep 2023 19:50:19 +0200</pubDate><guid>https://glyphack.com/compiler-resources/</guid><description>&lt;p>This post is a compilation of great resources I found while building a type checker for Python.
These resources are free and highly focused on specific topics, making them ideal for learning by doing rather than going through extensive materials.&lt;/p>
&lt;h2 class="heading" id="parser">
Parser
&lt;a class="anchor" href="#parser">#&lt;/a>
&lt;/h2>
&lt;p>There are different ways to approach parsing. You can either write one by hand or use a parser generator.
For compilers or interpreters, you can use a parser generator.
However, if you&amp;rsquo;re working on tools like formatters or language servers, your parser needs to handle broken code gracefully. This can be either done with a tool like treesitter that can handle broken code to some extent and also by writing your own. Of course writing your own is more fun.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://boshen.github.io/javascript-parser-in-rust/">&lt;strong>&amp;ldquo;Write JS Parser in Rust&amp;rdquo;&lt;/strong>&lt;/a> by Boshen is an excellent introductory guide.&lt;/li>
&lt;li>For resilient parsing, check out this tutorial on &lt;a href="https://matklad.github.io/2023/05/21/resilient-ll-parsing-tutorial.html">&lt;strong>resilient LL parsing&lt;/strong>&lt;/a>.&lt;/li>
&lt;li>Your language&amp;rsquo;s official documentation. For Python, there is &lt;a href="https://docs.python.org/3/library/ast.html">&lt;strong>Python AST module&lt;/strong>&lt;/a>.&lt;/li>
&lt;li>Look into implementation of open source linters or compilers. &lt;a href="https://github.com/RustPython/Parser/blob/main/parser/src/lexer.rs">&lt;strong>RustPython Lexer&lt;/strong>&lt;/a> is a good one for python.&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="compilers--interpreters">
Compilers &amp;amp; Interpreters
&lt;a class="anchor" href="#compilers--interpreters">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://craftinginterpreters.com/">&lt;strong>&amp;ldquo;Crafting Interpreters&amp;rdquo;&lt;/strong>&lt;/a> is an essential resource for compilers. I recommend reading it chapter by chapter as you build your project.&lt;/p>
&lt;p>For a comprehensive understanding of relevant topics, consider following the &lt;a href="http://openclassroom.stanford.edu/MainFolder/CoursePage.php?course=Compilers">&lt;strong>Stanford Compilers Class&lt;/strong>&lt;/a>. Although I haven&amp;rsquo;t watched it personally, I found this &lt;a href="https://pgrandinetti.github.io/compilers/">&lt;strong>guide&lt;/strong>&lt;/a> based on the class quite helpful.&lt;/p>
&lt;p>You can find examples of implemented programming languages and use them as a reference
&lt;a href="https://plzoo.andrej.com/language/poly.html">&lt;strong>Programming Languages Zoo&lt;/strong>&lt;/a> is one resource for this.&lt;/p>
&lt;h3 class="heading" id="symbol-table">
Symbol Table
&lt;a class="anchor" href="#symbol-table">#&lt;/a>
&lt;/h3>
&lt;p>For symbol table you need to check the language implementation and know the scoping rules, private/public, and different kinds of symbols. There&amp;rsquo;s no all in one solution.&lt;/p>
&lt;p>This &lt;a href="https://eli.thegreenplace.net/2010/09/18/python-internals-symbol-tables-part-1/">&lt;strong>series on the Python symbol table implementation&lt;/strong>&lt;/a>
from Eli Bendersky is useful for learning how does a symbol table works.&lt;/p>
&lt;p>RustPython&amp;rsquo;s &lt;a href="https://rustpython.github.io/website/rustpython_compiler/symboltable/struct.SymbolTable.html">&lt;strong>SymbolTable&lt;/strong>&lt;/a> implementation.&lt;/p>
&lt;h2 class="heading" id="semantic-analyzer">
Semantic Analyzer
&lt;a class="anchor" href="#semantic-analyzer">#&lt;/a>
&lt;/h2>
&lt;p>While resources specific to the semantic analysis phase are scarce, you can find inspiration and solutions in existing projects:&lt;/p>
&lt;ul>
&lt;li>MyPy &lt;a href="https://github.com/python/mypy/wiki/Semantic-Analyzer">&lt;strong>wiki&lt;/strong>&lt;/a>.&lt;/li>
&lt;li>Pyright&amp;rsquo;s &lt;a href="https://github.com/microsoft/pyright/blob/eb98cdda4ecfb4d2ce2fb1d4b9ce7848ab439c32/packages/pyright-internal/src/analyzer/binder.ts">&lt;strong>binder.ts&lt;/strong>&lt;/a> is an example of you would do it.&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="type-checking">
Type Checking
&lt;a class="anchor" href="#type-checking">#&lt;/a>
&lt;/h2>
&lt;p>For type checking you are mostly interested in the type rules in that language.
Therefore it&amp;rsquo;s good to check other type checker implementations.
They will teach you the rules and how to do it.&lt;/p>
&lt;ul>
&lt;li>design of &lt;a href="https://github.com/quora/pyanalyze/blob/master/docs/design.md">&lt;strong>pyanalyze&lt;/strong>&lt;/a> for Python.&lt;/li>
&lt;li>For MyPy, the &lt;a href="https://github.com/python/mypy/wiki/Type-Checker">&lt;strong>Type Checker&lt;/strong>&lt;/a> wiki.&lt;/li>
&lt;li>internal details of &lt;a href="https://github.com/quora/pyanalyze/blob/master/docs/design.md">&lt;strong>Jedi language server&lt;/strong>&lt;/a>.&lt;/li>
&lt;li>Pyright &lt;a href="https://github.com/microsoft/pyright/blob/main/docs/internals.md">&lt;strong>internals&lt;/strong>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="lsp-language-server-protocol">
LSP (Language Server Protocol)
&lt;a class="anchor" href="#lsp-language-server-protocol">#&lt;/a>
&lt;/h2>
&lt;p>For a comprehensive understanding of language servers, file systems, updates, and testing, check out this &lt;a href="https://www.youtube.com/playlist?list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y">&lt;strong>Explaining Rust AnalyzerYouTube playlist&lt;/strong>&lt;/a> from &lt;a href="https://matklad.github.io/">Matkald&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/">&lt;strong>LSP specifications&lt;/strong>&lt;/a> are very easy to read. It&amp;rsquo;s long but you don&amp;rsquo;t need everything in the beginning.
To skip the part of defning every structure yourself you can use &lt;a href="https://github.com/ebkalderon/tower-lsp">&lt;strong>Tower LSP&lt;/strong>&lt;/a>.&lt;/p>
&lt;h2 class="heading" id="linters">
Linters
&lt;a class="anchor" href="#linters">#&lt;/a>
&lt;/h2>
&lt;p>Same as with type checking, for linters it&amp;rsquo;s best to look into implementations and learn from them.
Specially linters have a lot in common with compilers and interpreters because they just emit a human readable error instead of machine code.&lt;/p>
&lt;p>The following tools are useful to understand how analysis is done and errors are reported:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/web-infra-dev/oxc">&lt;strong>oxc&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/astral-sh/ruff">Ruff&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="final-words">
Final Words
&lt;a class="anchor" href="#final-words">#&lt;/a>
&lt;/h2>
&lt;p>Compilers are super fun. If you have more resources please send them to me.&lt;/p></description></item></channel></rss>