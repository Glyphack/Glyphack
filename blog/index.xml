<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Glyphack</title><link>https://glyphack.com/blog/</link><description>Recent content in Blog on Glyphack</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 12 Jul 2025 00:16:52 +0200</lastBuildDate><atom:link href="https://glyphack.com/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>The best lasagna I've ever had</title><link>https://glyphack.com/lasagna/</link><pubDate>Sat, 12 Jul 2025 00:16:52 +0200</pubDate><guid>https://glyphack.com/lasagna/</guid><description>&lt;p>I went to Italy in March with my friends from first grade.
There are a lot of different places to see in Rome, Vatican Palace, Pantheon, and Colosseum.
But for me there was something else I missed and wanted to see again.
It was &lt;a href="https://maps.app.goo.gl/WYi3bWYaKYAiWC5N7">Borghiciana Pastificio&lt;/a> where I had the most delicious lasagna of my life&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>The restaurant is small compared to others.
Only about 16 people can sit inside so there&amp;rsquo;s a line in front of it all the time.
You order while waiting and when you get there the food is ready.
It feels unpretentious and welcoming.
The waitress was delighted to see me again.
I didn&amp;rsquo;t expect that given how many people they see in a year.&lt;/p>
&lt;p>The owner work as other people in the restaurant.
From cooking in the kitchen to serving tables.
He also pours you a drink if you compliment the food.
He sat at our table and started chatting about how he started the place.
He said he’s run the restaurant for seven years.
Hasn&amp;rsquo;t expanded even though the restaurant got more famous in recent years.
His success stems from reviews.&lt;/p>
&lt;p>But he also mentioned that this fame sometimes backlashes.
Some arrive with high expectations but are deterred by long lines and the small space.
His vision is to give delicious food to people and make them happy.&lt;/p>
&lt;p>This reminded me of the idea that you can win without &lt;a href="https://world.hey.com/jason/an-alternative-to-competition-ff57f4bc">competing&lt;/a> with everyone.
These days I have more respect for products and people who try to make something good than the ones trying to collect scores.&lt;/p>
&lt;p>I don&amp;rsquo;t think anyone who tries to impress by some score sells a bad product.
But it is related. It increases the chances because it can distract you from the actual product and diverge the focus on other things.&lt;/p>
&lt;p>
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="" src="https://glyphack.com/borghiciana.jpg" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Also try out &lt;a href="https://maps.app.goo.gl/FKEbRmEcpfhv9NCd8">Gelateria La Romana&lt;/a> if you end up eating here.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>I Made ReadsThis to Share and Find Good Blogs</title><link>https://glyphack.com/rt/</link><pubDate>Sun, 20 Apr 2025 13:20:54 +0200</pubDate><guid>https://glyphack.com/rt/</guid><description>&lt;p>I created a site to share your favorite RSS Feeds in a page.
The idea comes from one of my favorite sites &lt;a href="https://usesthis.com">usesthis.com&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://r.glyphack.com">Try it out&lt;/a> and send me your links.
I love to know interesting blogs around the internet. Here is &lt;a href="https://r.glyphack.com/s/s">mine&lt;/a>.&lt;/p>
&lt;p>I spend great time reading stuff on the internet. I started this in high school.
I think it&amp;rsquo;s getting harder everyday to find good content.
For me a good writing is the one with thoughts behind it.
Which is hard to get in the world that everyone is fighting for your attention.&lt;/p>
&lt;p>So I started collecting blogs that I like. I decided that I&amp;rsquo;m gonna be reading only those posts.
I limited the number of posts I see and I can choose from to read. But the quality went higher.
From time to time, I share these blogs with my friends. They share blogs with me too. And I love it.
Now I have a collection that I really like. I might add more or less stuff to them but it&amp;rsquo;s almost enough for my entire life.&lt;/p>
&lt;p>So I created this website where we can share and find interesting blogs.
It&amp;rsquo;s essentially, a recommendation system created by people.&lt;/p></description></item><item><title>Devlog 4: I made a chrome extension</title><link>https://glyphack.com/dv-4/</link><pubDate>Sat, 12 Apr 2025 11:49:07 +0200</pubDate><guid>https://glyphack.com/dv-4/</guid><description>&lt;p>I&amp;rsquo;m not sure if some time comes that I finally can say I know vim. But I don&amp;rsquo;t think that would happen before I &lt;a href="https://www.youtube.com/watch?v=rT-fbLFOCy0">read the whole manual&lt;/a>.&lt;/p>
&lt;p>This week I learned these new commands:&lt;/p>
&lt;p>I&amp;rsquo;ve always used &lt;code>ctrl-o&lt;/code> to move to last place I was editing in vim. Turns out there&amp;rsquo;s a keybinding to move to the previous file that was open it&amp;rsquo;s &lt;strong>&lt;code>Ctrl-^&lt;/code> (or &lt;code>Ctrl-6&lt;/code>)&lt;/strong>.
This command switches to the last visited file.
It provides quick toggling between two files if you do it repeatedly.&lt;/p>
&lt;p>&lt;a href="https://vim.fandom.com/wiki/Power_of_g">&lt;code>:g&lt;/code>&lt;/a> is powerful. To move/delete things that have a pattern.
You are probably familiar with &lt;code>gj&lt;/code> and &lt;code>gk&lt;/code> but there&amp;rsquo;s also &lt;code>gq&lt;/code> (or &lt;code>gw&lt;/code> if the other did not work.) &lt;code>gw&lt;/code> helps to split a long line into smaller lines.&lt;/p>
&lt;p>Other things:&lt;/p>
&lt;ul>
&lt;li>I made a chrome extension, &lt;a href="https://chromewebstore.google.com/detail/readwise-reader-importer/biaidjfcmkeeiidenndhkdaldkljaipi?authuser=1&amp;amp;hl=en">Readwise Reader Importer&lt;/a> to import links into Readwise. I wanted this tool myself for importing youtube playlists to Readwise. This time I decided to build it as an extension so I can share with others. It got 10 users! I did most of the work using Claude code. It costed around 10 euros, but I&amp;rsquo;m happy with the resulting look.&lt;/li>
&lt;li>I moved &lt;a href="https://glyphack.com/reading-list/">my reading list&lt;/a> off Notion and to my blog. I was tired of me entering books I read and notes about them in Obsidian and the Notion was rarely updated. So I found a &lt;a href="https://glyphack.com/blog/ob/">solution&lt;/a> to update my blog with Obsidian, and then show the book notes just as any other page on my blog. The bonus is that I can make it more beautiful in the future.&lt;/li>
&lt;li>I&amp;rsquo;ve heard about this language called ungrammar that is used in Rust to generate CSTs. I did not know anything about it. Thanks to this &lt;a href="https://github.com/astral-sh/ruff/issues/15655">issue in Ruff&lt;/a> , I did some work related to generating AST. There&amp;rsquo;s &lt;a href="https://www.youtube.com/watch?v=EIXb9mX_o9s">this nice&lt;/a> video that explains how it&amp;rsquo;s used in the Rust Analyzer code.&lt;/li>
&lt;li>I implemented &lt;a href="https://redis.io/docs/latest/develop/data-types/streams/">Redis streams&lt;/a> in toy &lt;a href="https://github.com/Glyphack/redis-clone">clone of Redis&lt;/a>. I took some time doing this, I wanted to use an array instead of a linked list. This would make a good candidate for a blog post so I won&amp;rsquo;t go into details. Redis uses &lt;a href="https://en.wikipedia.org/wiki/Radix_tree#:~:text=In%20computer%20science%2C%20a%20radix,is%20merged%20with%20its%20parent.">radix tree&lt;/a> to implement streams(according to AI)&lt;/li>
&lt;li>I read &lt;a href="https://sive.rs/su">https://sive.rs/su&lt;/a> and decided to keep my own URLs shorter too.&lt;/li>
&lt;/ul>
&lt;p>That&amp;rsquo;s it for this week.&lt;/p></description></item><item><title>Blogging with Obsidian</title><link>https://glyphack.com/ob/</link><pubDate>Wed, 09 Apr 2025 21:25:18 +0200</pubDate><guid>https://glyphack.com/ob/</guid><description>&lt;p>My blog is a bunch of files that are given to a program that converts them to HTML and CSS files, which is what you see here.&lt;/p>
&lt;p>Also, Obsidian uses files to store my notes. This means it gives the most freedom than any other tool out there.&lt;/p>
&lt;p>Since I&amp;rsquo;ve been writing both on my blog and in Obsidian there were times that I wanted to share stuff outside my Obsidian and link it in my website.
One way to do this is using Obsidian Publish, but after reading the &lt;a href="https://www.reddit.com/r/ObsidianMD/comments/16e5jek/comment/jzv38ja/?utm_source=share&amp;amp;utm_medium=web3x&amp;amp;utm_name=web3xcss&amp;amp;utm_term=1&amp;amp;utm_content=share_button">creator of Obsidian himself suggesting alternatives to it&lt;/a> I searched for ways to publish my notes on my blog.&lt;/p>
&lt;p>There are great plugins that make this thing called digital garden (basically a website that you can browse) from Obsidian vault:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://github.com/oleeskild/obsidian-digital-garden">http://github.com/oleeskild/obsidian-digital-garden&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jackyzha0/quartz">https://github.com/jackyzha0/quartz&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>While they are good I was looking for something that I can use to generate the site myself.
So I can have my notes in the same theme as my blog, so it looks like the same page.&lt;/p>
&lt;p>That&amp;rsquo;s how I found &lt;a href="https://github.com/Enveloppe/obsidian-enveloppe">Obsidian Enveloppe&lt;/a>, a plugin that helps you push files from Obsidian to Github.
I&amp;rsquo;m satisfied with the tool, it does the job with little complexity and composes well with user workflow.&lt;/p>
&lt;p>So as a first step I decided to give it a shot, moving my reading list off Notion to my Blog.&lt;/p>
&lt;p>This will allow me to use Obsidian as my editing tool and my Blog as the publishing tool.&lt;/p>
&lt;h2 class="heading" id="my-setup">
My setup
&lt;a class="anchor" href="#my-setup">#&lt;/a>
&lt;/h2>
&lt;p>I create notes for books I read with my notes for the book.
These notes have special &lt;a href="https://gohugo.io/content-management/front-matter/">front matter&lt;/a> &lt;code>category: [Books]&lt;/code> to specify it&amp;rsquo;s a book.&lt;/p>
&lt;p>Then I publish these notes to my blog repository in a special folder that I use to sync my notes. This sync is a one way sync. I&amp;rsquo;m not going to update these notes on Blog anymore.&lt;/p>
&lt;p>The published notes will appear in my blog by default. Since Hugo just picks up all the markdown files and turns them into a page.&lt;/p>
&lt;p>But these pages are not linked by default since they are not blog entries.
So I created this HTML page, that lists all the notes with &amp;ldquo;Books&amp;rdquo; category:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{{ define &amp;#34;main&amp;#34; }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">article&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">header&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-title&amp;#34;&lt;/span>&amp;gt;{{ .Title }}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">header&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-content&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ .Content }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Books&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ $syncPages := where .Site.RegularPages &amp;#34;Section&amp;#34; &amp;#34;synced&amp;#34; }} {{ if
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $syncPages }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ range $syncPages }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{{ .RelPermalink }}&amp;#34;&lt;/span>&amp;gt;{{ .File.BaseFileName }}&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ end }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ else }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;No sync pages found matching the criteria.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ end }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">article&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ end }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And I used it as the layout for a markdown page:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;My Reading List&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>layout: reading-list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft: false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Here are some of the books I&amp;#39;ve read and plan to read.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now I have a &lt;code>/reading-list&lt;/code> page on my website, that filters all the notes related to books. And show them.&lt;/p>
&lt;p>This shows how simple and without any magic you can publish Obsidian notes.
There are unlimited customizations that can be done. Like showing the books in a specific order or format. I left that out since it&amp;rsquo;s lengthy and does not fit in the scope of this post.
Since I&amp;rsquo;m not using some dependency I am free to touch the HTML and change how my published notes look.&lt;/p>
&lt;p>I like to see more people sharing their internal notes. If you do, share it with me. I like to read it.&lt;/p>
&lt;p>Next I like to get create email subscriptions and comments for my blog.&lt;/p></description></item><item><title>After Interview</title><link>https://glyphack.com/after-interview/</link><pubDate>Thu, 06 Mar 2025 08:41:39 +0100</pubDate><guid>https://glyphack.com/after-interview/</guid><description>&lt;p>Biggest companies put candidates through lengthy interview process, yet still fire a lot of bad hires.
What if the problem is not the interview, but what happens after?
Smarter onboarding is the key to identify if a new hire is a great fit.&lt;/p>
&lt;p>In my experience and what I&amp;rsquo;ve heard from others, the onboarding is slow.
First few weeks filled with trivial work and going through a lot of documents.
Sometimes even the laptop and required access is not ready.
Basically the first few weeks(or months) the new hire barely touches the product.&lt;/p>
&lt;p>You cannot distinguish between a motivated skilled person and a boring person with no passion without seeing the actual work.
To identify a bad hire there is an evaluation process after a couple of months.
This evaluation happens late because judging without seeing work is impossible.
Difficult problems are the ones showing the strengths and weaknesses. If the person is suitable for this job and if they enjoy it.&lt;/p>
&lt;p>My solution is to pair the new hire with a mentor and real work on the product.
Help people experience real work from day one and observe how well they do it.
Does it sound risky? That&amp;rsquo;s the point.
There&amp;rsquo;s no guarantee that it will be a success and that&amp;rsquo;s okay.
You can still learn about this person more in this situation.
Everyone makes mistakes and there&amp;rsquo;s a way to move forward.
The new hire can understand how well the company is at handling hard situations. And company sees how new hire acts.&lt;/p>
&lt;blockquote>
&lt;p>The kindest thing you can do to a new team member is to involve them in something real and challenging right away. Don&amp;rsquo;t squander weeks of new-job enthusiasm with baby rails and play tasks. Get them into the deep end right from the start.
&lt;a href="https://world.hey.com/dhh/start-them-in-the-deep-end-8c9c77fe">https://world.hey.com/dhh/start-them-in-the-deep-end-8c9c77fe&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>How does the new approach help with identifying good candidates?
You can have a faster feedback cycle.
It&amp;rsquo;s better for everyone to find out if they enjoy the ride or not.&lt;/p>
&lt;p>It&amp;rsquo;s not about figuring out if the new hire makes mistakes or not, but to find strengths and weaknesses.&lt;/p>
&lt;ul>
&lt;li>Does he understand what he&amp;rsquo;s doing? Is he repeating something without understanding?&lt;/li>
&lt;li>What happens when he make a mistake? Is he going to blame or fix?&lt;/li>
&lt;li>How does he approach an unknown problem? Is he asking questions? Is he trying out solutions or waiting for someone else to solve it?&lt;/li>
&lt;/ul>
&lt;p>This approach is not only useful for the company but also for the new hire.
Both parties know sooner if this a good match.
If you hired someone new, welcome the person with real work with risk.&lt;/p></description></item><item><title>Devlog 3: Coding a redis clone in C and things I learned</title><link>https://glyphack.com/dv-3/</link><pubDate>Sat, 15 Feb 2025 18:02:46 +0100</pubDate><guid>https://glyphack.com/dv-3/</guid><description>&lt;p>About two months ago I started the build your own Redis challenge from &lt;a href="https://codecrafters.io">https://codecrafters.io&lt;/a>.
I decided to do this in C. Initially I was just curious to do it in C. Doing it in C thought me a lot of stuff that otherwise I would have not learned. Another bonus point was that I could tweak the performance to be on par with Redis server.&lt;/p>
&lt;p>C always seemed like an impossible language to me. Working so much in garbage collected languages with rich standard libraries made me think C is hard.
Now I think C is not hard. Whatever you write gets executed the way you wrote it. Little abstractions make it a great language to implement what you want and have control over your program.
Topics like Async programming, managing memory are broad topics. I agree that it&amp;rsquo;s hard to achieve the same level of concurrency that you have in Python in C. But writing a small version that works for a specific use case is not impossible.
It&amp;rsquo;s possible to implement hash map, Async, memory arena(for easier memory management), and your own string type with a few lines of C code, thanks to blogs like &lt;a href="https://nullprogram.com">null program&lt;/a>&lt;/p>
&lt;p>I think I&amp;rsquo;ll use the below techniques I learned for any C program I create. I wish it was easier to package them so I can reuse it in different projects.&lt;/p>
&lt;p>The source code is at &lt;a href="https://github.com/Glyphack/redis-clone">glyphack/redis-clone&lt;/a>.&lt;/p>
&lt;p>The below are things I learned about C programming.&lt;/p>
&lt;h2 class="heading" id="awesome-compiler-flags">
Awesome Compiler Flags
&lt;a class="anchor" href="#awesome-compiler-flags">#&lt;/a>
&lt;/h2>
&lt;p>I don&amp;rsquo;t know why nobody told me this. C can have stacktraces. It can detect race conditions. It can detect use after free. It can do a lot of stuff by just adding more compiler flags.&lt;/p>
&lt;p>You can compile your program with flags:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-fsanitize=undefined&lt;/code> to crash on undefined behavior scenarios&lt;/li>
&lt;li>&lt;code>-fsanitize=thread&lt;/code> to crash when threads have race condition(this is actually what powers Golang race detector)&lt;/li>
&lt;/ul>
&lt;p>And if there is a race condition in your program you will see something like:&lt;/p>
&lt;pre tabindex="0">&lt;code>==================
WARNING: ThreadSanitizer: data race (pid=12345)
Read of size 4 at 0x000000601040 by thread T2:
#0 thread_func (source.c:7) in main
#1 start_thread (pthread_create.c:XXX)
Previous write of size 4 at 0x000000601040 by thread T1:
#0 thread_func (source.c:7) in main
#1 start_thread (pthread_create.c:XXX)
Location is global &amp;#39;shared_var&amp;#39; defined in source.c:5
==================
&lt;/code>&lt;/pre>&lt;p>I built my program in debug mode with these flags and ran a tester that would insert and get values from the server. It detected a lot of bugs for me while pointing out the exact line the problem happened.&lt;/p>
&lt;h2 class="heading" id="memory-arena">
Memory Arena
&lt;a class="anchor" href="#memory-arena">#&lt;/a>
&lt;/h2>
&lt;p>I used a &lt;a href="https://nullprogram.com/blog/2023/09/27/">memory arena&lt;/a> to minimize the number of &lt;code>malloc&lt;/code> and &lt;code>free&lt;/code> calls in the code.
It makes code faster but in the end I realized how much simplified the code gets.
It&amp;rsquo;s basically like having a garbage collector and you know when it happens.&lt;/p>
&lt;h2 class="heading" id="custom-string-type">
Custom String Type
&lt;a class="anchor" href="#custom-string-type">#&lt;/a>
&lt;/h2>
&lt;p>One of the problems I faced soon after working with C was that, sometimes I wanted to keep a reference to middle of a giant string. Imagine you get a request and extract a field name from it. Now you have two options, either &lt;code>memcpy&lt;/code> that substring into a new string and add a &lt;code>\0&lt;/code> or make a pointer to the starting offset of the substring.
When you keep the offset you cannot use it in most of other places because you don&amp;rsquo;t know the end of this string, and C strings end with &lt;code>\0&lt;/code>.
I followed the advice in &lt;a href="https://nullprogram.com/blog/2023/10/08/">this post&lt;/a> and it made code a lot smaller(no extra string creation and &lt;code>malloc&lt;/code> calls) and simpler because working with a string when you know the length is just easier. Plus if you are worried you would lose the benefits of C string functions don&amp;rsquo;t worry there is not much functionality there. You can implement it yourself.&lt;/p>
&lt;h2 class="heading" id="hash-map">
Hash Map
&lt;a class="anchor" href="#hash-map">#&lt;/a>
&lt;/h2>
&lt;p>I followed &lt;a href="https://nullprogram.com/blog/2023/09/30/">this post&lt;/a> to implement a hash map. Initially my program was using a thread per connection so I tried to extend the lock free version to work with my program.
In the end I implemented Asynchronous code to handle multiple connections, removed the threads, and just used the hash map that is explain in the post.&lt;/p>
&lt;h2 class="heading" id="redis-replication">
Redis Replication
&lt;a class="anchor" href="#redis-replication">#&lt;/a>
&lt;/h2>
&lt;p>The Redis replication is initially simple to implement I did not implement the full protocol.
The basic functionality is to handshake with the master node and master node has to keep a list of replicas to forward write messages to.
The way multiple nodes stay in sync is by using replication offset that master checks for periodically. I did not implement any recovery case for when a replica is out of sync.&lt;/p>
&lt;h2 class="heading" id="asynchronous-programming">
Asynchronous Programming
&lt;a class="anchor" href="#asynchronous-programming">#&lt;/a>
&lt;/h2>
&lt;p>This is my favorite topic. I finally got a clue what actually happens in higher level languages. Before actually doing this I read and heard some words but it all felt like buzzwords to me.
What does it mean each coroutine has a stack? Why can&amp;rsquo;t you run a blocking task inside an asynchronous function? I learned all after I implemented this.&lt;/p>
&lt;p>The interesting part is, implementing basic asynchronous I/O is not hard, making it general and cross platform is. This is what other programming languages did.&lt;/p>
&lt;p>To serve multiple clients concurrently we need a way to read from all of them without ever waiting for one client and &lt;strong>blocking&lt;/strong> others.
So what we really need is, a way to tell which clients are ready to read, which are ready to write and instead of waiting for the ones that are not ready just skip and serve other clients.
I recommend following &lt;a href="https://build-your-own.org/redis/05_event_loop_intro">this guide&lt;/a>. I ended up switching to &lt;code>kqueue&lt;/code> from &lt;code>poll&lt;/code> to achieve better performance on MacOS.&lt;/p>
&lt;hr>
&lt;p>I think this database can be a good base program to expand to any kind of future databases I want to write.
I can reuse the existing protocol to exchange messages and add my custom logic or &lt;a href="https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/">implement Raft&lt;/a>.&lt;/p></description></item><item><title>Can Data Fool You?</title><link>https://glyphack.com/fooled-by-data/</link><pubDate>Wed, 29 Jan 2025 22:32:33 +0100</pubDate><guid>https://glyphack.com/fooled-by-data/</guid><description>&lt;p>Recently, A personal experience showed me how something widely accepted might be wrong.
I didn&amp;rsquo;t want to lose this opportunity to write about it.&lt;/p>
&lt;p>If you haven&amp;rsquo;t been living under a cave, you know data-driven decision making is a must these days.
So, if you cannot make a decision just run both under some experiment and decide based on the result.
If you have a problem that is hard to answer, you just try different answers.
Then you pick the one that makes more money or whatever thing you want.&lt;/p>
&lt;p>Imagine you don&amp;rsquo;t know what&amp;rsquo;s the maximum price you can sell a book that people keep buying it.
You can sell it more expensive and expect less sales while having more profit on each book or the other way around.
Now the data boss comes up with this neat idea.
Let&amp;rsquo;s sell the book with two different prices in two markets and see how much profit do we make.
Sounds good right?
Imagine maybe one market was Inevitably going to like the book less.
You can imagine a million reasons that this might happen.
You know how accidentally stuff go viral.&lt;/p>
&lt;p>When you are done with the experiment you try to find the patterns and decide what to do based on the data.
Unless something is terribly wrong(10x books sold in one area) you don&amp;rsquo;t suspect the result.
&amp;ldquo;Oh, maybe it&amp;rsquo;s expensive and people didn&amp;rsquo;t buy it.&amp;rdquo;, you say forgetting how many things can affect this.
Another problem with these experiments is how long are you going to continue this. There is no answer, and you can slow yourself down significantly.&lt;/p>
&lt;p>Few days ago I was working on some piece of code.
Buried down deep in codebase everyone forgot about it once it was launched and the metrics looked good.
Only one point was missed, the calculations were wrong.
Now the person working on this before me definitely relied on the metrics to assure the change is making good impact.
And indeed the change was good overall because the metrics showed that compared to the product before change.&lt;/p>
&lt;p>This is why I prefer to use thinking instead when it&amp;rsquo;s possible to decide about something.
When one solution is obviously worth (code that does not work) why bother trying it?
The moment you see the charts go up you attribute that to the code you changed no matter correct or wrong.
Could it be that the code is wrong, but the result is better due to some other thing that we don&amp;rsquo;t know?
So you lose the opportunity to think more, maybe the wrong code is better because something else is broken.&lt;/p>
&lt;p>My experience is limited, but you can check more &lt;a href="https://www.goodreads.com/book/show/13530973-antifragile">examples&lt;/a> on why you might misunderstand a phenomenon and come up with wrong answers and &lt;a href="https://www.youtube.com/watch?v=QBe8lJdpvDU">how data can fool you&lt;/a>&lt;/p>
&lt;p>Remember learning multiplication tables?
Your teacher didn&amp;rsquo;t say &amp;ldquo;just keep guessing numbers until your test scores improve.&amp;rdquo;
That would be absurd. Yet somehow, that&amp;rsquo;s exactly what we&amp;rsquo;re doing with our code: throw something at the wall, check if the metrics went up, ship it if they did.&lt;/p>
&lt;p>Maybe imposing constraints would get us out of this situation. You don&amp;rsquo;t have all the time to try everything, just think what would be useful.&lt;/p>
&lt;p>Here&amp;rsquo;s the thing about understanding versus just observing: if you see something work and think you know why, you should be able to do it again.
That&amp;rsquo;s the difference between actual understanding and just having a good story about what happened.
Let me put it this way: if you run an A/B test and conclude &amp;ldquo;Oh, users love blue buttons!&amp;rdquo; then you should be able to predict when blue buttons will work again.&lt;/p>
&lt;p>So, data is good, but why not combine it with some thinking?&lt;/p></description></item><item><title>On Tracking Time</title><link>https://glyphack.com/tracking-time/</link><pubDate>Tue, 31 Dec 2024 18:00:17 +0100</pubDate><guid>https://glyphack.com/tracking-time/</guid><description>&lt;p>One week I suddenly realized I did so much during the week but there&amp;rsquo;s nothing to show for it.
You know that feeling that you don&amp;rsquo;t have anything to tell your friend that you did that week.&lt;/p>
&lt;p>I gave time tracking a shot to see what will I find.
Rescue time looked like a simple tool that gets the job done. I used Activity Watch before and the main lacking feature was syncing and the mobile app (at the time they now have a new mobile app.)&lt;/p>
&lt;p>Turns out my feeling was right, next week I saw around 8 hours of my week during work time spent in meeting, Slack in discussions.
Other than that it showed me how much time I spend on social media and other things that does not achieve anything.
So basically I was spending a lot of time on things that don&amp;rsquo;t produce anything. It&amp;rsquo;s not fun to talk with someone about how many work discussions they had last week.&lt;/p>
&lt;p>After a couple of months I notice the change in how I use my time.
I don&amp;rsquo;t really use the time tracking to find out how much time I spend on what.
I just use it to find out if I spend too much time idling and not doing anything or not.
These days even if I don&amp;rsquo;t use it any more I will keep the few habits it helped me to create.&lt;/p>
&lt;p>&lt;strong>Use devices purposely&lt;/strong>&lt;/p>
&lt;p>Use the phone or the computer for a purpose.
This is basically what all the app blockers do. They want to block the distractions so you think okay what did I want to do?&lt;/p>
&lt;p>Sometimes there is nothing to do with your phone. You just want the time to pass or rest a bit.
What about reading a book, sleeping or doing something that requires no effort?&lt;/p>
&lt;p>&lt;strong>Think about total time spent&lt;/strong>&lt;/p>
&lt;p>It&amp;rsquo;s easy to notice when you spend 1 hour in a day scrolling through content and not doing anything.
But it&amp;rsquo;s harder to notice it if it&amp;rsquo;s half an hour every day. But if you think about it that results in 3.5 hours per week.
3 hours sounds a lot really a lot can be done with that time, even adding it to the sleep sounds better.&lt;/p>
&lt;p>I tracked time for the full month and saw how much time I&amp;rsquo;m spending on things that are not really useful.
I tried to limit them. As a result I just did what was necessary.
For example what I mentioned all the time in discussions at work. I limited that to a certain amount per day. This forced me to say what I had to say in slack and continue doing what I was doing.&lt;/p>
&lt;p>&lt;strong>Do not care too much about the graphs&lt;/strong>&lt;/p>
&lt;p>These apps usually give you a lot of scores, graphs and data to play with.
I don&amp;rsquo;t think it&amp;rsquo;s useful to look at them.
It&amp;rsquo;s a distraction, and it can drag you down into optimizing the wrong thing.&lt;/p>
&lt;p>The most important part is that, you spend time on what you want and distractions are not in your way.
This can be seen by how much time you are spending on the distractions during the day.
So I think if the distractions are taking very little time. Then the rest of the time is free.
Free time plus boredom is all needed to do what you want to do. Unless you don&amp;rsquo;t want &lt;a href="https://paulgraham.com/want.html">what you want&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>I don&amp;rsquo;t know if time tracking is necessary or not.
Maybe after a while these habits are shaped, so it&amp;rsquo;s not needed any more.
I think if there&amp;rsquo;s something that grabs your attention, and you want to do it, you will do it. No focus or do not disturb mode needed for true captivation.
But all the other times it&amp;rsquo;s easy to get distracted and not find the intriguing.&lt;/p></description></item><item><title>Dev Tools at Work</title><link>https://glyphack.com/dev-tools-at-work/</link><pubDate>Sun, 29 Dec 2024 19:32:07 +0100</pubDate><guid>https://glyphack.com/dev-tools-at-work/</guid><description>&lt;p>I was reading this old post from Brad Fitzpatrick, talking about why he thought open source contributors suddenly disappear after joining Google:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>They&amp;rsquo;re busy. Google seems to suck everybody&amp;rsquo;s free time, and then some. It&amp;rsquo;s not that Google is forcing them to work all the time, but they are anyway because there are so many cool things that can be done. I often joke that I have seven 20% projects.&lt;/li>
&lt;li>The Google development environment is so nice. The source control, build system, code review tools, debuggers, profilers, submit queues, continuous builds, test bots, documentation, and all associated machinery and processes are incredibly well done. It&amp;rsquo;s very easy to hack on anything, anywhere and submit patches to anybody, and notably: to find who or what list to submit patches to. Generally submitting a patch is the best way to even start a discussion about a feature, showing that you&amp;rsquo;re serious, even if your patch is wrong.&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>&lt;a href="https://brad.livejournal.com/2409049.html">https://brad.livejournal.com/2409049.html&lt;/a>&lt;/p>
&lt;p>I cannot imagine how the work is so fun there than people vanish into the air after joining google.
Or how someone gets caught up in seven different 20% projects because the environment lets you do that much work.&lt;/p>
&lt;p>I like being busy when there is a lot to work on.
Most of the time what happens is that people are busy because they are kept busy by the tasks around work.&lt;/p>
&lt;p>Let me tell you a story about John. (It&amp;rsquo;s not a real John.)&lt;/p>
&lt;p>John works at a 50 people company. He works on tools for sales and marketing to do their work faster.
His tools are mostly scripts. He makes a website to make the interaction with scripts easier.&lt;/p>
&lt;p>One day he has an idea of a new mini product.
Nothing earth-shattering, mind you - just a simple integration between two tools that would save the marketing team from having to copy-paste discount codes. In Brad&amp;rsquo;s Google utopia, John would just write the code, submit a patch, and boom - problem solved, everyone&amp;rsquo;s happy.&lt;/p>
&lt;p>First, John has to talk to Sarah. But wait, he can&amp;rsquo;t just &lt;em>talk&lt;/em> to Sarah.
That would be far too efficient.
He has to go through Sarah&amp;rsquo;s manager, who needs to talk to Sarah, who then needs to talk back to her manager, who needs to update some road map that probably hasn&amp;rsquo;t been looked at since last OKR planning.&lt;/p>
&lt;p>So this simple conversation that could lead to a possibly good thing cannot happen simply.
It Needs to happen in a group chat when everyone says their opinion (which takes time from the readers as well as the author) and have some back and forth discussion.&lt;/p>
&lt;p>Because of this John has to be more thoughtful about the suggestions.
It&amp;rsquo;s okay to suggest something not useful a few times but if it becomes a couple of times per week then everyone will get tired from him.&lt;/p>
&lt;p>Although he does not actively give ideas and prototype them. He posts a few every month or so, then he goes off writing a long proposal for both teams to accept it and then moves it to their engineering road map to be done somewhere in the next months.
He&amp;rsquo;s lucky if he can deliver 1 of his suggestions every quarter.
This seems dangerous, he might get fired right?
No, John&amp;rsquo;s a hero because he&amp;rsquo;s mastered the art of producing artifacts - not actual, useful code, mind you, but the kind of artifacts that look good in performance reviews. Meeting notes. Project proposals. Progress updates. It&amp;rsquo;s like a cargo cult of productivity.&lt;/p>
&lt;p>Few months later the something similar happens.
Sarah wants a small new feature to make her work more enjoyable.
Engineering and sales teams chat, they decide that this bug is not easy to fix.
But there is an easy work around that adds few more steps to Sarah&amp;rsquo;s work.
So they decide to fix the bug when the engineering team has some free time.
The free time definitely does not happen a lot.
Sarah&amp;rsquo;s work is not much slower but it&amp;rsquo;s annoying, she might make a mistake because someone else product is not working.
But it&amp;rsquo;s hard to measure how annoying the product is in numbers, so people only measure the time it saves from the work.&lt;/p>
&lt;hr>
&lt;p>I&amp;rsquo;ve seen this story happening over and over again, and I&amp;rsquo;ve been on the both sides.&lt;/p>
&lt;p>John can&amp;rsquo;t even prototype the damn thing. Because in this brave new world of corporate efficiency, actually &lt;em>building something&lt;/em> to see if it works is considered too risky. Better to spend six months writing proposals about the thing you want to build than actually building it in a week to see if it&amp;rsquo;s any good.&lt;/p>
&lt;p>I&amp;rsquo;m not saying all planning, design, and management is unnecessary.
It&amp;rsquo;s definitely easier to do it right at the beginning than to migrate a live system.
I&amp;rsquo;m okay with thinking carefully about these critical components.
Instead of slowing down everything, just try out most of the stuff but think about irreversible or hard to migrate decisions like how data is stored.&lt;/p>
&lt;p>Also doing something gives you more information.
The feedback from acting tells where to go next.
This is something you don&amp;rsquo;t get as much from sitting and discussing an idea.&lt;/p>
&lt;p>If people don&amp;rsquo;t have the authority to prototype something then the rate of generating and trying out ideas will decrease.
A lot of times the ideas will not be useful and be discarded.
Trying out ideas teaches people and give them more experience.
Makes them better in generating next ideas.
Just shipping the thing and deciding what to do next is faster and more fun.&lt;/p>
&lt;p>We should allow people use their curiosity and don&amp;rsquo;t block them with processes.&lt;/p>
&lt;p>&lt;strong>Having good tools&lt;/strong>&lt;/p>
&lt;p>There are countless times I found projects that have out-of-date documents, misconfigured tools, examples that won&amp;rsquo;t run anymore.
I honestly have no idea how someone can be maintaining a project where &lt;code>Makefile&lt;/code> is broken. Do you even use it?&lt;/p>
&lt;p>It takes time and skill to create and maintain good tools.
And I think the reason is that the incentive for working on tools is not there.
The author of the projects make this beautiful &lt;code>README&lt;/code>, Makefile, example code that would make everyone get up and running with project in seconds. Why? Because they&amp;rsquo;re trying to get that promotion&lt;/p>
&lt;p>Fast-forward six months and the project document is out of date, the Makefile is so broken that you make your own scripts to work on the project.
When tools and projects don&amp;rsquo;t have good developer tools you can&amp;rsquo;t just start working on a project to evaluate an idea.
Want to try out a new idea on the codebase? Good luck with that.&lt;/p>
&lt;p>The typical experience goes something like this: you clone the repo (assuming you can find it), follow the setup instructions, and then you hit some obscure error message as result of mixing 10 tools. With the poor error handling you have to dig in the code, find which one is not working as expected and start fixing code or your environment.&lt;/p>
&lt;p>And this isn&amp;rsquo;t just annoying - it&amp;rsquo;s toxic to innovation. How the hell is anyone supposed to prototype big ideas when they can&amp;rsquo;t even get the damn thing to compile?&lt;/p>
&lt;p>Document the contributing process. Constantly update the docs and review that in the code review.
Make sure the examples work, the tools integrate nicely in a project.
For example if your project has a debugger make sure your changes won&amp;rsquo;t break the debugger.
Make sure the app runs locally.
Test this whenever someone new joins the team.&lt;/p>
&lt;p>You know what? Maybe we should try out this crazy idea of letting people actually do work and see the result.
I&amp;rsquo;m just saying, MAYBE, MAYBE just doing something helps you find out if something is good.
Maybe just write the documentation and update it instead of writing proposals about writing documentations and how the build system should work (when it&amp;rsquo;s broken).&lt;/p>
&lt;hr>
&lt;p>I&amp;rsquo;m sad that I haven&amp;rsquo;t worked at a place that matches what Brad said about Google. But it&amp;rsquo;s probably about google at that time and things might be different now.
The bright side is that open source is much better these days. I experienced this in open source projects. Good tools, fast builds, and great developer setup guides.
People care about good experience there.&lt;/p>
&lt;p>P.S. If you&amp;rsquo;re reading this from Google circa 2009, please send help. And your build system and your developer tools.&lt;/p></description></item><item><title>Devlog 2</title><link>https://glyphack.com/dv-2/</link><pubDate>Sat, 02 Nov 2024 11:11:05 +0100</pubDate><guid>https://glyphack.com/dv-2/</guid><description>&lt;p>Random notes from past month.&lt;/p>
&lt;p>&lt;strong>New Projects&lt;/strong>&lt;/p>
&lt;p>I spent about a year building &lt;a href="https://github.com/Glyphack/enderpy">my own tool-chain&lt;/a> for building a python type checker. It inspired by what ruff was doing for Python linting and wanted to do the same for type checker.
A few months ago I found out that astral team are building a type checker. So I decided to redirect my energy toward that.
Building a type checker for a language that is not designed for typing is hard.
Sometimes you need to know what will be the exact behaviour of a type, and you see Pyright and Mypy have differences.
So naturally this requires you to do more research and figure out the specs yourself.&lt;/p>
&lt;p>I was getting a lot of my guidance from the astral team. Because I&amp;rsquo;m not a python typing expert.
So I think this would be a better approach to contribute to that project and achieve my goal.
Also, Rust is a hard language and a lot of the time I felt like the language was stopping me from doing what I want.
So I had to read a lot on how to use it.
When contributing to another project, you have other people who will help with this kind of stuff.
So this is even better I don&amp;rsquo;t need to fight the language any more, I can read their code and learn and help with typing.&lt;/p>
&lt;p>Aside from that,
I&amp;rsquo;m building a C compiler from scratch with my friend. The goal is for it to compile itself.
&lt;a href="https://github.com/keyvank/30cc">https://github.com/keyvank/30cc&lt;/a>&lt;/p>
&lt;p>For some time I&amp;rsquo;m going to write my own projects in something other than Rust.
It was hard for me to work with it and focus on the project.
For learning projects I want to do it myself with minimal dependencies.
Rust can be tricky, and you need a dependency to save yourself from writing unsafe code.
Or the code becomes verbose and requires a lot of typing and organizing it.&lt;/p>
&lt;p>&lt;strong>Terminal Workflow Improvements&lt;/strong>&lt;/p>
&lt;p>On of the things I&amp;rsquo;ve been wanting for a long time was the ability to jump to start of a command output in terminal. Imagine when you run something, and it outputs a lot of things.
When you want to see the beginning of the output or just read the logs from the beginning you need to scroll up.
This turns out to be easy to do but requires configuration for the terminal and shell you are using.
For Wezterm and Fish I did the following:&lt;/p>
&lt;p>Set key bindings for &lt;a href="https://wezfurlong.org/wezterm/config/lua/keyassignment/ScrollToPrompt.html">ScrollToPrompt&lt;/a> action.
Create a fish function to emit the characters that marks the output of the command before executing a command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> pre_command --on-event fish_preexec
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf &lt;span style="color:#e6db74">&amp;#39;\033]133;A\033\\&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This feature to run specific functions on an event in fish is really powerful. You can build custom workflows around your work. For example, you can do some project specific setup when entering a folder with this snippet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> some_setup --on-variable PWD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> test &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$PWD&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$PROGRAMMING_DIR&lt;span style="color:#e6db74">/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># do some stuff&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Neovim&lt;/strong>&lt;/p>
&lt;p>If you know how to fold all the functions by default please let me know.
&lt;a href="https://old.reddit.com/r/neovim/comments/1g41rjy/can_neovim_do_this_already_with_treesitter/">https://old.reddit.com/r/neovim/comments/1g41rjy/can_neovim_do_this_already_with_treesitter/&lt;/a>&lt;/p>
&lt;p>I&amp;rsquo;m proud of myself for writing these two simple commands:&lt;/p>
&lt;ol>
&lt;li>Key binding to insert a hyperlink in markdown file on visual selection&lt;/li>
&lt;li>Command to go to the test file of the current go file I have open. Very useful at my job&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>vim.api.nvim_create_user_command(&amp;#34;Link&amp;#34;, function(opts)
local start_pos = vim.fn.getpos(&amp;#34;&amp;#39;&amp;lt;&amp;#34;)
local end_pos = vim.fn.getpos(&amp;#34;&amp;#39;&amp;gt;&amp;#34;)
local selected_text = vim.fn.getline(start_pos[2]):sub(start_pos[3], end_pos[3])
vim.api.nvim_command(&amp;#34;normal! gv&amp;#34;)
if selected_text:match(&amp;#34;^http&amp;#34;) then
vim.fn.setreg(&amp;#39;&amp;#34;&amp;#39;, &amp;#34;[](&amp;#34; .. selected_text .. &amp;#34;)&amp;#34;)
vim.api.nvim_command(&amp;#34;normal! P&amp;#34;)
local new_pos = { start_pos[2], start_pos[3] - 1 }
vim.api.nvim_win_set_cursor(0, new_pos)
else
vim.fn.setreg(&amp;#39;&amp;#34;&amp;#39;, &amp;#34;[&amp;#34; .. selected_text .. &amp;#34;]()&amp;#34;)
vim.api.nvim_command(&amp;#34;normal! P&amp;#34;)
local new_pos = { start_pos[2], start_pos[3] + #selected_text + 2 }
vim.api.nvim_win_set_cursor(0, new_pos)
end
end, { range = true })
vim.keymap.set(&amp;#34;v&amp;#34;, &amp;#34;&amp;lt;leader&amp;gt;k&amp;#34;, &amp;#34;:Link&amp;lt;CR&amp;gt;&amp;#34;, { noremap = true, silent = true })
vim.api.nvim_create_user_command(&amp;#34;GotoTest&amp;#34;, function()
local current_file = vim.fn.expand(&amp;#34;%:p&amp;#34;)
local file_type = vim.bo.filetype
local test_file
if file_type == &amp;#34;go&amp;#34; then
test_file = vim.fn.fnamemodify(current_file, &amp;#34;:r&amp;#34;) .. &amp;#34;_test.go&amp;#34;
else
vim.api.nvim_err_writeln(&amp;#34;Test file location not defined for filetype: &amp;#34; .. file_type)
return
end
if vim.fn.filereadable(test_file) == 1 then
vim.cmd(&amp;#34;edit &amp;#34; .. test_file)
else
vim.api.nvim_err_writeln(&amp;#34;Test file not found: &amp;#34; .. test_file)
end
end, {})
&lt;/code>&lt;/pre>&lt;p>I had a problem that when I connected my laptop to a new screen Flameshot would not capture the whole screen from the new screen in the screenshots.
I could not find a way to resolve this so I wrote this hammerspoon script to restart the app when I connect it to a new monitor:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">screenCallback&lt;/span>(layout)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> layout &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Screen did not change&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setPrimary()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> flameshot_bundle &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/Applications/flameshot.app&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> flameshot &lt;span style="color:#f92672">=&lt;/span> hs.application.find(flameshot_bundle, &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> flameshot &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flameshot:kill()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.application.open(flameshot_bundle)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hs.screen.watcher.newWithActiveScreen(screenCallback):start()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;ul>
&lt;li>I knew about PyPy, but I didn&amp;rsquo;t know they have a full tool chain for creating interpreters. Until I watched this &lt;a href="https://www.youtube.com/watch?v=p8fCq16XTH4">Tsoding video&lt;/a>&lt;/li>
&lt;li>Kay Lack&amp;rsquo;s YouTube channel is one of the best things I found last month. High quality videos about computers and programming.
This one is about &lt;a href="https://youtube.com/watch?v=DiXMoBMWMmA&amp;amp;si=yqldVom-i92x7iSA">regex&lt;/a> and &lt;a href="https://www.youtube.com/watch?v=GU8MnZI0snA">this one&lt;/a> assembly.&lt;/li>
&lt;/ul></description></item><item><title>Writing a DNS server From Scratch</title><link>https://glyphack.com/dns-from-scratch/</link><pubDate>Sat, 12 Oct 2024 13:09:53 +0200</pubDate><guid>https://glyphack.com/dns-from-scratch/</guid><description>&lt;p>I decided to build another system from scratch just to explore a new topic and learn things.
This time I chose the &lt;a href="https://app.codecrafters.io/courses/DNS-server">Code Crafters&amp;rsquo;s DNS challenge&lt;/a>&lt;/p>
&lt;p>This is not a tutorial on how to do it but some notes to motivate you to do it.
There&amp;rsquo;s already &lt;a href="https://app.codecrafters.io/courses/DNS-server">excellent material&lt;/a> on how to do it with code examples here.
If you are already curious, then start building your own.&lt;/p>
&lt;p>I really enjoyed the way challenge is organized.
It&amp;rsquo;s very small steps in which you implement something from the spec.
You don&amp;rsquo;t build fake things that later become real at a certain stage.
It&amp;rsquo;s all working software from the beginning.
For example, in the DNS challenge you can use what you build with the &lt;code>dig&lt;/code> command from the first step.
It does not actually work, but it&amp;rsquo;s the first thing you need when building a DNS server.
Something that just spits out correct bytes.&lt;/p>
&lt;p>This encourages you to not plan for what components your app should have or how to represent the request and response.
You build the thing that shows you a result as soon as possible.
I was writing my code in the main function with no structs or anything. Because you really don&amp;rsquo;t need it.&lt;/p>
&lt;p>This helps a lot to make progress and stay motivated.
A lot of the time when you are learning something new you try to see what is the whole subject and how much you have to learn and what are the topics.
But this also slows you down and makes it uninteresting.
Primarily, because the joy of learning is destroyed.
Also, because any complex topic is big enough to show you how much time you need to spend to become good that can push you away from learning it.
This helps you to just focus on the given problem at the time.
You can apply this in your own projects as well.
Instead of listing every single thing you need to do to succeed focus on the next result you can see and learn to get there.&lt;/p>
&lt;p>&lt;strong>Things I learned&lt;/strong>&lt;/p>
&lt;p>This was my first time working with the bits and bytes in golang.
I had only done it in assembly before and almost forgot how it&amp;rsquo;s done.
And golang has a useful set of packages to do help with this.&lt;/p>
&lt;p>Also, the &lt;a href="https://datatracker.ietf.org/doc/html/rfc1035#autoid-44">compression method&lt;/a> is interesting, you don&amp;rsquo;t need a general algorithm that compresses the data when you know patterns in your data.
The compression does not work like normal compressions, and instead it relies on the fact that the DNS query has a lot of domain names with similar labels (each word between the &lt;code>.&lt;/code> in domain is a label) so it says a label once and refer to it later.&lt;/p>
&lt;p>Start with the smallest thing that gives result.&lt;/p>
&lt;p>&lt;strong>Improvements&lt;/strong>&lt;/p>
&lt;p>In the last stage of the challenge you implement a DNS server that takes in the requests and resolves them using another DNS resolver. The other resolver is provided by codecrafters.
I tried to use my resolver with &lt;code>8.8.8.8:53&lt;/code> and it was not working.
I found the reason is that my DNS parser does not still support all the information that &lt;code>dig&lt;/code> command sends by default. And also I haven&amp;rsquo;t implemented compression for encoding DNS request to bytes.
I haven&amp;rsquo;t checked how the codecrafters software works but maybe I would try to contribute this later.&lt;/p></description></item><item><title>How to Discover Interests</title><link>https://glyphack.com/explore/</link><pubDate>Sun, 29 Sep 2024 21:31:32 +0200</pubDate><guid>https://glyphack.com/explore/</guid><description>&lt;p>I was talking with my girlfriend recently about how to find something you are passionate about.&lt;/p>
&lt;p>Having something you’re truly passionate about gives you a reason to get up in the morning and makes life more enjoyable.
It’s more than just a hobby, it’s &lt;a href="https://paulgraham.com/genius.html">one of the key ingredients&lt;/a> to doing great work.&lt;/p>
&lt;p>But how can you find it?
One way is to notice what is drawing your attention.
Although this is a required condition for the answer, but it&amp;rsquo;s not enough.
You need genuine interest.
Plenty of things seem interesting at first, but the desire fades when you dig deeper.
It’s easy to think you’d enjoy doing what successful people do, but you don’t always take action.
Your mind tends to filter out things you’re not truly interested in.&lt;/p>
&lt;p>Imagine you’re trying to help a 10-year-old figure this out.
What often happens is parents suggest a prestigious profession: “Do you want to be a doctor, lawyer, or engineer?”
Then they explain what each does day-to-day.
But the kid’s decision is usually based on surface-level factors—how respected the job is, the salary, or what society thinks, without really understanding what those professions involve.
Parents usually follow up with, “Study hard, get into a good university, and become one of these.”
At this point, the kid is thinking, “What do I do next? Just get good grades in every subject to become a lawyer?”&lt;/p>
&lt;p>Not only this kind of advice does not get the kid anywhere.
It also contains a trap from what I described earlier.
Using prestigious professions is a way to make the suggestions look more interesting.
It&amp;rsquo;s not bad to do this, but we should be aware that it can create a false sense of interest.&lt;/p>
&lt;p>And this problem is not only in parents advice, but on the internet as well.
It might sound a good idea to lookup introduction to different professions online and make a judgement based on that.
But introductory materials online are very high level.
For example if you search for how to become a programmer the first pages you&amp;rsquo;re going to land on is horrible.
They are going to you the list of programming languages with how many jobs are on the market for each one, or list of different areas that you can work in how much you get paid for each one.
Leaving one thinking which one should they use first.
What it should do instead is to give them a taste of doing it.
The search should lead them into some kind of experiment where they program a bit and see if fall in love with it&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Another way to look at it is to see what is the next step they can take.
The kid is already learning some subjects in school.
They must enjoy one of them more than the others and might have some hobbies already.
If they like painting, encourage them to pursue it further.
Maybe by learning about famous painters and their stories.
If they enjoy math, suggest they look up concepts they don’t understand.
For instance, when learning about Gauss&amp;rsquo;s formula for summing numbers, ask: Where was he from? What else did he do? They might check out his Wikipedia page and discover other theorems, clicking through to learn more.
They will also see he was not only a mathematician, so by clicking on those links you discover more professions.
The hours spent on this are productive time, because they show you new ideas.&lt;/p>
&lt;p>I think the reason we are not thinking to provide a next step for kids is that the outcome is unpredictable.
Parents want their kids to end up in one of the professions they think is a good choice.
If the desired outcome for someone is that their kid must become an X they tell them next step to practice that and see if they enjoy it.
They also don&amp;rsquo;t want risks for their kid, so they point out something that sounds safe and good enough.&lt;/p>
&lt;p>When I look at my past I find a lot of good stuff when I was exploring.
Exploring is about being curious and pursuing whatever you don’t know when you come across it. If you find yourself continually spending time on a subject, that’s a sign of genuine interest.
Also exploring will give you more options to choose compared to when you start.
At the beginning you have one topic in mind but when you go deep you find more topics.
Take our Gauss example: now you know ten more things about him to study. You learn where he’s from and might explore more about that country and its language. You discover he wasn’t just a mathematician, leading you to other professions he had. This exploration reveals many new paths to consider.&lt;/p>
&lt;p>Some people might think it&amp;rsquo;s pointless to just read about anything you hear.
And while it sounds true, but it&amp;rsquo;s the source of new things.
Unless you have found the topic you still need this source.
And when you find new paths continue exploring until you find genuine interest.
Then start working on the topic and see if the motivation and interest continues.
You don&amp;rsquo;t need to fake enthusiasm for yourself.
Move on similar topics that you discovered or change the topic entirely if it&amp;rsquo;s boring.&lt;/p>
&lt;p>I think this is the way to show kids you they can discover what they want to do.
Schools often fail at this, they are making kids focused on the predefined topics and nothing else to get good grades.
The home works and tests different combinations of the same concepts you learned, and nothing new or extra is needed to pass.
Not only you don&amp;rsquo;t get any benefits if you go deep into subjects.
But you also don&amp;rsquo;t even get the chance to read about the subject because you have to study the important bits that show up in the exam.
They cannot even see where the things they are learning are useful until very late in the education.&lt;/p>
&lt;p>This is not only useful for teenagers.
But also as an adult I still have the issue.
I face this question a lot of the times.
And for adults it&amp;rsquo;s even a harder problem to solve.
During school time if you did not want to do anything you were just forced to do school stuff for the majority of the day and spend time that way.
You can ignore the question since you already have huge pile of homework, classes and exams that seem like progress to distract yourself.&lt;/p>
&lt;p>But as an adult you have less work imposed on yourself.
So you have more time and if you don&amp;rsquo;t have something that gets you excited or make you happy doing you are forced to spend time with something to pass the day.
Mostly TV, YouTube, social media, 5 second clips.
Or you can drown yourself in your job and treat it like school.
A very simple trick to understand if you use the job to distract yourself is if you are looking for something to spend your time on and then find the job as the answer then it&amp;rsquo;s not the actual answer.&lt;/p>
&lt;p>So as an adult you still need to keep the habit of exploring things you don&amp;rsquo;t understand and stay curios.
But as an adult one of the ingredients is harder to find: Random subjects and topics that you are forced to learn.
In school, you are given some books and materials, perfect or not you have some initial point.
You can start learning about topics you hear but don&amp;rsquo;t know about.
You can get ideas by being curious. Books, writings, talking with others.
But the point is that action is needed.
And from that initial source you can again create more paths and find the interesting things.&lt;/p>
&lt;p>Do not forget that the same challenges in the school can apply here.
You might be very busy during the job to look into other areas or learn about them.
Some problems in life might take the time and energy from you to explore unknown topics.&lt;/p>
&lt;p>And when you encounter questions you don&amp;rsquo;t know the answer to write about it.
I was reading &lt;a href="https://www.lesswrong.com/posts/ii4xtogen7AyYmN6B/learning-by-writing">learning by writing&lt;/a> a few weeks ago which explains the point perfectly.
You can use the writing to answer a question, and discover more questions as you write.&lt;/p>
&lt;p>Do not worry that this does not guarantee a predictable outcome.
The fact that outcome is not determined is the strength because each person has to determine the path for themselves.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://www.norvig.com/21-days.html">https://www.norvig.com/21-days.html&lt;/a> is a good starting point for someone to learn about programming.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>A better go test</title><link>https://glyphack.com/better-gotest/</link><pubDate>Sat, 24 Aug 2024 15:15:06 +0200</pubDate><guid>https://glyphack.com/better-gotest/</guid><description>&lt;p>My job now involves doing some Golang work and this post is about how &lt;code>go test&lt;/code> command can be improved.&lt;/p>
&lt;p>Until now, I never actually thought about improving the test command for a language.
But with Golang I have serious problems with reporting test results on command line.
Test output is not readable, The usual test flags you expect are not there.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/go/pull/62714">Fail fast option does not work&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/25380799/listing-of-pass-and-failed-test-cases-in-go">You cannot see the list of failed tests&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.pytest.org/en/7.1.x/how-to/cache.html">Does not offer rerun options like pytest&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I noticed the problem when I started working on a quite large golang project with a lot of tests.
When I run the tests it starts printing a lot of information, most of it are not important.&lt;/p>
&lt;p>I found &lt;a href="https://github.com/gotestyourself/gotestsum">gotestsum&lt;/a> package which seems to do what I want.
I like it, but it seems to focus on other things that I don&amp;rsquo;t find problematic.
For example, it has watch option, which is not really needed for the test runner.
You have other tools to watch and run commands.&lt;/p>
&lt;p>Happy that I found an opportunity I created &lt;a href="https://github.com/Glyphack/gotest">gotest&lt;/a>.
It&amp;rsquo;s a very simple tool. It takes in the output of &lt;code>go test&lt;/code> command and organizes output to a human friendly output. I&amp;rsquo;m planning to add more commands and see how far can I improve the testing on CLI. You don&amp;rsquo;t have to install an IDE just for running tests easily, it&amp;rsquo;s not Java.&lt;/p>
&lt;p>&lt;strong>Why not contributing to Golang?&lt;/strong>&lt;/p>
&lt;p>I think some of these features could be added in the &lt;code>go test&lt;/code>, and I&amp;rsquo;m going to use this project as an experiment to see how they turn out to be.&lt;/p>
&lt;p>If you are interested let me know.&lt;/p></description></item><item><title>Pytest Dev Sprint 2024</title><link>https://glyphack.com/pytest-dev-sprint-2024/</link><pubDate>Tue, 20 Aug 2024 19:35:10 +0200</pubDate><guid>https://glyphack.com/pytest-dev-sprint-2024/</guid><description>&lt;p>It was about 3 Months ago that a interesting message showed upon my GitHub feed.
It was from &lt;a href="https://github.com/The-Compiler">The-Compiler&lt;/a> arranging a 5 day &lt;a href="https://github.com/pytest-dev/sprint/">Pytest development sprint&lt;/a> in Austria.
I was following him for his open source work.
I finally got access to something interesting from following people whom work I like.&lt;/p>
&lt;p>I did not know much about the event, my guess was that there is going to be some coding and meeting other Pytest community.
So I shared the news with &lt;a href="https://github.com/farbodahm">my friend&lt;/a>, and we signed up for it.&lt;/p>
&lt;p>This was the first in person open source development event I ever joined.
The uncertainty give a mix of excitement and nervousness.&lt;/p>
&lt;p>The sprint was organized at &lt;a href="https://www.omicronenergy.com/en/">Omicron&lt;/a> in &lt;a href="https://www.openstreetmap.org/#map=15/47.3075/9.6207">Klaus, Vorarlberg&lt;/a>.
We were staying at a hotel in Feldkirch the hotel was right above the train station.
Every morning we took a 10-minute train ride form Feldkirch to Klaus.&lt;/p>
&lt;p>Other than us there were 5 pytest maintainers and 2 other contributors from Omicron. Genuinely helpful people.&lt;/p>
&lt;p>I worked on two refactorings during that week.
Pytest codebase is very old, I found some pieces from 12 years ago.
These are written when a lot of python features were not introduced.
So there are a lot of improvements both to code and to functionality by using better methods that are introduced to python.&lt;/p>
&lt;p>Pytest codebase is big, has a lot of features, but it was easy for me to navigate through it.
Code is kept close together, not much abstractions and mostly python structures themselves are used.
I wish software at companies were like this.&lt;/p>
&lt;p>The first issue I fixed was to make pytest fixtures an actual object and showing better error messages when a fixture is used in test summary.
Previously fixtures were created by using monkey patching a function to wrap a fixture and in the code there were checks on functions to find if it is a function wrapper or not.
I replaced it with a new class to contain the fixtures, and it is then easier to check for fixtures in the code using &lt;code>isinstance&lt;/code> calls.&lt;/p>
&lt;p>The second refactor I worked on turned out to be way bigger and ambitious than I imagined.
It&amp;rsquo;s related to the beautiful error messages you see when tests fail that show you debug information.
This is done by rewriting the assert statement in tests and adding additional information.
There was this file in the codebase called &lt;code>assert_rewrite.py&lt;/code> I basically started to rewrite that file.
That file I think is one of the main reasons why pytest is so pleasant to work with.
It takes in your plain tests and rewrites the AST to make them more informative and the result is printed out. So when your test fails you see nice error message with debugging traces in the output following your test code that failed.
This genius trick required genius code. Which is hard to understand.
We wanted to make some adjustments in that part and realized there is an opportunity to rewrite it and make it simpler.
There are definitely more ways to do something that was done 11 years ago.
I don&amp;rsquo;t think there is very big gains in refactoring this part.
It&amp;rsquo;s more of a fun challenge and maybe the new code allow adding more features.&lt;/p>
&lt;p>That week I had a great time. Felt really alive and happy.
From the morning I woke up and got ready to go and program.
The place that we had and the room full of people ready for talking about problems and reviewing your work.&lt;/p>
&lt;p>I don&amp;rsquo;t know why it is so much different than having a job as a programmer.
Maybe &lt;a href="https://world.hey.com/dhh/i-won-t-let-you-pay-me-for-my-open-source-d7cf4568">money really ruins the joy&lt;/a>.&lt;/p>
&lt;p>On the 4th day we went to visit the water power plant near Feldkirch.
A lot of stuff were mechanical.
Stats were shown in the mechanical gauges.
I don&amp;rsquo;t blame them if they don&amp;rsquo;t trust in software enough for this.
We can&amp;rsquo;t even get basic CRUD apps to work these days.&lt;/p>
&lt;p>I&amp;rsquo;m glad that I had followed Florian, and saw the announcement in my GitHub feed. Another good reason to find good people and follow them on GitHub.&lt;/p>
&lt;p>Oh lastly, I started using &lt;a href="https://qutebrowser.org/doc/quickstart.html">qutebrowser&lt;/a> during this sprint. I&amp;rsquo;m very happy with my decision. It&amp;rsquo;s an efficient and fast, just like vim. It works with everything except for crappy websites. For example google sometimes does not let you log in to an account from this browser (how much more they have to work to convince you that they are taking control of the web and browsers?).
But I&amp;rsquo;m using it as my development browser now. It works perfect for websites showing information. Let&amp;rsquo;s see if I will start creating scripts to have fun and automate some more stuff in the browser.&lt;/p>
&lt;p>Follow people you like on GitHub. On LinkedIn, you find show offs and announcements by sales and PR on GitHub you find real things.&lt;/p></description></item><item><title>Camping at Vresselse Bos</title><link>https://glyphack.com/vresselse-camping/</link><pubDate>Wed, 29 May 2024 22:55:24 +0200</pubDate><guid>https://glyphack.com/vresselse-camping/</guid><description>&lt;p>I had some time in between switching jobs and decided to go for a camping trip.
My first time in the Netherlands.&lt;/p>
&lt;p>After looking up some places I chose to go to &lt;a href="https://nl.wikipedia.org/wiki/Vresselse_Bos">Vresselse Bos&lt;/a>
I rented a tent from Airbnb.
The tent was close to a village called Nijnsel.
The way to get there was train to Eindhoven and then a bus to Nijnsel, then a 40-minute walk from there.
After about an hour walk to the east side after exiting the village there is a forest.
The tent itself and the area surrounding it was quite big.
After entering the fence gate, there was a long path surrounded with trees to the tent.
Inside were wooden furniture that gave you the feeling of living in the woods and a warm blanket to survive.
And most importantly, a large barrel of drinking water.&lt;/p>
&lt;p>In front of the tent there was a &lt;a href="https://en.wikipedia.org/wiki/Dry_toilet">dry toilet&lt;/a> and shower.
Shower was good, but I soon learned that water cannot stop a hungry mosquito.
And on the right side there was a fire pit with tree trunks around it to sit.&lt;/p>
&lt;p>The shirt 24 hours I was too tired to do anything after the long walk with my backpack.
So I sat down under the trees and watched birds and sunset.&lt;/p>
&lt;p>I started the second day with preparing breakfast.
I brought food with myself for the whole trip.
Apples and bananas, Lentils and red lentils(the best thing seriously), Potato eggplant Tomato, Eggs, Walnuts and Pistachios.
These were easy to keep in a cold area and none of them got rotten.&lt;/p>
&lt;p>My favorite meal lentil soup: Pour water over lentil and red lentils with olive oil pepper and salt, leave it for 45 minutes, and then you got a soup.
Well actually the original recipe does not have red lentils, but I discovered this myself.
The other dish I made there was &lt;a href="https://en.wikipedia.org/wiki/Mirza_ghassemi">Mirza Ghasemi&lt;/a>.
It&amp;rsquo;s very good with grilled eggplant.&lt;/p>
&lt;p>I brought some food back because I was nothing eating as much as normal days.
It sounds contradictory I&amp;rsquo;m really curious about the reason. Maybe because I was not eating on schedule but just when I was hungry.&lt;/p>
&lt;p>On second and third day of the trip, I was super excited and energized.
I did not have internet, but it was not boring.&lt;/p>
&lt;p>I went for hiking, the forest was massive.
You could stand in the middle and look around and don&amp;rsquo;t see anything other than trees and plants in horizon.
The nature is unpredictable and beautiful.
No two footsteps were the same, the height is different or the moisture of the soil.
I was giving full attention when walking there.
Some branches falling down occasionally, so I had to keep an eye.
There were a lot of canker worms crawling up to a tree.
I hit a lot of them, and it&amp;rsquo;s hard to get them off, another reason to watch steps.
Specially in the first few days I was not paying full attention to the surroundings.&lt;/p>
&lt;p>I saw squirrels, cats but no wild big animal there.
But there were a lot of insects and I got a lot of bites from them.
The most interesting thing I found was an ant nest. There were a lot of them and when they walked I could hear the sound of them walking. I brought them sugar the other day, but they did not like it. They were more interesting in getting their food in the natural way.&lt;/p>
&lt;p>It&amp;rsquo;s the complete opposite of daily life were every step and route is predictable.&lt;/p>
&lt;p>I then ate lunch and did some reading, then another hike.
It was like I can not finish the day.
I did a lot but still was afternoon.
There are a lot of hours in a day if there is no internet.&lt;/p>
&lt;p>On forth day I started using my laptop to read blogs and programming.
I downloaded a few blogs I liked before going there, so I had access to those.
I had also downloaded Python and Rust docs.
If you think it&amp;rsquo;s not possible to program without Google, it is.
Some people might even say it&amp;rsquo;s not possible to program without ChatGPT, sad.
It was a pleasant experience to do these activities in the jungle.
No distractions, No time limit, and bird sounds.&lt;/p>
&lt;p>In the last days I recorded some videos talking about different stuff, just thinking out loud.
They are on my &lt;a href="https://www.youtube.com/@glyphack/videos">YouTube channel&lt;/a> and I liked it.
It&amp;rsquo;s very similar writing.&lt;/p>
&lt;hr>
&lt;p>Overall the experience was wonderful.
I got up with bird noises when the sun went up and slept with it went down.
I was away form the daily life stress.
What time is it? Who cares.
I was more focused there, there was nothing to steal my attention other than nature.
I felt different physically as well not sure how much of it was because I was not under stress.&lt;/p>
&lt;p>Since I had to spend time on basic needs like food I was more physically active and enjoyed the meals more.
I also eat less that I normally eat, 1 or 2 meals per day only soup some days.
Although I was more active I was feeling full.
The thing was that I was eating more slowly and enjoying the moment.&lt;/p>
&lt;p>About the no internet part, well I wanted to turn it off to not have distractions and the micro stress shock that it gives me.
Of course, I needed the information on it.&lt;/p>
&lt;p>I mentioned that I downloaded a few pages before I go there.
I used this &lt;code>wget&lt;/code> command to download any site:&lt;/p>
&lt;pre tabindex="0">&lt;code>wget -m -k -p -E -np --limit-rate=200k
&lt;/code>&lt;/pre>&lt;p>And as much as it&amp;rsquo;s hard to believe, it&amp;rsquo;s doable.
I read and coded for a few hours each day.
The only bummer is that you cannot open links inside posts, I just saved them for when I&amp;rsquo;m back.
It is kind a good thing because you don&amp;rsquo;t get distracted while reading.
I&amp;rsquo;m sad that my link collector requires internet to work, time to question choices.&lt;/p>
&lt;p>I read a bunch of blogs and books there all worthy to read.&lt;/p>
&lt;p>The blogs read there:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.unqualified-reservations.org">https://www.unqualified-reservations.org&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.catb.org/~esr/">http://www.catb.org/~esr/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ranprieur.com">https://ranprieur.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://datagenerics.com">https://datagenerics.com&lt;/a> my favorite math puzzle blog&lt;/li>
&lt;li>&lt;a href="https://starslatecodex.com">https://starslatecodex.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://geohot.github.io/blog/">https://geohot.github.io/blog/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://lukesmith.xyz">https://lukesmith.xyz&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://notrelated.xyz">https://notrelated.xyz&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://paulgraham.com">https://paulgraham.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I also took two longer writings:&lt;/p>
&lt;ul>
&lt;li>Antifragile by Nassim Taleb&lt;/li>
&lt;li>&lt;a href="https://www.washingtonpost.com/wp-srv/national/longterm/unabomber/manifesto.decsn.htm">Unabomber Manifesto&lt;/a> read the Washington post version and spend their bandwidth&lt;/li>
&lt;li>&lt;a href="http://localroger.com/prime-intellect">The Metamorphosis of Prime Intellect&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I also worked on my project &lt;a href="https://github.com/Glyphack/enderpy">Enderpy&lt;/a> there, I made great progress toward adding the LSP hover action to the editor.&lt;/p>
&lt;p>Now that I&amp;rsquo;m back I try to make my life more like that.
Remove the stress and distractions.
Do more physical activities specially to provide my basic needs.
Worry less about stuff, and use the thinking to think about what I like.&lt;/p></description></item><item><title>Why Is It Hard to Do Real Work</title><link>https://glyphack.com/doing-real-work/</link><pubDate>Fri, 26 Apr 2024 21:48:35 +0200</pubDate><guid>https://glyphack.com/doing-real-work/</guid><description>&lt;p>When I first read &lt;a href="https://www.paulgraham.com/procrastination.html">good and bad procrastination&lt;/a> by Paul Graham, I was amazed how much my perspective changed about working.&lt;/p>
&lt;blockquote>
&lt;p>There are three variants of procrastination, depending on what you do instead of working on something: you could work on (a) nothing, (b) something less important, or (c) something more important. That last type, I&amp;rsquo;d argue, is good procrastination.&lt;/p>
&lt;p>The most dangerous form of procrastination is unacknowledged type-B procrastination, because it doesn&amp;rsquo;t feel like procrastination. You&amp;rsquo;re &amp;ldquo;getting things done.&amp;rdquo; Just the wrong things.
Any advice about procrastination that concentrates on crossing things off your to-do list is not only incomplete, but positively misleading, if it doesn&amp;rsquo;t consider the possibility that the to-do list is itself a form of type-B procrastination. In fact, possibility is too weak a word. Nearly everyone&amp;rsquo;s is. Unless you&amp;rsquo;re working on the biggest things you could be working on, you&amp;rsquo;re type-B procrastinating, no matter how much you&amp;rsquo;re getting done.&lt;/p>&lt;/blockquote>
&lt;p>I learned that the most dangerous way to procrastinate is to do some work but not the important work.
The kind of work that results to something great.
You can be working your ass off and be busy all the time.
But why don’t you have a result from all that work?
Because those hours spent working were not going to produce anything at all.&lt;/p>
&lt;p>I was thinking what are the ways to do more real work and less procrastination.&lt;/p>
&lt;p>I write up a list of things I find interesting and important.
It&amp;rsquo;s a weekly list which I carry over to next week.
Whenever I&amp;rsquo;m doing something I can check if that work was something I found important before or not.&lt;/p>
&lt;p>This helps me with finding:&lt;/p>
&lt;ul>
&lt;li>work that I do which I did not put under the list&lt;/li>
&lt;li>work that I put under the list but I don&amp;rsquo;t spend time on.
Answering both of them is helpful to spend time wisely.&lt;/li>
&lt;/ul>
&lt;p>One of the ways to avoid doing work is being busy deciding non important stuff.
There are many decisions to make daily optimizing all is not possible.
In these situations I try to get it done, and move on.
Imagine if it&amp;rsquo;s deciding between something that does not matter much, I&amp;rsquo;d roll a die.
Rolling a dice for stuff that are not the main goal is good because it helps to make a decision and have more time.
When I free up enough time with useless stuff, I get bored then I do something else. I can repeat this process over and over to get to important work finally.&lt;/p>
&lt;p>But there&amp;rsquo;s also another kind of errand that does not finish.
Things like cleaning the house, calling others, checking inboxes.
I can be doing these stuff day after day.
In case of social media every hour(or minute!) so the dice based decision making does not work.
In this case, the best way is to resist the temptation.
For necessary ones(housekeeping, chatting with friends), schedule a specific amount of time to only do them within the allotted time.&lt;/p>
&lt;p>When I decide to do real work, other urgent works appear.
Yet, these tasks are often made up excuses.
I realize this could be a coping mechanism to avoid the important work I intended to do.
When this happens I pay more attention to the work and try to fix the underlying reason that I don&amp;rsquo;t want to do the work.
It might be that it&amp;rsquo;s too big of a work and sounds impossible.
When something doesn&amp;rsquo;t sound doable it reduces the motivation to do it.
Breaking to smaller achievable tasks help.&lt;/p>
&lt;p>Sometimes the distractions are so reachable that avoiding it requires effort.
In this case making it harder to reach would be better.
If I sit down to write(like right now) I turn off wifi to write the first draft.
If I cannot remember something or want to check it I put a note.
After finishing, I can use the internet to address those notes.
This gets harder with things like programming where I need to look up libraries or install them, &lt;a href="https://twitter.com/mitchellh/status/1781840288300097896">but doable&lt;/a>.
Prepare a list of tasks, download the resources offline, get it done.&lt;/p>
&lt;p>Sometimes the reason to procrastinate about something comes from how it&amp;rsquo;s done.
I was watching an old talk from DHH about his experience building 37signals.
In the talk &lt;a href="https://youtu.be/MlhAkNWC1qo?t=1190">he mentions&lt;/a> how he limited the amount of hours he could be putting into building their products.
How could limiting the hours produce better results? One reason is that you have no room for procrastination.
If I do something for only 1 hour a day, that hour is either spent on the work or gone.
And when it&amp;rsquo;s gone I can feel it because I did not get anything done.
But if I don&amp;rsquo;t limit the time, I can be spending the whole day on that task.
And the truth is, having a lot of time for doing something makes room for delays.
If something comes up you can say &amp;ldquo;Oh I have the whole day for work so let&amp;rsquo;s get this done before that.&amp;rdquo;
But this is not possible with one hour time limit.
If you decide to do the errand in that hour you don&amp;rsquo;t get anything done.
Which alerts the brain more.
It&amp;rsquo;s better to waste time in obvious ways than with fake work.
Because fake work requires more effort to notice.&lt;/p>
&lt;p>The worst kind of effort is the one that produces nothing and fighting that is the first step to get to boredom. After staring at the blank page for a while, writing will follow.&lt;/p></description></item><item><title>Expertise Beyond Validation</title><link>https://glyphack.com/expertise-beyond-validation/</link><pubDate>Tue, 16 Apr 2024 21:48:35 +0200</pubDate><guid>https://glyphack.com/expertise-beyond-validation/</guid><description>&lt;p>I was walking in Rome a few weeks ago.
This idea that less educated people with less resources and money built such beautiful buildings was so fascinating to me.
Even the most ordinary-looking buildings are constructed with care.
They have fantastic arches, curved ceilings.
They are a work of art.&lt;/p>
&lt;p>We see this pattern everywhere.
My favorite writers like &lt;a href="https://sive.rs/">Derek Sivers&lt;/a>, &lt;a href="http://www.paulgraham.com/articles.html">Paul Graham&lt;/a>, and &lt;a href="https://slatestarcodex.com/">Scott Alexander&lt;/a> are not full time authors.
The writers who truly changed my perspective and showed me new ways were not just writers, but thinkers.
They write, it&amp;rsquo;s in form of blogs mostly.
Each blog post gives a message, and it&amp;rsquo;s interesting that you don&amp;rsquo;t need a whole book to convey a message.
And there are tons of authors who write books full time but not as good.
They can write more being able writing more is not the guarantee to quality.&lt;/p>
&lt;p>The same phenomenon happens in software.
Programmers outperform full time corporate software engineers.
Somehow &lt;a href="https://github.com/excalidraw/excalidraw">Excalidraw&lt;/a> manages to be faster and more good-looking than Miro, and be open source and free.
Of course, I&amp;rsquo;m not saying the people who build this superior software are not employees of these companies.
A lot of these people work there or worked there.
The important part is why they can build a better product without having resources these companies can provide?&lt;/p>
&lt;p>So there&amp;rsquo;s definitely something that helps some individuals without validations outperform so-called experts in a topic.
I&amp;rsquo;m calling it validations because in Today&amp;rsquo;s world it&amp;rsquo;s more than only certifications.
People used to be impressed by university degrees only, now by your employer.
While it&amp;rsquo;s not a common thing that causes this, I think it&amp;rsquo;s worth to dig deeper.&lt;/p>
&lt;p>&lt;strong>Motivation&lt;/strong>&lt;/p>
&lt;p>Pursuing mastery and perfection requires strong motivation.
It&amp;rsquo;s either (a) an external force, as with ancient builders who constructed for the king, or (b) intrinsic motivation.
Both of these forces are really strong.
The first one sounds very cruel, but this is the same thing that pushes a startup to succeed.
They don&amp;rsquo;t want to &lt;a href="https://paulgraham.com/die.html">die&lt;/a>.&lt;/p>
&lt;p>Now which motivation is better?
Motivated by money or fear and joy?
I think the latter is better.
Also, money by itself can be a poor motivation sometimes.
Money is a proxy to showing value.
Building a product is the value.
Whenever there&amp;rsquo;s a chance to go for the real thing, proxies are worthless.
Also, most of the time you don&amp;rsquo;t get paid based on the quality.
This decreases the quality in paid work.&lt;/p>
&lt;p>This advantage helps the expert tribe to care more about the work.
Caring means they make it perfect, not because of the money but because they have unlimited source of motivation.
That&amp;rsquo;s why these projects worth doing, money is not the ultimate goal.
It&amp;rsquo;s &lt;a href="https://world.hey.com/dhh/it-must-be-worth-it-even-if-it-doesn-t-work-1e7f49fc">the satisfaction&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Practicality&lt;/strong>&lt;/p>
&lt;p>People coming without any background to a topic to do something don&amp;rsquo;t know the rules and frameworks.
They are there to build something.
It&amp;rsquo;s not about following best practices or showing off your theoretical knowledge.
They are flexible to use any technique that works.&lt;/p>
&lt;p>This is especially true in software.
A lot of companies are just slowed down due to following industry best practices.
If you focus on am I using the right pattern instead of is my product good your will be slow.
Practices are tools to be used, not the ultimate end goal.
Companies can be successful and not follow all the practices.
There are a lot of rules, you don&amp;rsquo;t need all of them.
And also there are a lot of things that is &lt;strong>not&lt;/strong> in the industry, but you need it.
When you are too focused on what you can do and cannot do you loose the option to invent new techniques.
Sometime inventing a new technique is just borrowing from other fields.&lt;/p>
&lt;p>So focusing on practical stuff matters.
Doing whatever is needed in order to succeed matters.
AirBnb founder &lt;a href="https://twitter.com/StartupArchive_/status/1737446769519124584">did the photography of their hosts&lt;/a> at the beginning.
If they were too rigid about what practices they should follow they would not do this.
That&amp;rsquo;s why it&amp;rsquo;s so odd to hear this.
Other professionals rarely do this.&lt;/p>
&lt;p>&lt;strong>Flexibility&lt;/strong>&lt;/p>
&lt;p>People working on their own ideas are flexible.
They can focus on what they like to do, and can choose to change what they want to do.&lt;/p>
&lt;p>The reason writing blog posts is more flexible than writing a book is that you can discover what you want to write as you write.
You are free to jump from topic to topic.
Even write new topics that discards previous ideas.
With a book you need to start with what you want to write.&lt;/p>
&lt;p>There&amp;rsquo;s also the problem of a deadline.
For example a software project with a deadline needs to finish on time.
When it&amp;rsquo;s not finished the project manager needs to explain why to their bosses.
So they get some more time and push for the project to finish.
It&amp;rsquo;s obvious that a lot of corners are cut here to meet the deadline.
But there are also a lot of corners cut in startups.
Then why they are different?
In startups, it&amp;rsquo;s so easy to discard previous code and write another version.
Reddit did this, they even changed the programming language from Lisp to Python.
This requires a lot of sign off and meetings in companies.
So if you end up with a half ass work at a company it will be there for a long time.
But in a startup, sure no problem just rewrite it next week.
Make it better, and have fun.&lt;/p>
&lt;p>&lt;strong>Fear of Failure&lt;/strong>&lt;/p>
&lt;p>Certified people in a topic tend to fear more from failure.
When failure happens it&amp;rsquo;s like as if their certifications were not valid, which takes away the credibility.
Outsiders have nothing to lose.
They either have skill and it&amp;rsquo;s in the result or don&amp;rsquo;t.
If they realize they are not skilled enough is not a bad thing, they practice more.
What are you going to do about certifications? Get another one?&lt;/p></description></item><item><title>Best Place to Work at as a Programmer</title><link>https://glyphack.com/best-job/</link><pubDate>Fri, 12 Apr 2024 20:39:20 +0200</pubDate><guid>https://glyphack.com/best-job/</guid><description>&lt;p>Despite the title this isn&amp;rsquo;t meant to name a specific company.
I&amp;rsquo;m trying to figure out for people like myself who enjoy programming what the best place to work would be like.&lt;/p>
&lt;p>I think there&amp;rsquo;s fundamental problem at most companies right now.
Everything is fake. Of course, we have goals, but they are artificial.
They are there because companies need goals, to show to investors.
But they are not the real goals of the company. The goal is the customers, and the problem it solves.
But this way is &lt;a href="https://geohot.github.io/blog/jekyll/update/2023/07/20/a-disgusting-playbook-copy.html">the playbook&lt;/a> for getting money and being famous.
This is not true for all the companies, some are actually solving problems selling product and making money.
A miner knows the value in their work because they create wealth.
Sometimes I don&amp;rsquo;t even know where my salary comes from.&lt;/p>
&lt;p>But it&amp;rsquo;s also not so easy to get into good companies.
Having those skills is not something that comes from working on a regular software dev job.
You&amp;rsquo;re not gonna suddenly jump from building web forms to building autonomous cars, it requires other skills, and practice.&lt;/p>
&lt;p>So ultimately I think some companies are places were you can find value in the work.
They are a small number, and hard to get into.
The next point is also in successful companies not all the teams are doing work equally valuable.
That means just passing the interview and getting in is not enough, you have to get into the right team, with the right skill.
In the end it&amp;rsquo;s not just a name, it&amp;rsquo;s the skill and people you work with that matters.
You might set the goal to work at a good company thinking it leads to valuable work, but that&amp;rsquo;s the wrong goal.&lt;/p>
&lt;p>So what&amp;rsquo;s the way to escape? Open source.
Open source is the place where results and performance matters.
In open source you just don&amp;rsquo;t get promoted because the budget allows that. You build useful stuff and acquire skill.
It&amp;rsquo;s not about artificial titles and goals anymore, it&amp;rsquo;s about what actually is being built.&lt;/p>
&lt;p>That&amp;rsquo;s why I like companies that start with open source more than others.
Companies like &lt;a href="https://comma.ai/">Comma&lt;/a>, Sentry, Hashicorp, and &lt;a href="https://astral.sh/">Astral&lt;/a>, they all had an excellent product before acting like a big company.&lt;/p>
&lt;p>The next question is how to get to work on things that are actually valuable?
Unlike big companies that have a big gate keeping you out open source is open to everyone.
If today you want to work with a more skilled person than yourself on a project, open source allows that.
Just find a project, read the code and improve it.
You get to work with people created a valuable programming language, a database, a web framework.
Without having to pass an interview or any other gate.
The interesting part is, many of good people that are at big companies, that you want to work with, are in open source communities.&lt;/p>
&lt;p>It can be even easier to get in touch with them in open source than to get a job at their company.
I&amp;rsquo;ve had better chance to contact someone asking questions and feedback in open source and getting feedback than senior people in companies.
They are just more available.&lt;/p>
&lt;p>That&amp;rsquo;s why it&amp;rsquo;s the best place to work at.
You don&amp;rsquo;t have to play interview game to get in, then play the politic game to get do the things you find valuable.
It requires more effort to work, that&amp;rsquo;s expected.
You are not doing anything other than the important work itself, so the work seems harder.
Fill your day with meetings and discussions, and you see how easier (and more pointless) it gets.&lt;/p>
&lt;p>But open source doesn&amp;rsquo;t pay.
That is true and there&amp;rsquo;s not much to do about it.
Specially when you are just starting there&amp;rsquo;s nothing to get money from.
But I think after building something useful, it&amp;rsquo;s possible to get money out of it.
You just need the product first.
These days the situation is better, VCs&amp;rsquo; are putting funding open source projects.
But that should not be a goal, it&amp;rsquo;s just an indicator that there&amp;rsquo;s money.
You won&amp;rsquo;t starve. You get to do valuable work, and enjoy it.&lt;/p>
&lt;p>What makes open source more sustainable than a low paying job is that you can work on valuable things.
Jobs are structured in a way that pay is not directly related to the value.
Without garbage collectors, the world would be a mess, but they are not paid well.
Same phenomenon described &lt;a href="https://strikemag.org/bullshit-jobs/">Bullshit Jobs&lt;/a>.&lt;/p></description></item><item><title>How to infer type for Generic types in Python?</title><link>https://glyphack.com/python-generics-type-inference/</link><pubDate>Mon, 25 Mar 2024 16:46:15 +0100</pubDate><guid>https://glyphack.com/python-generics-type-inference/</guid><description>&lt;p>I implemented Generic classes and functions this week in Enderpy. I&amp;rsquo;m happy that now my code can now read and infer types of &lt;a href="https://github.com/python/typing/blob/main/conformance/tests/generics_basic.py#L114">this conformance test&lt;/a>.&lt;/p>
&lt;p>I chose to skip implementing generics with syntax &lt;code>def f[T](): T&lt;/code> because of the &lt;a href="https://peps.python.org/pep-0695/#scoping-behavior">scoping behavior&lt;/a>.
They are also tested extensively in this &lt;a href="https://github.com/python/typing/blob/main/conformance/tests/generics_syntax_scoping.py">test case&lt;/a>.&lt;/p>
&lt;p>Another strange thing I found in the &lt;code>typeshed&lt;/code> repo is that in the &lt;code>sys/__init__.py&lt;/code> file there is a &lt;code>import sys&lt;/code> in the beginning.
Making this a cyclic import. I think the reason is to use the &lt;code>sys.version&lt;/code> and &lt;code>sys.platform&lt;/code> in the type definitions.
But in the type checker I manually skip resolving this import because it resolves to itself.&lt;/p>
&lt;p>The current implementation I came up with for the generic does not infer the actual type of generic in the type evaluation phase. So if the type checker asks the type of parameter that is generic type it gets back a generic parameter node in the returned type.
I&amp;rsquo;m planning to add the functionality to infer the type of the generic parameter based on the types passed as the generic type to type checker.&lt;/p>
&lt;p>This is how the code works right now:&lt;/p>
&lt;ol>
&lt;li>The type parameters are inserted in the symbol table like other variables.&lt;/li>
&lt;li>When the type evaluator resolves a type annotation that is referring to typing. TypeVar it considers that a type parameter type.&lt;/li>
&lt;li>When the classes have a base class of &lt;code>typing.Generic[T]&lt;/code> the type evaluator tries to find the type parameter, and adds the type parameter to the inferred class type.&lt;/li>
&lt;/ol>
&lt;p>The next step is to continue the generics test cases and implement the type inference for the generic types.&lt;/p></description></item><item><title>Don't be afraid to Rewrite</title><link>https://glyphack.com/rewrite/</link><pubDate>Tue, 12 Mar 2024 16:24:34 +0100</pubDate><guid>https://glyphack.com/rewrite/</guid><description>&lt;p>I recently started to notice this pattern that some teams create products and move on. Maybe some maintenance until no one sends more bug reports.
They just literally move on from that product, to the next one.&lt;/p>
&lt;p>Now this is not new, when I was a consultant this was exactly what companies expect. Work on something and make it to the finish line and leave.
It makes sense, you don&amp;rsquo;t want to keep them around because it&amp;rsquo;s costly.
But at a product company? This does not make sense, why wouldn&amp;rsquo;t you want the product to grow?&lt;/p>
&lt;p>A typical example is that you are working on a new product for the company. You usually have a timeline of when are you going to launch, when to do testing and when to fully release.
You work during this time, and after making it to the finish line, you release. Then the company expects all your focus and energy on the next thing.
This happens because the company wants to grow in many areas, so they don&amp;rsquo;t want your focus in only on area.&lt;/p>
&lt;p>But the problem is they do it in a way that if you touch a software after deadline it looks like a bad thing. It looks like you missed the release.
But it&amp;rsquo;s actually most of the time you have more information when you work on something.
This expectation is what I don&amp;rsquo;t think is right, that you need to deliver and project should be good without you. Otherwise, they say you created something that needs maintenance and is considered bad.&lt;/p>
&lt;p>But this is wrong.&lt;/p>
&lt;p>The first reason is that when you develop the product, you learn more.
So after doing the initial development.
There are just some things that you can never discover in the requirements phase.
The reason is not that the person did a bad job in the design or coding.
When you make something for the first time, you don&amp;rsquo;t know some unknowns.
It&amp;rsquo;s because they will know more when they make something that works. And for any problem you just realize the problems with your solution when you apply it.
So if you stop the development after the release, you loose that extra knowledge.
Use the initial development phase to discover them, and even ignore them but fix them afterwards.&lt;/p>
&lt;p>The other problem with this mindset is that people stop caring about the product after it goes live.
If they find issues, they tend to ignore them if they are small enough.
They would not care about 2% of the cases where the endpoint times out.
Because, if you committed to the date and delivered, if you go back and touch the product, it means you did not deliver it on time.
Now if this is applied to the every feature and product you are left with a product that has issues in every feature.
One page is slow, another one crashes. They only happen to you because you are in that 2%.&lt;/p>
&lt;p>I don&amp;rsquo;t consider rewriting and refactoring bad even after you deliver.
There are a lot of things that are just not discoverable before you dive deep into a problem.
So by encouraging people to deliver and forget, you create this culture that everything is created to be good enough for release.&lt;/p>
&lt;p>I don&amp;rsquo;t mind rewriting what I worked on for few days or weeks. It&amp;rsquo;s better than lying to yourself that I made a technical debt. It&amp;rsquo;s a lie because it&amp;rsquo;s not a tech debt, it&amp;rsquo;s a defect, and you know it.&lt;/p>
&lt;p>So if you do something for the first time. Expect to fail to come up with the right solution.
Accept the fact that you might do it wrong, and need to rewrite it.
Teams, should not consider this as a delayed lunch.
It&amp;rsquo;s just that the product is live but, we want to make it better.&lt;/p>
&lt;p>That&amp;rsquo;s all I had to say. I saw this pattern in consultancy and said okay.
But I also saw it in product companies, and I&amp;rsquo;m shocked. I don&amp;rsquo;t want to see it in my own work.&lt;/p>
&lt;p>So don&amp;rsquo;t be afraid to realized you made a mistake, that&amp;rsquo;s part of the journey.
Use it and rewrite your software to be better.&lt;/p></description></item><item><title>Devlog 0001: Contributing to Ruff, Profiling, Python Types Conformance Tests</title><link>https://glyphack.com/dv-1/</link><pubDate>Sat, 03 Feb 2024 10:56:48 +0100</pubDate><guid>https://glyphack.com/dv-1/</guid><description>&lt;p>Last week I wanted to start contributing to rust.
I was working on Adding &lt;a href="https://github.com/astral-sh/ruff/pull/9513">uninitialized attribute access check&lt;/a> to Ruff.&lt;/p>
&lt;p>I did it and learned a lot about how to track attributes in Python code.
A gist of it would be, you need to go over the class, in each function when something is assigned to a name you need to check if that name is self or cls.
And you do this by checking if it matches the first argument of that function.
Then if the function is a class method it&amp;rsquo;s cls and otherwise self.&lt;/p>
&lt;p>I also learned about profiling.
After finishing the implementation I realized the benchmarks are failing.
So I need see how did I mess up the performance. It is not because of the rule but because of the code I added to the visitor to keep track of attribute initialization and access.
But first we need to profile.&lt;/p>
&lt;p>I found two resources for doing it.
Maybe I can do a separate note on Rust profiling.
&lt;a href="https://nnethercote.github.io/perf-book/">Rust Performance Book&lt;/a> which has a profiling section.
&lt;a href="https://docs.astral.sh/ruff/contributing/#profiling-projects">Amazing guide for Ruff Only&lt;/a>&lt;/p>
&lt;p>The interesting part is that Macos is not good for profiling, or at least I could not easily learn to use the tools.
I used cargo instruments, the output can be opened with instruments app. Instruments app is dog shit.
I expected some kind of home page, documentation or something when I search for it like &lt;a href="https://jetbrains.com/help/idea/profiler-intro.html">this&lt;/a>.
But nothing.&lt;/p>
&lt;p>So I could not find traces for the functions I added(skill issue.) I gave up.&lt;/p>
&lt;p>In the end I ended up using &lt;a href="https://github.com/mstange/samply">Samply&lt;/a> which was better.&lt;/p>
&lt;p>I also used the cargo benchmark and &lt;a href="https://github.com/BurntSushi/critcmp">critcmp&lt;/a> to compare results between my commits and found the perf issue.&lt;/p>
&lt;p>It was caused because I added a new vector to each scope to keep track of undefined attribute accesses.
But I realized I can just have a global vector for the whole file and store the undefined attribute along with it&amp;rsquo;s scope.&lt;/p>
&lt;p>With a vector on every scope and many allocations:&lt;/p>
&lt;pre tabindex="0">&lt;code>linter/default-rules/large/dataset.py 1.00 455.7±6.28µs 89.3 MB/sec 1.14 519.6±19.69µs 78.3 MB/sec
linter/default-rules/numpy/ctypeslib.py 1.00 86.9±1.62µs 191.5 MB/sec 1.14 99.3±6.53µs 167.8 MB/sec
linter/default-rules/numpy/globals.py 1.00 12.5±0.19µs 236.4 MB/sec 1.05 13.1±0.10µs 225.1 MB/sec
linter/default-rules/pydantic/types.py 1.00 194.5±4.85µs 131.2 MB/sec 1.16 226.3±42.70µs 112.7 MB/sec
linter/default-rules/unicode/pypinyin.py 1.00 31.7±0.29µs 132.6 MB/sec 1.06 33.7±1.64µs 124.7 MB/sec
&lt;/code>&lt;/pre>&lt;p>After using a global vector for the whole program:&lt;/p>
&lt;pre tabindex="0">&lt;code>linter/default-rules/large/dataset.py 1.00 455.7±6.28µs 89.3 MB/sec 1.03 469.9±5.46µs 86.6 MB/sec
linter/default-rules/numpy/ctypeslib.py 1.00 86.9±1.62µs 191.5 MB/sec 1.02 88.8±1.47µs 187.6 MB/sec
linter/default-rules/numpy/globals.py 1.00 12.5±0.19µs 236.4 MB/sec 1.04 13.0±0.10µs 227.1 MB/sec
linter/default-rules/pydantic/types.py 1.00 194.5±4.85µs 131.2 MB/sec 1.03 201.2±4.70µs 126.8 MB/sec
linter/default-rules/unicode/pypinyin.py 1.00 31.7±0.29µs 132.6 MB/sec 1.03 32.7±0.28µs 128.7 MB/sec
&lt;/code>&lt;/pre>&lt;p>I also learned that codespeed is a wonderful tool for exploring performance changes between my commits.
&lt;a href="https://codspeed.io/astral-sh/ruff/branches/Glyphack:linter-pylint-E0203">Example&lt;/a>, next time I use this.&lt;/p>
&lt;p>For enderpy I was looking for a test suite that I can develop against until my type checker is complete.
Luckily it exists! You can view it &lt;a href="https://github.com/python/typing/tree/main/conformance">here&lt;/a>.
It does not have a basic test case were you only have functions and variables but that one is easy to come up with myself.&lt;/p></description></item><item><title>Five Thousands Lines of Kotlin</title><link>https://glyphack.com/five-thousands-lines-of-kotlin/</link><pubDate>Sun, 21 Jan 2024 14:43:03 +0100</pubDate><guid>https://glyphack.com/five-thousands-lines-of-kotlin/</guid><description>&lt;p>This post is about my impression of Kotlin as a language after, well you guessed it, writing about five thousand lines of it. I will go through what I don&amp;rsquo;t like about it and whether I would use this language on my own(spoiler: I won&amp;rsquo;t unless I have to.) I started using Kotlin only because of the new job. In my job I worked on server applications only, with the added spice of enterprise software practices.&lt;/p>
&lt;p>You&amp;rsquo;ve probably heard that Kotlin is much better compared to Java. That is true, it&amp;rsquo;s like a unicorn compared to a horse, but in the end it&amp;rsquo;s just Java with extra features. Kotlin has more features for dealing with nulls, the best feature is the &lt;a href="https://kotlinlang.org/docs/null-safety.html#safe-calls">&lt;code>.?&lt;/code> operator&lt;/a>. This allows you to eliminate the &lt;code>if (x == null)&lt;/code> from code. I wish they had the same for exceptions.&lt;/p>
&lt;p>&lt;strong>Exception Handling&lt;/strong>&lt;/p>
&lt;p>Continuing with the language features, I think Kotlin lacks tools for &lt;a href="https://kotlinlang.org/docs/exceptions.html#checked-exceptions">specifying exception types&lt;/a> thrown by a function, at least in Java you can annotate what exceptions a function can raise, but Kotlin does not support that.
I think Java is even better in this regard.
This results in ugly try catches on &lt;code>Exception&lt;/code> everywhere.
I&amp;rsquo;m not sure why they thought it was a good idea.
Anyone who used a language with support for specifying error types in the function signature knows that it makes it much easier to use the functions and handle exceptions correctly.
In contrast in Kotlin you either have to read through the docs or function code and hope you handled each exception. If you really don&amp;rsquo;t want to fail, you are left with ugly try caches everywhere because you need to catch all exceptions from each statement.&lt;/p>
&lt;p>&lt;strong>Editor Support&lt;/strong>&lt;/p>
&lt;p>Kotlin does not have an official LSP.
LSP stands for Language Server Protocol. Almost all editors work with LSP to provide autocompletion and diagnostics. So the red lines you see in VScode telling what is wrong comes from that.&lt;/p>
&lt;p>&lt;a href="https://discuss.kotlinlang.org/t/any-plan-for-supporting-language-server-protocol/2471">The reason&lt;/a> JetBrains does not invest time on LSP is because they want to spend the time on their own editor.
I understand they created really good IDEs and obviously they have a good editor for Kotlin.
But drifting away from open source standards makes it harder for people to use language where they are comfortable.&lt;/p>
&lt;p>I used kotlin-language-server while using Kotlin.
One of my problems with it is the slow startup. But this is improved in the recent months. I also &lt;a href="https://github.com/neovim/nvim-lspconfig/pull/2930">added this feature&lt;/a> to Neovim lsp config which helped a lot.
Kotlin is really complex as a language for a couple of people to maintain a language server for it.&lt;/p>
&lt;p>&lt;strong>Language Features&lt;/strong>&lt;/p>
&lt;p>Speaking of how hard it is to maintain a language server for Kotlin we get to the next point.
I think Kotlin has a lot of features, and that is what makes it hard to analyze Kotlin code:&lt;/p>
&lt;ul>
&lt;li>Class modifiers like &lt;code>open&lt;/code>&lt;/li>
&lt;li>There are 4 visibility modifiers&lt;/li>
&lt;li>Classes can have 2 constructors
These are not very complex for end user but makes it harder for language tool developers.
I don&amp;rsquo;t think this is needed. This probably satisfies people with boundary fetishes, but you don&amp;rsquo;t need them to get the job done.&lt;/li>
&lt;/ul>
&lt;p>But there are also features that makes it harder for end users to reason about the code.&lt;/p>
&lt;p>The &lt;a href="https://kotlinlang.org/docs/extensions.html">extension functions&lt;/a> are one, you can mess up the &lt;code>this&lt;/code> pointer in a class very easily:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Hello&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">sayHi&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;I say &amp;#34;&lt;/span>.toHi())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>.toHi(): String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.uppercase() + &lt;span style="color:#e6db74">&amp;#34;hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> h = Hello()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h.sayHi()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this code the &lt;code>this&lt;/code> in &lt;code>toHi()&lt;/code> function is not referring to the Hello class anymore.&lt;/p>
&lt;p>The next one is the &lt;a href="https://kotlinlang.org/docs/type-safe-builders.html">builder syntax&lt;/a>(it&amp;rsquo;s ironically called type safe builders).
with builders, you can write code like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Hello&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">sayHi&lt;/span>(str: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buildHello {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name=str
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }.say()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code can create a new class inside the buildHello scope, and then call the say function on it. This looks nice but imagine you want to make the argument name clearer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">sayHi&lt;/span>(name: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buildHello {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name=name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }.say()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the point you missed is that name in the buildHello scope is referring to the attribute name of the builder. So that name is not referencing the name in the argument. This is seriously tricky to catch.&lt;/p>
&lt;p>You might look and say hey, this makes my code cleaner. Yeah sure, one minute you&amp;rsquo;re writing clean, concise code, and the next you&amp;rsquo;re lost in a sea of extension functions and builders. Good luck debugging.&lt;/p>
&lt;p>So my final take on the language features, it&amp;rsquo;s too much!&lt;/p>
&lt;p>&lt;strong>Libraries&lt;/strong>&lt;/p>
&lt;p>Kotlin has access to JVM libraries. Which is a big plus.
The only problem I faced was that the null safety is not fully respected when using Java code with &lt;code>NotNull&lt;/code> annotation.
@NotNull, indicates that we must never call our method with a null if we want to avoid an exception.
Which is kind of a surprise because being null safe means being null safe everywhere.
But in these functions you can call something that can be null.
IntelliJ and the compiler won&amp;rsquo;t complain about this as well.&lt;/p>
&lt;p>But same with Java I don&amp;rsquo;t like that the libraries in the ecosystem rely so much language features as their API. Just give me a goddamn function not an annotation, or a builder, or plugins.&lt;/p>
&lt;p>There are some Ktor features that fail during the runtime because it cannot find some plugin that is needed to work properly. Why must this be a runtime problem?&lt;/p>
&lt;p>&lt;strong>Why Kotlin Won and Not Scala?&lt;/strong>&lt;/p>
&lt;p>This question annoys my mind a lot. I also worked with Scala and I think it&amp;rsquo;s certainly a better language. Maybe that&amp;rsquo;s for another post.&lt;/p>
&lt;p>But I also stopped doing Scala for one reason, the functional programming community took over the language and every library tried to add functional paradigm and type safety to everything (talking to you, ZIO). Again, just expose a goddamn function.&lt;/p></description></item><item><title>A Better Keyboard</title><link>https://glyphack.com/better-keyboard/</link><pubDate>Sat, 30 Dec 2023 10:54:35 +0100</pubDate><guid>https://glyphack.com/better-keyboard/</guid><description>&lt;p>Imagine you want to make a better keyboard.
Seems like a hard challenge for every company.
What if &amp;lsquo;better&amp;rsquo; meant compressing multiple key presses into one? Or have shortcut for your frequent actions.
If you minimize the effort to use it then you are making it better for yourself.&lt;/p>
&lt;p>Challenge lies in the keyboard&amp;rsquo;s limited keys, and hard to press combinations like &lt;code>ctrl + alt + any key&lt;/code>.&lt;/p>
&lt;p>Most of us learn to use tools as they are.
But most of the time the product is not tailored to your needs out of the box.&lt;/p>
&lt;p>None of the products produced are going to be designed based on your specific needs.
One of the advantages of trying to use keyboard to make repetitive tasks easier is to reduce the attention needed for them.
When these tasks will be easy enough that doing them &lt;a href="https://www.scattered-thoughts.net/writing/moving-faster/">won&amp;rsquo;t require attention&lt;/a>.
Just like how when you learn touch typing, and suddenly you are just writing instead of looking at the keyboard, or frequently press the wrong key.
You get faster.&lt;/p>
&lt;p>Before going into details, keep in mind that the goal is to make your workflow easier.
Some of these suggestions might be useful and others might be not.
Take away the ideas with yourself and adjust it accordingly.&lt;/p>
&lt;p>I implemented the improvements using the following tools:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.hammerspoon.org/">Hammerspoon&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://karabiner-elements.pqrs.org/">Karabiner&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>These tools are exclusively for Mac. There are other alternatives for other platforms.&lt;/p>
&lt;h2 class="heading" id="remapping-keys">
Remapping Keys
&lt;a class="anchor" href="#remapping-keys">#&lt;/a>
&lt;/h2>
&lt;p>Our keyboards are not designed for heavy usage of shortcuts.
So you can start making shortcuts for stuff by setting them to &lt;code>ctrl + T&lt;/code>,&lt;/p>
&lt;p>This method presents two significant challenges:&lt;/p>
&lt;ul>
&lt;li>The easily accessible keys are already assigned, such as &lt;code>CMD + T&lt;/code>.&lt;/li>
&lt;li>Complex combinations become cumbersome: try pressing &lt;code>CMD + ALT + ctrl + T&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>The idea is that some keys can be used to do more than one thing.
What keys can be used like this? Let&amp;rsquo;s take a look at different keys.&lt;/p>
&lt;ul>
&lt;li>Keys you hold down to change how &lt;em>other&lt;/em> keys behave, but that (usually) don&amp;rsquo;t do anything if you use them on their own (like Shift and Control).
&lt;ul>
&lt;li>&lt;code>Shift&lt;/code>&lt;/li>
&lt;li>&lt;code>Control&lt;/code>&lt;/li>
&lt;li>&lt;code>Alt&lt;/code>&lt;/li>
&lt;li>&lt;code>Command&lt;/code>&lt;/li>
&lt;li>&lt;code>Fn&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Keys that you press and release but don&amp;rsquo;t want to &amp;ldquo;repeat&amp;rdquo; as you hold them (like Escape or Insert).
&lt;ul>
&lt;li>&lt;code>Escape&lt;/code>&lt;/li>
&lt;li>&lt;code>Caps lock&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>You can use the keys that are designed to only be held to do a new thing if they are pressed. Or use the keys that are designed to be pressed to do another thing if they are held.&lt;/p>
&lt;p>For example, I have set the following setting for Caps lock keys:&lt;/p>
&lt;ul>
&lt;li>On hold: hyper key &lt;code>ctrl + SHIFT + ALT&lt;/code>&lt;/li>
&lt;li>On press: escape&lt;/li>
&lt;/ul>
&lt;p>Why hyper?
Because this new key press cannot conflict with any other shortcuts
This allows you to create shortcuts like: hyper + H/J/K/L which is pretty comfortable to press.&lt;/p>
&lt;p>I used to have CAPS lock set to &lt;code>CMD + ctrl + SHIFT + ALT&lt;/code>.
But I noticed that there is a MacOS specific key binding for taking a system snapshot with &lt;code>CMD + ctrl + shift + alt + ,&lt;/code> which cannot be disabled and my system froze when I accidentally pressed this key.
So I stopped using it and switched to the above combination instead.&lt;/p>
&lt;p>You can do this using a &lt;a href="https://karabiner-elements.pqrs.org/docs/manual/configuration/configure-complex-modifications/#create-your-own-rules">complex modification&lt;/a> in Karabiner:&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;description&amp;#34;: &amp;#34;Capslock to Hyper&amp;#34;,
&amp;#34;manipulators&amp;#34;: [
{
&amp;#34;description&amp;#34;: &amp;#34;Click to Capslock, Hold to Hyper&amp;#34;,
&amp;#34;from&amp;#34;: {
&amp;#34;key_code&amp;#34;: &amp;#34;caps_lock&amp;#34;,
&amp;#34;modifiers&amp;#34;: {
&amp;#34;optional&amp;#34;: [
&amp;#34;any&amp;#34;
]
}
},
&amp;#34;to&amp;#34;: [
{
&amp;#34;key_code&amp;#34;: &amp;#34;right_shift&amp;#34;,
&amp;#34;modifiers&amp;#34;: [
&amp;#34;right_control&amp;#34;,
&amp;#34;right_option&amp;#34;
]
}
],
&amp;#34;to_if_alone&amp;#34;: [
{
&amp;#34;key_code&amp;#34;: &amp;#34;escape&amp;#34;
}
],
&amp;#34;type&amp;#34;: &amp;#34;basic&amp;#34;
}
]
}
&lt;/code>&lt;/pre>&lt;p>This key now can be used as your new shortcut key.
&lt;code>hyper + t&lt;/code> can be mapped to an action globally and does not conflict with anything.
So any key on the keyboard can now be used for shortcuts, allowing numerous customization.&lt;/p>
&lt;p>If there are keys on your keyboard that you don&amp;rsquo;t use you can map them to frequently used keys.
For example for vim users, the right command key on macs can be remapped to control.
This makes pressing vim shortcuts like &lt;code>ctrl + A&lt;/code> easier.&lt;/p>
&lt;p>I have a split keyboard, so keys under my thumbs are easy to press, and I remapped them to do more stuff than usual.&lt;/p>
&lt;p>
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="" src="https://glyphack.com/split-keyboard-remapping.excalidraw.svg" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;p>I changed a lot of keys since then but the ideas are useful. Just find the keys that works best for you.&lt;/p>
&lt;h2 class="heading" id="window-switching">
Window Switching
&lt;a class="anchor" href="#window-switching">#&lt;/a>
&lt;/h2>
&lt;p>There are some default hotkeys on every system like &lt;code>alt+tab&lt;/code>.
This gives you a bit more advantage over switching windows with a mouse, &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=Px0_8J0Wb-s">but there is room for improvements&lt;/a>.
These shortcuts are designed for general problems.
You can improve it for your own workflow.&lt;/p>
&lt;p>First example is alt tabbing to switch windows.
This simple thing that you probably do 100 times a day requires to:&lt;/p>
&lt;ul>
&lt;li>Take hand off home row&lt;/li>
&lt;li>Press them multiple times to find the window you want&lt;/li>
&lt;li>And if you have multiple windows then press &lt;code>ctrl+tab&lt;/code> or &lt;code>command+~&lt;/code> to get there
Wouldn&amp;rsquo;t it be good if you could do 80% of these window switches with a single shortcut that is more ergonomic?
It depends, I switch between Browser, terminal and note app multiple times most of the time.
You can assign a hotkey for these and only use alt tab for when you need to switch infrequently used windows.&lt;/li>
&lt;/ul>
&lt;p>Here&amp;rsquo;s the solution I use based on &lt;a href="https://rakhesh.com/coding/using-hammerspoon-to-switch-apps/">this post&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>WINDOW_MANAGEMENT_KEY &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#e6db74">&amp;#34;alt&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;command&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;ctrl&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WINDOWS_SHORTCUTS &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#e6db74">&amp;#34;J&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Brave Browser&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#e6db74">&amp;#34;K&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;WezTerm&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">launchOrFocusOrRotate&lt;/span>(app)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> focusedWindow &lt;span style="color:#f92672">=&lt;/span> hs.window.focusedWindow()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> focusedWindow &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.application.launchOrFocus(app)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> focusedWindowApp &lt;span style="color:#f92672">=&lt;/span> focusedWindow:application()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> focusedWindowAppName &lt;span style="color:#f92672">=&lt;/span> focusedWindowApp:name()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> focusedWindowPath &lt;span style="color:#f92672">=&lt;/span> focusedWindowApp:path()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> appNameOnDisk &lt;span style="color:#f92672">=&lt;/span> string.gsub(focusedWindowPath, &lt;span style="color:#e6db74">&amp;#34;/Applications/&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> appNameOnDisk &lt;span style="color:#f92672">=&lt;/span> string.gsub(appNameOnDisk, &lt;span style="color:#e6db74">&amp;#34;.app&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> appNameOnDisk &lt;span style="color:#f92672">=&lt;/span> string.gsub(appNameOnDisk, &lt;span style="color:#e6db74">&amp;#34;/System/Library/CoreServices/&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> focusedWindow &lt;span style="color:#f92672">and&lt;/span> appNameOnDisk &lt;span style="color:#f92672">==&lt;/span> app &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> currentApp &lt;span style="color:#f92672">=&lt;/span> hs.application.get(focusedWindowAppName)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> appWindows &lt;span style="color:#f92672">=&lt;/span> currentApp:allWindows()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- https://www.hammerspoon.org/docs/hs.application.html#allWindows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- A table of zero or more hs.window objects owned by the application. From the current space.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">#&lt;/span>appWindows &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentApp:hide()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">#&lt;/span>appWindows &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- It seems that this list order changes after one window get focused,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- Let&amp;#39;s directly bring the last one to focus every time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- https://www.hammerspoon.org/docs/hs.window.html#focus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> app &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Finder&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- If the app is Finder the window count returned is one more than the actual count, so I subtract&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> appWindows[&lt;span style="color:#f92672">#&lt;/span>appWindows &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]:focus()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> appWindows[&lt;span style="color:#f92672">#&lt;/span>appWindows]:focus()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.application.launchOrFocus(app)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.application.launchOrFocus(app)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _, shortcut &lt;span style="color:#66d9ef">in&lt;/span> ipairs(WINDOWS_SHORTCUTS) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.hotkey.bind(WINDOW_MANAGEMENT_KEY, shortcut[&lt;span style="color:#ae81ff">1&lt;/span>], &lt;span style="color:#66d9ef">function&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> launchOrFocusOrRotate(shortcut[&lt;span style="color:#ae81ff">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The lua table can be easily expanded to open more applications.&lt;/p>
&lt;h2 class="heading" id="shortcut-for-frequent-actions">
Shortcut for frequent actions
&lt;a class="anchor" href="#shortcut-for-frequent-actions">#&lt;/a>
&lt;/h2>
&lt;p>Other than switching apps there are some useful tools that is nice to have at hand.&lt;/p>
&lt;p>Some suggestions are:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.raycast.com/extensions/calendar">Viewing calendar and reminders&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.raycast.com/extensions/clipboard-history">Clipboard history&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.raycast.com/raycast/browser-bookmarks">Fuzzy find and open browser bookmarks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.hammerspoon.org/docs/hs.grid.html#:~:text=To%20resize%2Fmove%20the%20window,upper%2Dleft%20of%20the%20window.">Splitting, resizing &amp;amp; moving windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.raycast.com/changelog/1-19-0">Fuzzy find open windows&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Raycast is easier to use for things you need to browse and search.
For actions that don&amp;rsquo;t include search and selection Hammerspoon is good.&lt;/p>
&lt;p>These mappings can look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>hyper + A move window to left half of the screen
hyper + S move window to bottom half of the screen
hyper + D move window to right half of the screen
hyper + W move window to top half of the screen
hyper + L clipboard history
hyper + ; browser bookmarks
hyper + M search open windows
&lt;/code>&lt;/pre>&lt;p>The following Hammerspoon config allows moving windows with shortcuts:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- left&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hs.hotkey.bind(WINDOW_MANAGEMENT_KEY, &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.window.focusedWindow():moveToUnit({ &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0.5&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- right&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hs.hotkey.bind(WINDOW_MANAGEMENT_KEY, &lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.window.focusedWindow():moveToUnit({ &lt;span style="color:#ae81ff">0.5&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0.5&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- up&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hs.hotkey.bind(WINDOW_MANAGEMENT_KEY, &lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.window.focusedWindow():moveToUnit({ &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0.5&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- down&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hs.hotkey.bind(WINDOW_MANAGEMENT_KEY, &lt;span style="color:#e6db74">&amp;#34;s&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.window.focusedWindow():moveToUnit({ &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0.5&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0.5&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- center&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hs.hotkey.bind(WINDOW_MANAGEMENT_KEY, &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.window.focusedWindow():centerOnScreen()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- full screen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hs.hotkey.bind(WINDOW_MANAGEMENT_KEY, &lt;span style="color:#e6db74">&amp;#34;i&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.window.focusedWindow():moveToUnit({ &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use a layout mode for moving windows:
&lt;a href="https://github.com/jasonrudolph/keyboard#window-layout-mode">https://github.com/jasonrudolph/keyboard#window-layout-mode&lt;/a>&lt;/p>
&lt;h2 class="heading" id="symbol-layers">
Symbol Layers
&lt;a class="anchor" href="#symbol-layers">#&lt;/a>
&lt;/h2>
&lt;p>If you code a lot this will be your favorite section.
Have you noticed how hard it is to type &lt;code>_&lt;/code>?
You need to take fingers off the home row, hold shift and press a key.
Both keys are pressed with pinky fingers.&lt;/p>
&lt;p>I find the idea &lt;a href="https://gist.github.com/gsinclair/f4ab34da53034374eb6164698a0a8ace">here&lt;/a>,
it suggests to map &lt;code>(holding s)+k&lt;/code> to a symbol like &lt;code>-&lt;/code>.&lt;/p>
&lt;p>The idea is very similar to how we define different toggle and press behavior to keys.
With Karabiner, you can modify s key to act like normal s but when pressed simultaneously with k become &lt;code>-&lt;/code>.&lt;/p>
&lt;p>Concerned about accidentally typing &lt;code>sk&lt;/code> or &lt;code>-&lt;/code>? You can adjust the speed at which the shortcut triggers with the
&lt;a href="https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to/hold-down-milliseconds/">hold down option&lt;/a>.&lt;/p>
&lt;p>So imagine the following layout:&lt;/p>
&lt;pre tabindex="0">&lt;code> y u i o
a h j k l
n m , .
&lt;/code>&lt;/pre>&lt;p>When you hold a with left hand and any of the right keys it can be mapped to a symbol.&lt;/p>
&lt;p>Here&amp;rsquo;s my layout. I mention the key you need to hold on the left and what new keys are mapped to on the right.&lt;/p>
&lt;p>&lt;code>s&lt;/code> for symbols:&lt;/p>
&lt;pre tabindex="0">&lt;code> y ` u # i $ o %
s h ~ j - k - l !
n m + , + . @
&lt;/code>&lt;/pre>&lt;p>&lt;code>f&lt;/code> for delimiters:&lt;/p>
&lt;pre tabindex="0">&lt;code> y u { i } o ^
f h &amp;lt; j ( k ) l &amp;amp;
n &amp;gt; m [ , ] . *
&lt;/code>&lt;/pre>&lt;p>So just set these stuff for different combinations that are hard to press.
I even have &lt;code>a+u&lt;/code> for &lt;code>tab&lt;/code> and &lt;code>a+i&lt;/code> for &lt;code>ctrl+tab&lt;/code>.&lt;/p>
&lt;p>For implementing this in Karabiner follow the guide above.
Since Karabiner uses json files for configuration writing all of this by hand is time consuming. You can use a tool like Goku (brew install yqrashawn/goku/goku) instead.
Here is my &lt;a href="https://github.com/Glyphack/dotfiles/blob/20b97e675532db0bf8d73068fec1dd3050ad2fc5/karabiner/karabiner.json#L1">giant json&lt;/a> Karabiner configuration.&lt;/p>
&lt;p>For doing normal JSON you need the following Karabiner rules for :&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;from&amp;#34;: {
&amp;#34;key_code&amp;#34;: &amp;#34;u&amp;#34;,
&amp;#34;modifiers&amp;#34;: {
&amp;#34;optional&amp;#34;: [
&amp;#34;any&amp;#34;
]
}
},
&amp;#34;to&amp;#34;: [
{
&amp;#34;key_code&amp;#34;: &amp;#34;open_bracket&amp;#34;,
&amp;#34;modifiers&amp;#34;: [
&amp;#34;left_shift&amp;#34;
]
}
],
&amp;#34;conditions&amp;#34;: [
{
&amp;#34;name&amp;#34;: &amp;#34;f-mode&amp;#34;,
&amp;#34;value&amp;#34;: 1,
&amp;#34;type&amp;#34;: &amp;#34;variable_if&amp;#34;
}
],
&amp;#34;type&amp;#34;: &amp;#34;basic&amp;#34;
},
{
&amp;#34;type&amp;#34;: &amp;#34;basic&amp;#34;,
&amp;#34;parameters&amp;#34;: {
&amp;#34;basic.simultaneous_threshold_milliseconds&amp;#34;: 250
},
&amp;#34;to&amp;#34;: [
{
&amp;#34;set_variable&amp;#34;: {
&amp;#34;name&amp;#34;: &amp;#34;f-mode&amp;#34;,
&amp;#34;value&amp;#34;: 1
}
},
{
&amp;#34;key_code&amp;#34;: &amp;#34;open_bracket&amp;#34;,
&amp;#34;modifiers&amp;#34;: [
&amp;#34;left_shift&amp;#34;
]
}
],
&amp;#34;from&amp;#34;: {
&amp;#34;simultaneous&amp;#34;: [
{
&amp;#34;key_code&amp;#34;: &amp;#34;f&amp;#34;
},
{
&amp;#34;key_code&amp;#34;: &amp;#34;u&amp;#34;
}
],
&amp;#34;simultaneous_options&amp;#34;: {
&amp;#34;detect_key_down_uninterruptedly&amp;#34;: true,
&amp;#34;key_down_order&amp;#34;: &amp;#34;strict&amp;#34;,
&amp;#34;key_up_order&amp;#34;: &amp;#34;strict_inverse&amp;#34;,
&amp;#34;key_up_when&amp;#34;: &amp;#34;any&amp;#34;,
&amp;#34;to_after_key_up&amp;#34;: [
{
&amp;#34;set_variable&amp;#34;: {
&amp;#34;name&amp;#34;: &amp;#34;f-mode&amp;#34;,
&amp;#34;value&amp;#34;: 0
}
}
]
}
}
}
&lt;/code>&lt;/pre>&lt;h2 class="heading" id="not-only-speed-but-ergonomics">
Not Only Speed but ergonomics
&lt;a class="anchor" href="#not-only-speed-but-ergonomics">#&lt;/a>
&lt;/h2>
&lt;p>These customization help with removing uncomfortable keys you need to press.
The benefits are immediate - less strain on your fingers and wrists due to reduced movement, and a mind unburdened from managing mundane tasks like locating the Terminal window.&lt;/p></description></item><item><title>TIL Secret to Open Source Contribution &amp; Contributing to Python Docs</title><link>https://glyphack.com/contributing-to-python-docs/</link><pubDate>Tue, 19 Sep 2023 22:23:48 +0200</pubDate><guid>https://glyphack.com/contributing-to-python-docs/</guid><description>&lt;p>I think I learned something about contributing to open source that, if I knew a couple of years back, I could have done much more open source contributions.&lt;/p>
&lt;p>A while back, I started creating a &lt;a href="https://github.com/Glyphack/enderpy">hand-written parser for Python&lt;/a>.
I ended up also contributing some fixes to Python docs.
This was particularly interesting to me because it did not require really advanced knowledge, and the stuff there that was incorrect or outdated had been there for years.
So why didn&amp;rsquo;t I do this earlier?&lt;/p>
&lt;p>It was because I never exposed myself to the opportunity.
I usually avoided reading docs from start to finish or diving into the code of the tool I was using.&lt;/p>
&lt;p>The &lt;a href="https://github.com/python/cpython/pull/104986">first&lt;/a> &amp;amp; &lt;a href="https://github.com/python/cpython/pull/104986">second PR&lt;/a> were the result of reading the grammar and &lt;code>ast&lt;/code> package docs and finding inconsistencies.&lt;/p>
&lt;p>Also after I was working on my type checker I started reading PEPs and playing around with other Python type checkers such as pyright.
Then suddenly ( I found )[https://github.com/quora/pyanalyze/issues/707] a rule in PEP-586(&lt;a href="https://peps.python.org/pep-0586/#illegal-parameters-for-literal-at-type-check-time">https://peps.python.org/pep-0586/#illegal-parameters-for-literal-at-type-check-time&lt;/a>)
which was not possible to implement with Python ast structure.
I haven&amp;rsquo;t started an issue for this one yet because it requires more effort but it&amp;rsquo;s another opportunity.&lt;/p>
&lt;p>I think that when we start programming journey, it&amp;rsquo;s best to be exposed to these opportunities of reading the actual framework/tool documentation.
Or just, in general, look more into the source/docs rather than reaching for tutorials.&lt;/p></description></item><item><title>Compilers Resources</title><link>https://glyphack.com/compiler-resources/</link><pubDate>Fri, 15 Sep 2023 19:50:19 +0200</pubDate><guid>https://glyphack.com/compiler-resources/</guid><description>&lt;p>This post is a compilation of great resources I found while building a type checker for Python.
These resources are free and highly focused on specific topics, making them ideal for learning by doing rather than going through extensive materials.&lt;/p>
&lt;h2 class="heading" id="parser">
Parser
&lt;a class="anchor" href="#parser">#&lt;/a>
&lt;/h2>
&lt;p>There are different ways to approach parsing. You can either write one by hand or use a parser generator.
For compilers or interpreters, you can use a parser generator.
However, if you&amp;rsquo;re working on tools like formatters or language servers, your parser needs to handle broken code gracefully. This can be either done with a tool like treesitter that can handle broken code to some extent and also by writing your own. Of course writing your own is more fun.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://boshen.github.io/javascript-parser-in-rust/">&lt;strong>&amp;ldquo;Write JS Parser in Rust&amp;rdquo;&lt;/strong>&lt;/a> by Boshen is an excellent introductory guide.&lt;/li>
&lt;li>For resilient parsing, check out this tutorial on &lt;a href="https://matklad.github.io/2023/05/21/resilient-ll-parsing-tutorial.html">&lt;strong>resilient LL parsing&lt;/strong>&lt;/a>.&lt;/li>
&lt;li>Your language&amp;rsquo;s official documentation. For Python, there is &lt;a href="https://docs.python.org/3/library/ast.html">&lt;strong>Python AST module&lt;/strong>&lt;/a>.&lt;/li>
&lt;li>Look into implementation of open source linters or compilers. &lt;a href="https://github.com/RustPython/Parser/blob/main/parser/src/lexer.rs">&lt;strong>RustPython Lexer&lt;/strong>&lt;/a> is a good one for python.&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="compilers--interpreters">
Compilers &amp;amp; Interpreters
&lt;a class="anchor" href="#compilers--interpreters">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://craftinginterpreters.com/">&lt;strong>&amp;ldquo;Crafting Interpreters&amp;rdquo;&lt;/strong>&lt;/a> is an essential resource for compilers. I recommend reading it chapter by chapter as you build your project.&lt;/p>
&lt;p>For a comprehensive understanding of relevant topics, consider following the &lt;a href="http://openclassroom.stanford.edu/MainFolder/CoursePage.php?course=Compilers">&lt;strong>Stanford Compilers Class&lt;/strong>&lt;/a>. Although I haven&amp;rsquo;t watched it personally, I found this &lt;a href="https://pgrandinetti.github.io/compilers/">&lt;strong>guide&lt;/strong>&lt;/a> based on the class quite helpful.&lt;/p>
&lt;p>You can find examples of implemented programming languages and use them as a reference
&lt;a href="https://plzoo.andrej.com/language/poly.html">&lt;strong>Programming Languages Zoo&lt;/strong>&lt;/a> is one resource for this.&lt;/p>
&lt;h3 class="heading" id="symbol-table">
Symbol Table
&lt;a class="anchor" href="#symbol-table">#&lt;/a>
&lt;/h3>
&lt;p>For symbol table you need to check the language implementation and know the scoping rules, private/public, and different kinds of symbols. There&amp;rsquo;s no all in one solution.&lt;/p>
&lt;p>This &lt;a href="https://eli.thegreenplace.net/2010/09/18/python-internals-symbol-tables-part-1/">&lt;strong>series on the Python symbol table implementation&lt;/strong>&lt;/a>
from Eli Bendersky is useful for learning how does a symbol table works.&lt;/p>
&lt;p>RustPython&amp;rsquo;s &lt;a href="https://rustpython.github.io/website/rustpython_compiler/symboltable/struct.SymbolTable.html">&lt;strong>SymbolTable&lt;/strong>&lt;/a> implementation.&lt;/p>
&lt;h2 class="heading" id="semantic-analyzer">
Semantic Analyzer
&lt;a class="anchor" href="#semantic-analyzer">#&lt;/a>
&lt;/h2>
&lt;p>While resources specific to the semantic analysis phase are scarce, you can find inspiration and solutions in existing projects:&lt;/p>
&lt;ul>
&lt;li>MyPy &lt;a href="https://github.com/python/mypy/wiki/Semantic-Analyzer">&lt;strong>wiki&lt;/strong>&lt;/a>.&lt;/li>
&lt;li>Pyright&amp;rsquo;s &lt;a href="https://github.com/microsoft/pyright/blob/eb98cdda4ecfb4d2ce2fb1d4b9ce7848ab439c32/packages/pyright-internal/src/analyzer/binder.ts">&lt;strong>binder.ts&lt;/strong>&lt;/a> is an example of you would do it.&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="type-checking">
Type Checking
&lt;a class="anchor" href="#type-checking">#&lt;/a>
&lt;/h2>
&lt;p>For type checking you are mostly interested in the type rules in that language.
Therefore it&amp;rsquo;s good to check other type checker implementations.
They will teach you the rules and how to do it.&lt;/p>
&lt;ul>
&lt;li>design of &lt;a href="https://github.com/quora/pyanalyze/blob/master/docs/design.md">&lt;strong>pyanalyze&lt;/strong>&lt;/a> for Python.&lt;/li>
&lt;li>For MyPy, the &lt;a href="https://github.com/python/mypy/wiki/Type-Checker">&lt;strong>Type Checker&lt;/strong>&lt;/a> wiki.&lt;/li>
&lt;li>internal details of &lt;a href="https://github.com/quora/pyanalyze/blob/master/docs/design.md">&lt;strong>Jedi language server&lt;/strong>&lt;/a>.&lt;/li>
&lt;li>Pyright &lt;a href="https://github.com/microsoft/pyright/blob/main/docs/internals.md">&lt;strong>internals&lt;/strong>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="lsp-language-server-protocol">
LSP (Language Server Protocol)
&lt;a class="anchor" href="#lsp-language-server-protocol">#&lt;/a>
&lt;/h2>
&lt;p>For a comprehensive understanding of language servers, file systems, updates, and testing, check out this &lt;a href="https://www.youtube.com/playlist?list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y">&lt;strong>Explaining Rust AnalyzerYouTube playlist&lt;/strong>&lt;/a> from &lt;a href="https://matklad.github.io/">Matkald&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/">&lt;strong>LSP specifications&lt;/strong>&lt;/a> are very easy to read. It&amp;rsquo;s long but you don&amp;rsquo;t need everything in the beginning.
To skip the part of defning every structure yourself you can use &lt;a href="https://github.com/ebkalderon/tower-lsp">&lt;strong>Tower LSP&lt;/strong>&lt;/a>.&lt;/p>
&lt;h2 class="heading" id="linters">
Linters
&lt;a class="anchor" href="#linters">#&lt;/a>
&lt;/h2>
&lt;p>Same as with type checking, for linters it&amp;rsquo;s best to look into implementations and learn from them.
Specially linters have a lot in common with compilers and interpreters because they just emit a human readable error instead of machine code.&lt;/p>
&lt;p>The following tools are useful to understand how analysis is done and errors are reported:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/web-infra-dev/oxc">&lt;strong>oxc&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/astral-sh/ruff">Ruff&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="final-words">
Final Words
&lt;a class="anchor" href="#final-words">#&lt;/a>
&lt;/h2>
&lt;p>Compilers are super fun. If you have more resources please send them to me.&lt;/p></description></item><item><title>Trying Out Learning In Public</title><link>https://glyphack.com/my-learn-in-public-workflow/</link><pubDate>Thu, 18 May 2023 14:07:58 +0200</pubDate><guid>https://glyphack.com/my-learn-in-public-workflow/</guid><description>&lt;p>A while back I read about &lt;a href="https://www.swyx.io/learn-in-public">learning in public&lt;/a>
from swyx:&lt;/p>
&lt;blockquote>
&lt;p>At some point people will start asking you for help because of all the stuff you put out.&lt;/p>
&lt;p>80% of developers are “dark”, they dont write or speak or participate in public tech discourse.&lt;/p>&lt;/blockquote>
&lt;p>The idea is promising people who learns in public get more reputaiton.
This extra reputation makes it easier to find friends, &lt;a href="https://simonwillison.net/2021/Jul/17/standing-out/">get jobs&lt;/a>
and so on.&lt;/p>
&lt;p>Starting to learn in public is a hard path,
the people that are learning in public like swyx and &lt;a href="https://nicolevanderhoeven.com/">nicole van derhoeven&lt;/a>
each have their own way, and both are successful with it.
So there&amp;rsquo;s no one way to do this.&lt;/p>
&lt;p>I&amp;rsquo;m not measuring the success only in terms of follower/subscriber but also the
their consistency in publishing.
One interesting aspect of people who are consistent in their work is that,
after you read one of their post there are a lot more to read from them when
you enjoy their work.
Maybe that&amp;rsquo;s why you rarely find one fascinating writing and when you
search for the writer they haven&amp;rsquo;t wrote anything else.
The consistency of their work make them better.&lt;/p>
&lt;p>Swyx has some &lt;a href="https://www.swyx.io/learning-gears">nice hacks&lt;/a> to start doing this.
Simon Wilson has another suggestion which is write down your &lt;a href="https://simonwillison.net/2021/May/2/one-year-of-tils/">daily TILs&lt;/a>.&lt;/p>
&lt;p>My goal is to write down a plan for how to be a public learner.
This plan is for myself so you might want to adjust some parts before adopting it.&lt;/p>
&lt;p>First step is to be aware of what you learn every day.
I use Readwise with anything I read or watch almost all the time.&lt;/p>
&lt;p>When reading something and I found some interesting idea, I add a TIL tag to it.
Everyday I have a reminder to 10 minutes to review the TIL notes I created that day.&lt;/p>
&lt;p>Now with this newly learned piece there are two possible options:&lt;/p>
&lt;ol>
&lt;li>It&amp;rsquo;s a small point so I can just share it as a post or a tweet&lt;/li>
&lt;li>It&amp;rsquo;s part of a bigger idea, and I want to create a creative exhaust from it&lt;/li>
&lt;/ol>
&lt;p>For items belonging to the second category I spend more time to write my own thinking
from the idea.
This is like a blogpost but I write in in Obsidian, my note taking app.
It helps to gather ideas related to a specific topic inside a page.&lt;/p>
&lt;p>I like to keep a list of content I can create in the future.
whenever I write a page for something I learned that means I have
a topic to do reasearch on so I put it in the content list.&lt;/p>
&lt;p>I like to set a schedule to remind myself about picking up
the stuff I left. So just by setting a 2 hour time block every week I can
research more on one of the topics on my list and write down all the stuff I know.
Or not even writing down but to connect different notes I have on the topic.
It might become a post worthy content or not, anyway It&amp;rsquo;s there and can be shared.&lt;/p>
&lt;p>So it&amp;rsquo;s really simlple but you need to keep the list and ideas somewhere,
otherwise you never know what to talk about when it comes to sharing.
After a while when the knowledge piles up in a topic.
You can spend small time connecting all your learnings together,
and create learning exhaust.&lt;/p>
&lt;p>There&amp;rsquo;s another aspect of learning in public, which is to share what you&amp;rsquo;re doing.&lt;/p>
&lt;p>&lt;a href="https://twitter.com/willmcgugan">WillMcGugan&lt;/a> shares their progress on building
Textual on twitter.
This is not particularly same as other public learners mentioned above,
but it brings the same benefits.
By doing this people know him more and he can meet new poeple.&lt;/p>
&lt;p>I met &lt;a href="https://twitter.com/isidentical">Batuhan Taskaya&lt;/a> just by posting my
journey on building a python parser on twitter.
He helped me with implementing tricky parts of parser and
contributing to Python.&lt;/p>
&lt;p>The takeaway is to share updates when you are building in public.
Not only when you finish building something but also along the way.&lt;/p>
&lt;p>So this is all about starting small and being consistent,
and having fun along the way.&lt;/p></description></item><item><title>Building a Web Crawler in Golang</title><link>https://glyphack.com/build-a-crawler-in-golang/</link><pubDate>Mon, 20 Mar 2023 18:17:24 +0100</pubDate><guid>https://glyphack.com/build-a-crawler-in-golang/</guid><description>&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#but-why-building-another-crawler">But Why Building Another Crawler?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#high-level-design">High Level Design&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#url-frontier">URL Frontier&lt;/a>&lt;/li>
&lt;li>&lt;a href="#selector">Selector&lt;/a>&lt;/li>
&lt;li>&lt;a href="#workers">Workers&lt;/a>&lt;/li>
&lt;li>&lt;a href="#fetcher">Fetcher&lt;/a>&lt;/li>
&lt;li>&lt;a href="#content-processor">Content Processor&lt;/a>&lt;/li>
&lt;li>&lt;a href="#link-extractor">Link Extractor&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#implementation">Implementation&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#lets-talk-about-channels">Let&amp;rsquo;s talk about channels&lt;/a>&lt;/li>
&lt;li>&lt;a href="#storage">Storage&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parser">Parser&lt;/a>&lt;/li>
&lt;li>&lt;a href="#processor">Processor&lt;/a>&lt;/li>
&lt;li>&lt;a href="#distribute-and-collect-result-from-workers">Distribute and Collect Result from Workers&lt;/a>&lt;/li>
&lt;li>&lt;a href="#worker">Worker&lt;/a>&lt;/li>
&lt;li>&lt;a href="#extracting-links">Extracting Links&lt;/a>&lt;/li>
&lt;li>&lt;a href="#saving-content">Saving Content&lt;/a>&lt;/li>
&lt;li>&lt;a href="#running-processors">Running Processors&lt;/a>&lt;/li>
&lt;li>&lt;a href="#failed-urls">Failed URLs&lt;/a>&lt;/li>
&lt;li>&lt;a href="#html-parser">HTML parser&lt;/a>&lt;/li>
&lt;li>&lt;a href="#putting-it-all-together">Putting it All Together&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="introduction">
Introduction
&lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>Web crawler is a program that explores the Internet,
by going to different websites and following any link it finds.&lt;/p>
&lt;p>Crawlers are interesting because they provide a way to gather data
from the internet.
This is especially useful for data mining purposes.&lt;/p>
&lt;p>You can find the full implementation in the &lt;a href="https://github.com/Glyphack/crawler">GitHub repository&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://cacm.acm.org/blogs/blog-cacm/153780-data-mining-the-web-via-crawling/fulltext">This post&lt;/a>
provides a good introduction to building a crawler.&lt;/p>
&lt;h2 class="heading" id="but-why-building-another-crawler">
But Why Building Another Crawler?
&lt;a class="anchor" href="#but-why-building-another-crawler">#&lt;/a>
&lt;/h2>
&lt;p>I wrote down my reasons in the &lt;a href="https://glyphack.com/rate-limiter-from-scratch-in-python-2">previous post&lt;/a>
on why I&amp;rsquo;m building this stuff from sctrach.
The short answer is that it seems simple until you try it.&lt;/p>
&lt;p>After reading through this project and implementing yourself,
you will have a good understanding of how to write concurrent
applications in Go.&lt;/p>
&lt;h2 class="heading" id="high-level-design">
High Level Design
&lt;a class="anchor" href="#high-level-design">#&lt;/a>
&lt;/h2>
&lt;p>Let&amp;rsquo;s look into what components a cralwer is made of, this helps
to structure our code.&lt;/p>
&lt;p>The following diagram shows the execution flow of our program and
responsibilities of components:&lt;/p>
&lt;p>
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="crawler-diagram" src="https://glyphack.com/crawler-diagram.excalidraw.svg" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;p>Let&amp;rsquo;s break it down:&lt;/p>
&lt;h3 class="heading" id="url-frontier">
URL Frontier
&lt;a class="anchor" href="#url-frontier">#&lt;/a>
&lt;/h3>
&lt;p>URL Frontier is a collection of URLs that are going to be crawled.
It supports adding &amp;amp; consuming new URLs as we discover links in fetched pages.&lt;/p>
&lt;h3 class="heading" id="selector">
Selector
&lt;a class="anchor" href="#selector">#&lt;/a>
&lt;/h3>
&lt;p>To consume the URLs from frontier we can get them one by one.
But this can cause problem if we want to distribute the URLs between multiple workers.&lt;/p>
&lt;p>The technique used here is called fan-out.&lt;/p>
&lt;p>For example if some URLs are more important to crawl first, and each worker gets
the next URL to crawl then those special URLs can&amp;rsquo;t be crawled first.
Another usefulness of this component is distributing URLs from one host to one worker.
So each worker can make sure to not send too many requests to a single Host.
The best practice is to wait 2 seconds between requests for the same Host.&lt;/p>
&lt;h3 class="heading" id="workers">
Workers
&lt;a class="anchor" href="#workers">#&lt;/a>
&lt;/h3>
&lt;p>Each worker consumes from queues that selector fills and fetches the URL.&lt;/p>
&lt;p>The worker must handle failures and retry when it fails to fetch a URL.
Each worker also keeps track of URLs fetched to be polite.&lt;/p>
&lt;h3 class="heading" id="fetcher">
Fetcher
&lt;a class="anchor" href="#fetcher">#&lt;/a>
&lt;/h3>
&lt;p>This components is the reverse of selector component, it gathers
results from different workers to a single collection.&lt;/p>
&lt;p>This operation is called fan-in which is useful here because we
can simplify the processor operations because it only needs to
consume from a single result channel.&lt;/p>
&lt;h3 class="heading" id="content-processor">
Content Processor
&lt;a class="anchor" href="#content-processor">#&lt;/a>
&lt;/h3>
&lt;p>After we get the result from each worker we ran different
content processors on the result, this can be tasks like extracting
new URLs or saving pages to the disk.&lt;/p>
&lt;p>Also note that this component does not apply a single
logic on all results. We can register different processors,
like a plugin system to expand this component.&lt;/p>
&lt;p>Later we discuss how we can use strategy design pattern to
implement this in code.&lt;/p>
&lt;h3 class="heading" id="link-extractor">
Link Extractor
&lt;a class="anchor" href="#link-extractor">#&lt;/a>
&lt;/h3>
&lt;p>The link extractor is a special processor we create
that uses a parser to parse the page content and insert URLs
back to frontier.&lt;/p>
&lt;h2 class="heading" id="implementation">
Implementation
&lt;a class="anchor" href="#implementation">#&lt;/a>
&lt;/h2>
&lt;h3 class="heading" id="lets-talk-about-channels">
Let&amp;rsquo;s talk about channels
&lt;a class="anchor" href="#lets-talk-about-channels">#&lt;/a>
&lt;/h3>
&lt;p>channels are going to be used heavily in the implementation.
I suggest you to make sure you understand &lt;a href="https://go.dev/tour/concurrency/1">fundamentals&lt;/a>
of channels.
before reading the rest of this post.&lt;/p>
&lt;p>We can start with frontier since it&amp;rsquo;s not dependent on any other component.&lt;/p>
&lt;p>I&amp;rsquo;ll create a new package frontier:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Frontier&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">urls&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">history&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>]&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exclude&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewFrontier&lt;/span>(&lt;span style="color:#a6e22e">initialUrls&lt;/span> []&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>, &lt;span style="color:#a6e22e">exclude&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Frontier&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">history&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>]&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Frontier&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">urls&lt;/span>: make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>, len(&lt;span style="color:#a6e22e">initialUrls&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">history&lt;/span>: &lt;span style="color:#a6e22e">history&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exclude&lt;/span>: &lt;span style="color:#a6e22e">exclude&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">initialUrls&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The frontier uses a channel of urls to keep the added URLs.
Since the channel is consumed then we keep a &lt;code>history&lt;/code> of visited URLs.
History can be later used to check whether we seen a URL or not.&lt;/p>
&lt;p>The &lt;code>terminating&lt;/code> attribute is used so we can have a graceful termination.
Since another goroutine is going to read from this channel, we might
want to wait until all the URLs are consumed and meanwhile don&amp;rsquo;t add any new URLs.&lt;/p>
&lt;p>Next we need a method to add a new url.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Frontier&lt;/span>) &lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">terminating&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Seen&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">WithFields&lt;/span>(&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fields&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">url&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Already seen&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">pattern&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">exclude&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">pattern&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Host&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">WithFields&lt;/span>(&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fields&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">url&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Excluded&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">history&lt;/span>[&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>] = &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">urls&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Frontier&lt;/span>) &lt;span style="color:#a6e22e">Seen&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">lastFetch&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">history&lt;/span>[&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>]; &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">lastFetch&lt;/span>) &amp;lt; &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Hour&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Frontier&lt;/span>) &lt;span style="color:#a6e22e">Get&lt;/span>() &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">urls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This method simply checks if the url is seen or not and if it&amp;rsquo;s not
excluded adds it to the channel.&lt;/p>
&lt;p>This function is blocking unless another gorutine is consuming from the urls channel.
Why is this important?
because if we run the Add in a blocking way without consuming the urls
we will block the goroutine &amp;amp; it&amp;rsquo;s a deadlock.&lt;/p>
&lt;p>The &lt;code>Get&lt;/code> function does not provide any abstraction here, but I like the idea that
consumers don&amp;rsquo;t have to know which channel they need to consume from.&lt;/p>
&lt;p>In case you are wondering what log package I&amp;rsquo;m using, it&amp;rsquo;s &lt;a href="https://github.com/sirupsen/logrus">logrus&lt;/a>.&lt;/p>
&lt;p>The next step is to create the component and orchestrates the crawl process.&lt;/p>
&lt;p>Let&amp;rsquo;s first define the configuration that user can pass to the crawler.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Config&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MaxRedirects&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">RevisitDelay&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">WorkerCount&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ExcludePatterns&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">crawler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net/url&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/sirupsen/logrus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/glyphack/crawler/internal/frontier&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/glyphack/crawler/internal/parser&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/glyphack/crawler/internal/storage&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Crawler&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">frontier&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">frontier&lt;/span>.&lt;span style="color:#a6e22e">Frontier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">storage&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">Storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contentParsers&lt;/span> []&lt;span style="color:#a6e22e">parser&lt;/span>.&lt;span style="color:#a6e22e">Parser&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">deadLetter&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">processors&lt;/span> []&lt;span style="color:#a6e22e">Processor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewCrawler&lt;/span>(&lt;span style="color:#a6e22e">initialUrls&lt;/span> []&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>, &lt;span style="color:#a6e22e">contentStorage&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">Storage&lt;/span>, &lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Config&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Crawler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">deadLetter&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contentParser&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#a6e22e">parser&lt;/span>.&lt;span style="color:#a6e22e">Parser&lt;/span>{&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">parser&lt;/span>.&lt;span style="color:#a6e22e">HtmlParser&lt;/span>{}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Crawler&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">frontier&lt;/span>: &lt;span style="color:#a6e22e">frontier&lt;/span>.&lt;span style="color:#a6e22e">NewFrontier&lt;/span>(&lt;span style="color:#a6e22e">initialUrls&lt;/span>, &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">ExcludePatterns&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">storage&lt;/span>: &lt;span style="color:#a6e22e">contentStorage&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contentParsers&lt;/span>: &lt;span style="color:#a6e22e">contentParser&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">deadLetter&lt;/span>: &lt;span style="color:#a6e22e">deadLetter&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span>: &lt;span style="color:#a6e22e">config&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Crawler&lt;/span>) &lt;span style="color:#a6e22e">AddContentParser&lt;/span>(&lt;span style="color:#a6e22e">contentParser&lt;/span> &lt;span style="color:#a6e22e">parser&lt;/span>.&lt;span style="color:#a6e22e">Parser&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">contentParsers&lt;/span> = append(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">contentParsers&lt;/span>, &lt;span style="color:#a6e22e">contentParser&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Crawler&lt;/span>) &lt;span style="color:#a6e22e">AddExcludePattern&lt;/span>(&lt;span style="color:#a6e22e">pattern&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">ExcludePatterns&lt;/span> = append(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">ExcludePatterns&lt;/span>, &lt;span style="color:#a6e22e">pattern&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Crawler&lt;/span>) &lt;span style="color:#a6e22e">AddProcessor&lt;/span>(&lt;span style="color:#a6e22e">processor&lt;/span> &lt;span style="color:#a6e22e">Processor&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">processors&lt;/span> = append(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">processors&lt;/span>, &lt;span style="color:#a6e22e">processor&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Config comes from the user and by making it a separate struct we can easily modify
it without changing the parameters we pass to create the crawler.
We keep a deadLetter channel for the failed URLs to have a retry mechanism.&lt;/p>
&lt;p>The crawler takes in other components let&amp;rsquo;s break them down:&lt;/p>
&lt;h3 class="heading" id="storage">
Storage
&lt;a class="anchor" href="#storage">#&lt;/a>
&lt;/h3>
&lt;p>Storage is an interface that exposes method to save data.
This helps with extending the processor without changing it&amp;rsquo;s code.&lt;/p>
&lt;p>Whatever storage implementation we use we need to implement
the following methods:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Storage&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Delete&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 class="heading" id="parser">
Parser
&lt;a class="anchor" href="#parser">#&lt;/a>
&lt;/h3>
&lt;p>Instead of parsing the content in the crawler we can provide an implementation
for the filetypes we want to parse.
We can have a single parser that handles all the file types but
this way is much easier to extend.&lt;/p>
&lt;p>But why do we need the parser?
After we fetch the page we need to parse it to get
the links from it and add it to our frontier.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">parser&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Token&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Parser&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">IsSupportedExtension&lt;/span>(&lt;span style="color:#a6e22e">extension&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#a6e22e">content&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) ([]&lt;span style="color:#a6e22e">Token&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Parser can check the file extension to see if it&amp;rsquo;s supported,
And parse the file into tokens.&lt;/p>
&lt;p>The token is parsed information from the content.
This is a nice way to extend the material we parse from the page later.
Currently we only care about &lt;code>a&lt;/code> tags which are links.&lt;/p>
&lt;h3 class="heading" id="processor">
Processor
&lt;a class="anchor" href="#processor">#&lt;/a>
&lt;/h3>
&lt;p>Following the same idea with parsers, we can provide the crawler
processes to apply on the web pages.&lt;/p>
&lt;p>Some typical processes are:&lt;/p>
&lt;ul>
&lt;li>Saving the page&lt;/li>
&lt;li>Extracting links from the page&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s define the interface based on the required actions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Processor&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">CrawlResult&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The process function takes in the crawl result which we&amp;rsquo;ll define later.
The function is only going to return an error.
Since a lot of operations can be done in this function we are not returning any value.&lt;/p>
&lt;h3 class="heading" id="distribute-and-collect-result-from-workers">
Distribute and Collect Result from Workers
&lt;a class="anchor" href="#distribute-and-collect-result-from-workers">#&lt;/a>
&lt;/h3>
&lt;p>In the earlier section we discussed how can we parallelize the crawling
task by distrubting the urls into multiple queues and assign workers to each
queue.&lt;/p>
&lt;p>Let&amp;rsquo;s implement this functionality, We can create a new function called &lt;code>Start&lt;/code>
for the crawler struct:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Crawler&lt;/span>) &lt;span style="color:#a6e22e">Start&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">distributedInputs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">WorkerCount&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">workersResults&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">WorkerCount&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">WorkerCount&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">distributedInputs&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">workersResults&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">distributeUrls&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">frontier&lt;/span>, &lt;span style="color:#a6e22e">distributedInputs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">WorkerCount&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">worker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">NewWorker&lt;/span>(&lt;span style="color:#a6e22e">distributedInputs&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>], &lt;span style="color:#a6e22e">workersResults&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>], &lt;span style="color:#a6e22e">done&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">deadLetter&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">worker&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mergedResults&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">mergeResults&lt;/span>(&lt;span style="color:#a6e22e">workersResults&lt;/span>, &lt;span style="color:#a6e22e">mergedResults&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we start by creating an input channel and an output channel for each worker.&lt;/p>
&lt;p>There is a done channel here as well. It&amp;rsquo;s a practice in go to use an empty
channel to notify the goroutines that the process is done or cancelled.&lt;/p>
&lt;p>Then a function will start ditributing URLs from frontier to worker channels.&lt;/p>
&lt;p>Finally we have a another function that merges results from worker outputs.&lt;/p>
&lt;p>Note that these two functions and worker start are executed in a separate goroutine.
So they will continuously consume from frontier, add to worker input channel,
and put merge the result into a single output channel.&lt;/p>
&lt;p>How can we implement the distribute and merge mechanisms?
&lt;a href="https://go.dev/blog/pipelines">This post&lt;/a> fully explains the fan-in and fan-out.&lt;/p>
&lt;p>Let&amp;rsquo;s create a separate file and implement these two functions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">distributeUrls&lt;/span>(&lt;span style="color:#a6e22e">frontier&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">frontier&lt;/span>.&lt;span style="color:#a6e22e">Frontier&lt;/span>, &lt;span style="color:#a6e22e">distributedInputs&lt;/span> []&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HostToWorker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">frontier&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">index&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Intn&lt;/span>(len(&lt;span style="color:#a6e22e">distributedInputs&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">prevIndex&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">HostToWorker&lt;/span>[&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Host&lt;/span>]; &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">index&lt;/span> = &lt;span style="color:#a6e22e">prevIndex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HostToWorker&lt;/span>[&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Host&lt;/span>] = &lt;span style="color:#a6e22e">index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">distributedInputs&lt;/span>[&lt;span style="color:#a6e22e">index&lt;/span>] &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we have a for loop over a channel.
This means that our function never exits until the frontier closes the channel.
For each url coming into the channel we take it and assign it to a worker input channel.&lt;/p>
&lt;p>The assignment algorithm is very simple, we have a list of already assigned hosts.
If a host is new we assign it randomly, otherwise we send it to the assigned host.&lt;/p>
&lt;p>Now let&amp;rsquo;s implement the merger:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">mergeResults&lt;/span>(&lt;span style="color:#a6e22e">workersResults&lt;/span> []&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>, &lt;span style="color:#a6e22e">out&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">collect&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">in&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">out&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Worker finished&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">workersResults&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Start collecting results from worker %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">collect&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This function might be a bit more complex.
First we created a function named collect that consumes from a single channel.
Then we loop over the workers and call this function on all the output channels.&lt;/p>
&lt;p>So this starts a goroutine per worker that listens to output channel.
The result is put into the merged output channel.&lt;/p>
&lt;p>Pretty simple yet powerful technique to parallelize a task.&lt;/p>
&lt;h3 class="heading" id="worker">
Worker
&lt;a class="anchor" href="#worker">#&lt;/a>
&lt;/h3>
&lt;p>To implement the worker we first need to define the struct and crawl result.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Url&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ContentType&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Body&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Worker&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">deadLetter&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Entry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Only contains the host part of the URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">history&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The crawl result represents a successsful page load with content and the type.&lt;/p>
&lt;p>Let&amp;rsquo;s breakdown what worker has:&lt;/p>
&lt;ul>
&lt;li>input: the channel that worker consumes from&lt;/li>
&lt;li>deadLetter: another channel that worker puts in the failed URLs into&lt;/li>
&lt;li>result: channel for sending successful crawls&lt;/li>
&lt;li>done: the channel that notifies the worker if it has to stop&lt;/li>
&lt;li>id: an id assigned to the worker this is useful for marking logs from each worker&lt;/li>
&lt;li>logger: a logger with worker context so log messages are distinguishable from others.
&lt;code>logger := log.WithField(&amp;quot;worker&amp;quot;, id)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The Start method of the worker is a for-select statement to consume
any message that comes into the input channel, fetch and pass the result.&lt;/p>
&lt;p>Before fetching the URL we check for politeness and sleep if needed.
There is a downside to this if we have consecutive URLs from one host.
Since we have to sleep and it slows down.&lt;/p>
&lt;p>There are two improvements here I can think of:&lt;/p>
&lt;ol>
&lt;li>Discarding that URL to deadletter and continue until we get another host&lt;/li>
&lt;li>Distribute the URLs in worker input channel to reduce the chance of blocking&lt;/li>
&lt;/ol>
&lt;p>But here we just go with the simple approach&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Worker&lt;/span>) &lt;span style="color:#a6e22e">Start&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Worker %d started&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> !&lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">CheckPoliteness&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">content&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Worker %d error fetching content: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">deadLetter&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">history&lt;/span>[&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Host&lt;/span>] = &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>. &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">done&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The fetch function does a simple fetch and also determines the content type.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Worker&lt;/span>) &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>) (&lt;span style="color:#a6e22e">CrawlResult&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Worker %d fetching %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>, &lt;span style="color:#a6e22e">url&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Worker %d done fetching %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>, &lt;span style="color:#a6e22e">url&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>{}, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>{}, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;status code error: %d %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">body&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">ReadAll&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>{}, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">inferredContentType&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contentType&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> len(&lt;span style="color:#a6e22e">contentType&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inferredContentType&lt;/span> = &lt;span style="color:#a6e22e">contentType&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inferredContentType&lt;/span> = &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">DetectContentType&lt;/span>(&lt;span style="color:#a6e22e">body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Url&lt;/span>: &lt;span style="color:#a6e22e">url&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ContentType&lt;/span>: &lt;span style="color:#a6e22e">inferredContentType&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Body&lt;/span>: &lt;span style="color:#a6e22e">body&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Worker&lt;/span>) &lt;span style="color:#a6e22e">CheckPoliteness&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">lastFetch&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">history&lt;/span>[&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Host&lt;/span>]; &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">lastFetch&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 class="heading" id="extracting-links">
Extracting Links
&lt;a class="anchor" href="#extracting-links">#&lt;/a>
&lt;/h3>
&lt;p>To extract a link we implement the Processor interface we defined above.&lt;/p>
&lt;p>This processor takes in parsers and crawl result then outputs links.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">LinkExtractor&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Parsers&lt;/span> []&lt;span style="color:#a6e22e">parser&lt;/span>.&lt;span style="color:#a6e22e">Parser&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NewUrls&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LinkExtractor&lt;/span>) &lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">foundUrls&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">parser&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Parsers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">parser&lt;/span>.&lt;span style="color:#a6e22e">IsSupportedExtension&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">ContentType&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">parsedUrls&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">parser&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>(string(&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Error parsing content: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Extracted %d urls&amp;#34;&lt;/span>, len(&lt;span style="color:#a6e22e">parsedUrls&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">parsedUrl&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">parsedUrls&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">newUrl&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#a6e22e">parsedUrl&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Error parsing url: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">params&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">newUrl&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">param&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">params&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">newUrl&lt;/span> = &lt;span style="color:#a6e22e">stripQueryParam&lt;/span>(&lt;span style="color:#a6e22e">newUrl&lt;/span>, &lt;span style="color:#a6e22e">param&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">newUrl&lt;/span>.&lt;span style="color:#a6e22e">Scheme&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">newUrl&lt;/span>.&lt;span style="color:#a6e22e">Scheme&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;https&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">foundUrls&lt;/span> = append(&lt;span style="color:#a6e22e">foundUrls&lt;/span>, &lt;span style="color:#a6e22e">newUrl&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">foundUrl&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">foundUrls&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">NewUrls&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">foundUrl&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">stripQueryParam&lt;/span>(&lt;span style="color:#a6e22e">inputURL&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>, &lt;span style="color:#a6e22e">stripKey&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">inputURL&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">query&lt;/span>.&lt;span style="color:#a6e22e">Del&lt;/span>(&lt;span style="color:#a6e22e">stripKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inputURL&lt;/span>.&lt;span style="color:#a6e22e">RawQuery&lt;/span> = &lt;span style="color:#a6e22e">query&lt;/span>.&lt;span style="color:#a6e22e">Encode&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">inputURL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The this struct keeps a list of parsers and has a channel to output links.&lt;/p>
&lt;p>The process function takes in a crawl result and matches the type with it&amp;rsquo;s parsers.
It&amp;rsquo;s also important to make sure we strip the query params,
strings like &lt;code>?sort=foo&lt;/code>.
There might be case that we care about them, but here to simply remove duplicates
we do this.&lt;/p>
&lt;p>A better approach here is to use the &lt;code>rel=canonical&lt;/code> HTML attribute to identify if
URL is identical to current page.&lt;/p>
&lt;p>The result from this extractor are put in a new channel.&lt;/p>
&lt;p>So in the crawler we can add this processor and get the URLs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">AddProcessor&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">LinkExtractor&lt;/span>{&lt;span style="color:#a6e22e">Parsers&lt;/span>: &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">contentParsers&lt;/span>, &lt;span style="color:#a6e22e">NewUrls&lt;/span>: &lt;span style="color:#a6e22e">newUrls&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">newUrl&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">newUrls&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">frontier&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">newUrl&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 class="heading" id="saving-content">
Saving Content
&lt;a class="anchor" href="#saving-content">#&lt;/a>
&lt;/h3>
&lt;p>To save the content we use another processor.
This processor uses the storage backend provided to the crawler to store pages.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">SaveToFile&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">storageBackend&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">Storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SaveToFile&lt;/span>) &lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">savePath&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getSavePath&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Url&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">ContentType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">savePath&lt;/span> = &lt;span style="color:#a6e22e">savePath&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.html&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">storageBackend&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">savePath&lt;/span>, string(&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getSavePath&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fileName&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Path&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;-page&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">savePath&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Host&lt;/span>, &lt;span style="color:#a6e22e">fileName&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">savePath&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And again we add it easily to the crawler:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">AddProcessor&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">SaveToFile&lt;/span>{&lt;span style="color:#a6e22e">storageBackend&lt;/span>: &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">storage&lt;/span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 class="heading" id="running-processors">
Running Processors
&lt;a class="anchor" href="#running-processors">#&lt;/a>
&lt;/h3>
&lt;p>The final step in our start method is to run processors on results.&lt;/p>
&lt;p>Since the list of processors can be extended and we must not block the
goroutine, we execute each of them in a separate goroutine.&lt;/p>
&lt;p>This is important because if we can&amp;rsquo;t consume from the merged results fast enough
then each worker might wait until the processors are ran so they can send to channel.
Remember the send to channel blocks until the consumer is ready.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">mergedResults&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">processor&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">processors&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">processor&lt;/span> &lt;span style="color:#a6e22e">Processor&lt;/span>, &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#a6e22e">CrawlResult&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">processErr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">processor&lt;/span>.&lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">processErr&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">processErr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }(&lt;span style="color:#a6e22e">processor&lt;/span>, &lt;span style="color:#a6e22e">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 class="heading" id="failed-urls">
Failed URLs
&lt;a class="anchor" href="#failed-urls">#&lt;/a>
&lt;/h3>
&lt;p>This part is open ended and you can try it as an exercise.
We only consume the failed ones and log them to the console.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">deadUrl&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">deadLetter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Dismissed %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">deadUrl&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 class="heading" id="html-parser">
HTML parser
&lt;a class="anchor" href="#html-parser">#&lt;/a>
&lt;/h3>
&lt;p>We need to implement at least 1 parser so our crawler can
parse HTML pages.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">parser&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;errors&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;golang.org/x/net/html&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">HtmlParser&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HtmlParser&lt;/span>) &lt;span style="color:#a6e22e">getSupportedExtensions&lt;/span>() []&lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;.html&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;.htm&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HtmlParser&lt;/span>) &lt;span style="color:#a6e22e">IsSupportedExtension&lt;/span>(&lt;span style="color:#a6e22e">extension&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">supportedExtension&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">getSupportedExtensions&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">extension&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">supportedExtension&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HtmlParser&lt;/span>) &lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#a6e22e">content&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) ([]&lt;span style="color:#a6e22e">Token&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">htmlParser&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">html&lt;/span>.&lt;span style="color:#a6e22e">NewTokenizer&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">content&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tokens&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#a6e22e">Token&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tokenType&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">htmlParser&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">tokenType&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">html&lt;/span>.&lt;span style="color:#a6e22e">ErrorToken&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">token&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">htmlParser&lt;/span>.&lt;span style="color:#a6e22e">Token&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">tokenType&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">html&lt;/span>.&lt;span style="color:#a6e22e">StartTagToken&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">token&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">attr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">token&lt;/span>.&lt;span style="color:#a6e22e">Attr&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">attr&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;href&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tokens&lt;/span> = append(&lt;span style="color:#a6e22e">tokens&lt;/span>, &lt;span style="color:#a6e22e">Token&lt;/span>{&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;link&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Value&lt;/span>: &lt;span style="color:#a6e22e">attr&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">htmlParser&lt;/span>.&lt;span style="color:#a6e22e">Err&lt;/span>() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Is&lt;/span>(&lt;span style="color:#a6e22e">htmlParser&lt;/span>.&lt;span style="color:#a6e22e">Err&lt;/span>(), &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">EOF&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">tokens&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error scanning html: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">htmlParser&lt;/span>.&lt;span style="color:#a6e22e">Err&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">tokens&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The parsing process is straight forward, we use a parser package and
walk over the elements and extract the ones with &lt;code>a&lt;/code> tag and &lt;code>href&lt;/code> attribute.&lt;/p>
&lt;h3 class="heading" id="putting-it-all-together">
Putting it All Together
&lt;a class="anchor" href="#putting-it-all-together">#&lt;/a>
&lt;/h3>
&lt;p>We finally have everything needed to crawl some pages.&lt;/p>
&lt;p>The parser we created is not a program, it&amp;rsquo;s a library.
This can be imported and be started within another program.&lt;/p>
&lt;p>You can create a CLI using this or use a main function.
We&amp;rsquo;ll create a main function to test it out:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">SetFormatter&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">TextFormatter&lt;/span>{&lt;span style="color:#a6e22e">FullTimestamp&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initialUrls&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">myUrl&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://glyphack.com&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initialUrls&lt;/span> = append(&lt;span style="color:#a6e22e">initialUrls&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">myUrl&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contentStorage&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">NewFileStorage&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;./data&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contentParsers&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#a6e22e">parser&lt;/span>.&lt;span style="color:#a6e22e">Parser&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contentParsers&lt;/span> = append(&lt;span style="color:#a6e22e">contentParsers&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">JsonParser&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">crawler&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">crawler&lt;/span>.&lt;span style="color:#a6e22e">NewCrawler&lt;/span>(&lt;span style="color:#a6e22e">initialUrls&lt;/span>, &lt;span style="color:#a6e22e">contentStorage&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">crawler&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MaxRedirects&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">RevisitDelay&lt;/span>: &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Hour&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">WorkerCount&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ExcludePatterns&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">crawler&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 class="heading" id="conclusion">
Conclusion
&lt;a class="anchor" href="#conclusion">#&lt;/a>
&lt;/h2>
&lt;p>Going through building this crawler and facing many deadlocks taught me a lot
about goalng.
And writing about this was a good practice to question my design and
the way I wrote the code.&lt;/p>
&lt;p>I could not explain the problems I faced in this post because I wrote it
long after I finished the code itself. But you know enough to not make
those mistakes as I did.&lt;/p></description></item><item><title>Rate Limiter From Scratch in Python Part 2</title><link>https://glyphack.com/rate-limiter-python-2/</link><pubDate>Tue, 21 Feb 2023 21:34:49 +0100</pubDate><guid>https://glyphack.com/rate-limiter-python-2/</guid><description>&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#new-rate-limiting-algorithms">New Rate Limiting Algorithms&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#fixed-window">Fixed Window&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#test">Test&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#sliding-window-log">Sliding Window Log&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#testing">Testing&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#sliding-window-count">Sliding Window Count&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#tests">Tests&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="introduction">
Introduction
&lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>In the last &lt;a href="https://glyphack.com/blog/rate-limiter-python-1">post&lt;/a>
I started writing a rate limiter.
The project right now supports only 1 rate limiting algorithm(Token Bucket).&lt;/p>
&lt;p>In this part we&amp;rsquo;re going to implement the following algorithms:&lt;/p>
&lt;ul>
&lt;li>Fixed window&lt;/li>
&lt;li>Sliding window log&lt;/li>
&lt;li>Sliding window count&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;ll see how each algorithm compares to another, and the trade offs.
Also after implementing each one we&amp;rsquo;ll see how to abstractions we created
previously helped minimizing the implementation for new algorithms.&lt;/p>
&lt;p>At the end of this post we&amp;rsquo;ll add Redis as storage backend to our application.&lt;/p>
&lt;h2 class="heading" id="new-rate-limiting-algorithms">
New Rate Limiting Algorithms
&lt;a class="anchor" href="#new-rate-limiting-algorithms">#&lt;/a>
&lt;/h2>
&lt;p>Before implementing the algorithm we can start by adding them to our rate limiter
service.&lt;/p>
&lt;p>First we need to update the LimiterStrategy enum:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LimitStrategies&lt;/span>(str, Enum):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TOKEN_BUCKET &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;token_bucket&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FIXED_WINDOW &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fixed_window&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SLIDING_WINDOW_LOG &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sliding_window_log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SLIDING_WINDOW_COUNTER &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sliding_window_counter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The code that initialized the limiter strategy objects is in rate limiter service.
You can use a empty class(with no implementation) and implement it as we go
through them one by one.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> descriptor &lt;span style="color:#f92672">in&lt;/span> rule&lt;span style="color:#f92672">.&lt;/span>descriptors:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> config&lt;span style="color:#f92672">.&lt;/span>limit_strategy &lt;span style="color:#f92672">==&lt;/span> LimitStrategies&lt;span style="color:#f92672">.&lt;/span>TOKEN_BUCKET:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> limits&lt;span style="color:#f92672">.&lt;/span>append(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TokenBucket(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend&lt;span style="color:#f92672">=&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>storage_engine,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor&lt;span style="color:#f92672">=&lt;/span>descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> config&lt;span style="color:#f92672">.&lt;/span>limit_strategy &lt;span style="color:#f92672">==&lt;/span> LimitStrategies&lt;span style="color:#f92672">.&lt;/span>FIXED_WINDOW:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> limits&lt;span style="color:#f92672">.&lt;/span>append(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TokenBucket(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend&lt;span style="color:#f92672">=&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>storage_engine,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor&lt;span style="color:#f92672">=&lt;/span>descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> config&lt;span style="color:#f92672">.&lt;/span>limit_strategy &lt;span style="color:#f92672">==&lt;/span> LimitStrategies&lt;span style="color:#f92672">.&lt;/span>SLIDING_WINDOW_LOG: limits&lt;span style="color:#f92672">.&lt;/span>append(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TokenBucket(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend&lt;span style="color:#f92672">=&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>storage_engine,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor&lt;span style="color:#f92672">=&lt;/span>descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> config&lt;span style="color:#f92672">.&lt;/span>limit_strategy &lt;span style="color:#f92672">==&lt;/span> LimitStrategies&lt;span style="color:#f92672">.&lt;/span>SLIDING_WINDOW_COUNTER:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> limits&lt;span style="color:#f92672">.&lt;/span>append(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TokenBucket(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend&lt;span style="color:#f92672">=&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>storage_engine,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor&lt;span style="color:#f92672">=&lt;/span>descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Limit strategy &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>config&lt;span style="color:#f92672">.&lt;/span>limit_strategy&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> not supported&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 class="heading" id="fixed-window">
Fixed Window
&lt;a class="anchor" href="#fixed-window">#&lt;/a>
&lt;/h3>
&lt;p>In the fixed window algorithm, we split the time into unit-size buckets.
Each bucket has a specified capacity and can limit the requests once it&amp;rsquo;s reached.&lt;/p>
&lt;p>For example, if our unit is 1 minute, our buckets would be 10:00, 10:01, and 10:02.&lt;/p>
&lt;p>Now how can we choose the hash key?
A hash key like &lt;code>path_1000_&amp;lt;key&amp;gt;_&amp;lt;value&amp;gt;&lt;/code> is good because
it puts all requests from a specific entity to a path into the correct bucket.
So we can query this key and check the count to determine the request.&lt;/p>
&lt;p>But choosing the hour &amp;amp; minute combination to add time to the key is not going to work,
because there might be collisions when the day passes and we reach that time again.&lt;/p>
&lt;p>To overcome this problem, we can use &lt;a href="https://www.unixtimestamp.com/">timestmap&lt;/a>,
since each time second has a unique timestamp, we resolve the collision.&lt;/p>
&lt;p>Since the timestamp represents the seconds,
we can&amp;rsquo;t create a bucket for minute intervals if we use this value directly in the cache.
When the limiting unit is a minute, we need to find the value which
is the same for every moment in a given minute.&lt;/p>
&lt;p>We can do this by dividing the timestamp by our unit:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>current_interval &lt;span style="color:#f92672">=&lt;/span> str(int(datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>timestamp() &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>this value will be the same for all moments in the interval.&lt;/p>
&lt;p>We can see that based on how this interval is calculated,
our limiter limits the requests for the window 10:00:00 and 10:01:00.
But it does not check the window 10:00:30 and 10:01:30.
This is the problem that sliding window algorithm solves,
by not making the window fixed.&lt;/p>
&lt;p>Now that we figured out the hard part let&amp;rsquo;s look at the code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FixedWindow&lt;/span>(AbstractStrategy):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend: AbstractStorage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor: Descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> super(FixedWindow, self)&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">__init__&lt;/span>(storage_backend, rule_descriptor)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>rule_descriptor&lt;span style="color:#f92672">.&lt;/span>unit&lt;span style="color:#f92672">.&lt;/span>to_seconds()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>interval_max &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>rule_descriptor&lt;span style="color:#f92672">.&lt;/span>requests_per_unit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">do_limit&lt;/span>(self, request: Request):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>request &lt;span style="color:#f92672">=&lt;/span> request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter_key &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_get_counter_key()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> counter_key &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_window_max_reached(counter_key):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_get_counter_key&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_interval &lt;span style="color:#f92672">=&lt;/span> str(int(datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>timestamp() &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> descriptor &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>rule_descriptor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>request&lt;span style="color:#f92672">.&lt;/span>path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key &lt;span style="color:#f92672">=&lt;/span> descriptor&lt;span style="color:#f92672">.&lt;/span>key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>request&lt;span style="color:#f92672">.&lt;/span>data[key]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> descriptor&lt;span style="color:#f92672">.&lt;/span>value &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span> &lt;span style="color:#f92672">and&lt;/span> value &lt;span style="color:#f92672">!=&lt;/span> descriptor&lt;span style="color:#f92672">.&lt;/span>value:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> path &lt;span style="color:#f92672">+&lt;/span> current_interval &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> key &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_window_max_reached&lt;/span>(self, counter_key):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>storage_backend&lt;span style="color:#f92672">.&lt;/span>get(counter_key)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> counter &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>storage_backend&lt;span style="color:#f92672">.&lt;/span>set(counter_key, &lt;span style="color:#ae81ff">1&lt;/span>, self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> counter &lt;span style="color:#f92672">&amp;gt;=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>interval_max:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>storage_backend&lt;span style="color:#f92672">.&lt;/span>incr(counter_key)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that here we are using the &lt;code>incr&lt;/code> method from the storage.
We haven&amp;rsquo;t implemented this functionality yet, but this is a good interface to add.&lt;/p>
&lt;p>Since other storages such as redis has support for increment it&amp;rsquo;s better to use it,
rather than get, increment and set the value approach.&lt;/p>
&lt;p>So we add new method to &lt;code>AbstractStorage&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">incr&lt;/span>(self, key):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">NotImplementedError&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And implement it in the memory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">incr&lt;/span>(self, key: str):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> key &lt;span style="color:#f92672">in&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>data[key] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>data[key] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 class="heading" id="test">
Test
&lt;a class="anchor" href="#test">#&lt;/a>
&lt;/h4>
&lt;p>Testing this new strategy is so easy,
since all of our strategies have the same interface(input/output) we can
use pytest to &lt;a href="https://docs.pytest.org/en/6.2.x/parametrize.html">parameterize&lt;/a>
the strategy that is being tested.&lt;/p>
&lt;p>Let&amp;rsquo;s go back to the test we wrote for token bucket and rewrite it in this way:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@pytest.mark.parametrize&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;limit_strategy&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TokenBucket,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FixedWindow,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_apply_limit_per_unit&lt;/span>(local_storage, limit_strategy):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor &lt;span style="color:#f92672">=&lt;/span> Descriptor(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requests_per_unit&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unit&lt;span style="color:#f92672">=&lt;/span>Unit&lt;span style="color:#f92672">.&lt;/span>SECOND,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> token_bucket &lt;span style="color:#f92672">=&lt;/span> limit_strategy(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend&lt;span style="color:#f92672">=&lt;/span>local_storage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor&lt;span style="color:#f92672">=&lt;/span>rule_descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request &lt;span style="color:#f92672">=&lt;/span> Request(path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dd&amp;#34;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> token_bucket&lt;span style="color:#f92672">.&lt;/span>do_limit(request) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> token_bucket&lt;span style="color:#f92672">.&lt;/span>do_limit(request) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test_now &lt;span style="color:#f92672">=&lt;/span> datetime&lt;span style="color:#f92672">.&lt;/span>datetime&lt;span style="color:#f92672">.&lt;/span>now() &lt;span style="color:#f92672">+&lt;/span> datetime&lt;span style="color:#f92672">.&lt;/span>timedelta(seconds&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> freezegun&lt;span style="color:#f92672">.&lt;/span>freeze_time(test_now):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> token_bucket&lt;span style="color:#f92672">.&lt;/span>do_limit(request) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>the testing strategy is now passed to this test and it only tests the behavior.&lt;/p>
&lt;p>Now we can rewrite the remaining tests as well:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@pytest.mark.parametrize&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;limit_strategy&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TokenBucket,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FixedWindow,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_apply_limit_per_value&lt;/span>(local_storage, limit_strategy):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor &lt;span style="color:#f92672">=&lt;/span> Descriptor(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requests_per_unit&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unit&lt;span style="color:#f92672">=&lt;/span>Unit&lt;span style="color:#f92672">.&lt;/span>SECOND,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> token_bucket &lt;span style="color:#f92672">=&lt;/span> limit_strategy(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend&lt;span style="color:#f92672">=&lt;/span>local_storage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor&lt;span style="color:#f92672">=&lt;/span>rule_descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_1_request &lt;span style="color:#f92672">=&lt;/span> Request(path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dd&amp;#34;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_2_request &lt;span style="color:#f92672">=&lt;/span> Request(path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dd&amp;#34;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> token_bucket&lt;span style="color:#f92672">.&lt;/span>do_limit(user_1_request) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> token_bucket&lt;span style="color:#f92672">.&lt;/span>do_limit(user_2_request) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> token_bucket&lt;span style="color:#f92672">.&lt;/span>do_limit(user_1_request) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> token_bucket&lt;span style="color:#f92672">.&lt;/span>do_limit(user_2_request) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@pytest.mark.parametrize&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;limit_strategy&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TokenBucket,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FixedWindow,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_apply_limit_specific_value&lt;/span>(local_storage, limit_strategy):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor &lt;span style="color:#f92672">=&lt;/span> Descriptor(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requests_per_unit&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unit&lt;span style="color:#f92672">=&lt;/span>Unit&lt;span style="color:#f92672">.&lt;/span>MINUTE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> token_bucket &lt;span style="color:#f92672">=&lt;/span> limit_strategy(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend&lt;span style="color:#f92672">=&lt;/span>local_storage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor&lt;span style="color:#f92672">=&lt;/span>rule_descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_1_req &lt;span style="color:#f92672">=&lt;/span> Request(path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dd&amp;#34;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_2_req &lt;span style="color:#f92672">=&lt;/span> Request(path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dd&amp;#34;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> token_bucket&lt;span style="color:#f92672">.&lt;/span>do_limit(user_1_req) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> token_bucket&lt;span style="color:#f92672">.&lt;/span>do_limit(user_2_req) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> token_bucket&lt;span style="color:#f92672">.&lt;/span>do_limit(user_1_req) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 class="heading" id="sliding-window-log">
Sliding Window Log
&lt;a class="anchor" href="#sliding-window-log">#&lt;/a>
&lt;/h3>
&lt;p>As discussed earlier, the sliding window log does not take the time window fixed.
Imagine a request comes in at 10:00:30, instead of looking at request count in
the window 10:00 to 10:01
we check the number of requests in the window of 09:59:30 till that request.&lt;/p>
&lt;p>So the steps are:&lt;/p>
&lt;ol>
&lt;li>When a new request comes in save the timestamp into a list&lt;/li>
&lt;li>Count all the requests within the time unit of the arrived request&lt;/li>
&lt;li>If count more than allowed requests limit the request&lt;/li>
&lt;/ol>
&lt;p>How this can be done?&lt;/p>
&lt;p>We need to save the timestamp when each requests comes in.
Then when the next request comes we need to query all requests in the previous minute.&lt;/p>
&lt;p>Now the question is what data structure should be used here.
We need a data structure which can search and return all the values within a range.&lt;/p>
&lt;p>Redis provides &lt;a href="https://redis.io/docs/data-types/sorted-sets/">sorted sets&lt;/a>
which can provide an efficient way for finding a range of values in a list.&lt;/p>
&lt;p>Although sorted sets are
&lt;a href="https://github.com/redis/redis/blob/unstable/src/t_zset.c">implemented&lt;/a>
with hash map and &lt;a href="https://brilliant.org/wiki/skip-lists">skip list&lt;/a>,
we are going to use a naive approach for implementing them in local memory storage.
This can be a good topic for another post.&lt;/p>
&lt;p>Let&amp;rsquo;s start implementing the algorithm.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SlidingWindowLog&lt;/span>(AbstractStrategy):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend: AbstractStorage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor: Descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> super(SlidingWindowLog, self)&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">__init__&lt;/span>(storage_backend, rule_descriptor)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>rule_descriptor&lt;span style="color:#f92672">.&lt;/span>unit&lt;span style="color:#f92672">.&lt;/span>to_seconds()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>interval_max &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>rule_descriptor&lt;span style="color:#f92672">.&lt;/span>requests_per_unit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">do_limit&lt;/span>(self, request: Request):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>request &lt;span style="color:#f92672">=&lt;/span> request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request_logs_key &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_get_request_logs_key()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> request_logs_key &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_window_max_reached(request_logs_key):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_get_request_logs_key&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> descriptor &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>rule_descriptor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>request&lt;span style="color:#f92672">.&lt;/span>path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key &lt;span style="color:#f92672">=&lt;/span> descriptor&lt;span style="color:#f92672">.&lt;/span>key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>request&lt;span style="color:#f92672">.&lt;/span>data[key]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> descriptor&lt;span style="color:#f92672">.&lt;/span>value &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span> &lt;span style="color:#f92672">and&lt;/span> value &lt;span style="color:#f92672">!=&lt;/span> descriptor&lt;span style="color:#f92672">.&lt;/span>value:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> path &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> key &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> value
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First we get key of the list holding request logs.
Then we check if current windows max request count is reached or not.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_window_max_reached&lt;/span>(self, window_key):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>storage_backend&lt;span style="color:#f92672">.&lt;/span>sorted_set_remove(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_key,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>timestamp() &lt;span style="color:#f92672">-&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_window_req_count &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>storage_backend&lt;span style="color:#f92672">.&lt;/span>sorted_set_count(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_key,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>timestamp() &lt;span style="color:#f92672">-&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>timestamp(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> current_window_req_count &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>storage_backend&lt;span style="color:#f92672">.&lt;/span>sorted_set_add(window_key, datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>timestamp())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> current_window_req_count &lt;span style="color:#f92672">&amp;gt;=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>interval_max:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>storage_backend&lt;span style="color:#f92672">.&lt;/span>sorted_set_add(window_key, datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>timestamp())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before checking the request count,
we need to remove all the request that are not in the current window.&lt;/p>
&lt;p>Then we count the requests within the time unit and check if
it&amp;rsquo;s more than the allowed count for the interval.&lt;/p>
&lt;h4 class="heading" id="testing">
Testing
&lt;a class="anchor" href="#testing">#&lt;/a>
&lt;/h4>
&lt;p>Same as how we tested the previous strategy we
can add this new strategy to test parameters:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@pytest.mark.parametrize&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;limit_strategy&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TokenBucket,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FixedWindow,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SlidingWindowLog,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>we can add this strategy to previous tests,
but there&amp;rsquo;s also a new behavior we can test for this strategy.
Since the sliding window algorithm does not allow over-limit requests
at the edge of the time unit (like between 01:50 and 02:10) we can add test it.&lt;/p>
&lt;p>So create a new test:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@pytest.mark.parametrize&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;limit_strategy&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SlidingWindowLog,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_sliding_window_does_not_allow_requests_in_unit_edges&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_storage, limit_strategy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor &lt;span style="color:#f92672">=&lt;/span> Descriptor(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requests_per_unit&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unit&lt;span style="color:#f92672">=&lt;/span>Unit&lt;span style="color:#f92672">.&lt;/span>MINUTE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sliding_window &lt;span style="color:#f92672">=&lt;/span> limit_strategy(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend&lt;span style="color:#f92672">=&lt;/span>local_storage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor&lt;span style="color:#f92672">=&lt;/span>rule_descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_1_req &lt;span style="color:#f92672">=&lt;/span> Request(path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dd&amp;#34;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_time &lt;span style="color:#f92672">=&lt;/span> datetime&lt;span style="color:#f92672">.&lt;/span>datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>replace(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hour&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, minute&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, second&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">50&lt;/span>, microsecond&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> freezegun&lt;span style="color:#f92672">.&lt;/span>freeze_time(current_time):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> sliding_window&lt;span style="color:#f92672">.&lt;/span>do_limit(user_1_req) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test_now &lt;span style="color:#f92672">=&lt;/span> current_time &lt;span style="color:#f92672">+&lt;/span> datetime&lt;span style="color:#f92672">.&lt;/span>timedelta(seconds&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> freezegun&lt;span style="color:#f92672">.&lt;/span>freeze_time(test_now):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> sliding_window&lt;span style="color:#f92672">.&lt;/span>do_limit(user_1_req) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> sliding_window&lt;span style="color:#f92672">.&lt;/span>do_limit(user_1_req) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice in our test we set the initial time to a time near ending of a minute,
then move the time forward to be in the next minute, previous algorithms wouldn&amp;rsquo;t
block this.
But since the window is not fixed in this limiter it will block the third request,
even if it&amp;rsquo;s sent in the in the next minute. Nice improvement.&lt;/p>
&lt;h3 class="heading" id="sliding-window-count">
Sliding Window Count
&lt;a class="anchor" href="#sliding-window-count">#&lt;/a>
&lt;/h3>
&lt;p>The sliding window log solves the problem of allowing over-limit
requests at unit edges.&lt;/p>
&lt;p>But this algorithm uses more storage since it&amp;rsquo;s storing full timestmap.&lt;/p>
&lt;p>To solve this problem, there is another approach to count requests in each window.
When a request comes in calculate the current 1 minute window.
This window spans the current minute and probably the previous minute.
We can calculate what percentage of the rolling window is in previous window.
Then we can use that percentage to assign a weight to previous window request count.&lt;/p>
&lt;p>so it would be
&lt;code>total_requests = previous_window_weight * previous_window_count + current_window_count&lt;/code>.&lt;/p>
&lt;p>For the implementation we use the previous way to create keys for each interval.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SlidingWindowCount&lt;/span>(AbstractStrategy):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend: AbstractStorage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor: Descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> super(SlidingWindowCount, self)&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">__init__&lt;/span>(storage_backend, rule_descriptor)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>rule_descriptor&lt;span style="color:#f92672">.&lt;/span>unit&lt;span style="color:#f92672">.&lt;/span>to_seconds()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>interval_max &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>rule_descriptor&lt;span style="color:#f92672">.&lt;/span>requests_per_unit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">do_limit&lt;/span>(self, request: Request):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_interval &lt;span style="color:#f92672">=&lt;/span> str(int(datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>timestamp() &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev_interval &lt;span style="color:#f92672">=&lt;/span> str(int(datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>timestamp() &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>rule_descriptor&lt;span style="color:#f92672">.&lt;/span>key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#f92672">=&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value &lt;span style="color:#f92672">=&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>data[key]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> previous_interval_key &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_get_counter_key(prev_interval, path, key, value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_interval_key &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_get_counter_key(current_interval, path, key, value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> previous_interval_key &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span> &lt;span style="color:#f92672">or&lt;/span> current_interval_key &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>storage_backend&lt;span style="color:#f92672">.&lt;/span>incr(current_interval_key)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_interval_counter &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>storage_backend&lt;span style="color:#f92672">.&lt;/span>get(current_interval_key) &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> previous_interval_counter &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>storage_backend&lt;span style="color:#f92672">.&lt;/span>get(previous_interval_key) &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> percent_of_previous_interval_overlap_current_window &lt;span style="color:#f92672">=&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span> datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>timestamp() &lt;span style="color:#f92672">%&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>interval_len_sec
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_requests &lt;span style="color:#f92672">=&lt;/span> math&lt;span style="color:#f92672">.&lt;/span>ceil(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> previous_interval_counter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span> percent_of_previous_interval_overlap_current_window
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> current_interval_counter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> total_requests &lt;span style="color:#f92672">&amp;gt;&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>interval_max:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_get_counter_key&lt;/span>(self, interval, path, key, value):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> descriptor &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>rule_descriptor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key &lt;span style="color:#f92672">=&lt;/span> descriptor&lt;span style="color:#f92672">.&lt;/span>key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> descriptor&lt;span style="color:#f92672">.&lt;/span>value &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span> &lt;span style="color:#f92672">and&lt;/span> value &lt;span style="color:#f92672">!=&lt;/span> descriptor&lt;span style="color:#f92672">.&lt;/span>value:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> path &lt;span style="color:#f92672">+&lt;/span> interval &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> key &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> value
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Most of the code is similar to the sliding window log, except that we use
both previous and current interval keys to count the requests.
The mysterious formula &lt;code>datetime.now().timestamp() % self.interval_len_sec&lt;/code>
always outputs
the number of seconds remaining until the end of interval and diving this by
the interval
length will give us the percentage of the current window passed. Subtracting
this from 1
will give how much of the sliding window is in the past interval to calculate
the weight.&lt;/p>
&lt;p>Also since our calculation can result in a floating point number we can round it
up or down. Rounding up is chosen in this case.&lt;/p>
&lt;h4 class="heading" id="tests">
Tests
&lt;a class="anchor" href="#tests">#&lt;/a>
&lt;/h4>
&lt;p>Since this is another implementation for the sliding window, we can add it as a parameter
to all previous tests and the sliding window test.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@pytest.mark.parametrize&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;limit_strategy&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SlidingWindowLog,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SlidingWindowCount,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_sliding_window_does_not_allow_requests_in_unit_edges&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And finally running all the tests, results in 18 tests for all of our strategies
with very minimal test code.
It&amp;rsquo;s always good to write less code cause less code is better.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>tests&lt;span style="color:#f92672">/&lt;/span>limit_strategy&lt;span style="color:#f92672">/&lt;/span>test_limit_strategy&lt;span style="color:#f92672">.&lt;/span>py &lt;span style="color:#f92672">..............&lt;/span> [ &lt;span style="color:#ae81ff">77&lt;/span>&lt;span style="color:#f92672">%&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tests&lt;span style="color:#f92672">/&lt;/span>service&lt;span style="color:#f92672">/&lt;/span>test_limiter&lt;span style="color:#f92672">.&lt;/span>py &lt;span style="color:#f92672">....&lt;/span> [&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">%&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===========================================================&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span> passed &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#ae81ff">0.20&lt;/span>s &lt;span style="color:#f92672">===========================================================&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 class="heading" id="conclusion">
Conclusion
&lt;a class="anchor" href="#conclusion">#&lt;/a>
&lt;/h2>
&lt;p>We now have implemented all different algorithms for our rate limiter.
The true power of our abstractions are shown in the less code we have to
write for each limiter, we can test them all with universal test cases,
the rate limiter service can use them without knowing what the underlying strategy
is.&lt;/p>
&lt;p>In the next part we can see how to implement another storage backend such as redis,
without having to change any code in rate limiting algorithms.&lt;/p></description></item><item><title>Personalize Macos Environment for Your Productivity</title><link>https://glyphack.com/macos-productivity/</link><pubDate>Sun, 19 Feb 2023 20:58:33 +0100</pubDate><guid>https://glyphack.com/macos-productivity/</guid><description>&lt;p>MacOS is already a polished environment and unlike some other OSes it works out of the box.
Still, spending investing time to personalize your tools and environment is a smart move.&lt;/p>
&lt;p>In the past years using MacOS I found simple tools that helps to make MacOS more ergonomic and fun.&lt;/p>
&lt;p>Most of the content here is in &lt;a href="https://github.com/Glyphack/dotfiles">my dotfiles&lt;/a>.&lt;/p>
&lt;h2 class="heading" id="why">
Why?
&lt;a class="anchor" href="#why">#&lt;/a>
&lt;/h2>
&lt;p>If you&amp;rsquo;re already sold to this idea go ahead and start,
otherwise keep reading so I can convince you why you might want to start
configuring your tools.&lt;/p>
&lt;p>I first heard the term
&lt;a href="https://www.youtube.com/watch?v=QMVIJhC9Veg">Personalized Development Environment&lt;/a>
in this video about configuring text editors to your liking and the idea stuck with me since then.&lt;/p>
&lt;p>I think this approach works well with other tools too.
That&amp;rsquo;s exactly people learn touch typing.
Being able to use keyboard with the least amount of effort is important.&lt;/p>
&lt;p>You can go ahead with default configurations that come out of the box but those
are not built for you, they are for everyone.&lt;/p>
&lt;p>I don&amp;rsquo;t think automation is not primarily here to save your time only.
Automation is here to make it easier. Let me give you an example.
Imagine you have to constantly switch between editor and web browser constantly for some task.
Doing this with the default tools is annoying, requires a lot of keys. But it can be simpler.
Default tool for this is to either use the mouse, or ALT+Tab every time to move between windows.
Specialized tools can make this simpler by setting a shortcut for each of the windows. Making the toggle just one keybinding.&lt;/p>
&lt;h2 class="heading" id="remapping-keys">
Remapping Keys
&lt;a class="anchor" href="#remapping-keys">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://karabiner-elements.pqrs.org/">Karabiner&lt;/a> can be used to remap keyboard.&lt;/p>
&lt;p>Try remapping the keys that you don&amp;rsquo;t use often to things that you miss on the
keyboard, some examples are:&lt;/p>
&lt;ul>
&lt;li>Caps lock: key can be remapped to &lt;code>Esc&lt;/code> key when pressed and Hyper Key when held&lt;/li>
&lt;li>&lt;code>§&lt;/code>: which I don&amp;rsquo;t know why is it here in the first place can be mapped to &amp;ldquo;`&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>There are more advanced keybindings that can be done I have &lt;a href="https://glyphack.com/blog/a-better-keyboard/">created keybindings&lt;/a> to write symbols like &lt;code>*&lt;/code>, &lt;code>-&lt;/code>, etc. without reaching for shift key and a number.
This helped a lot with keeping my hands near the home row and reducing the work my pinky finger has to do.&lt;/p>
&lt;h2 class="heading" id="text-expanding">
Text Expanding
&lt;a class="anchor" href="#text-expanding">#&lt;/a>
&lt;/h2>
&lt;p>Text expanding is writing a small text and then it expands to a bigger text.&lt;/p>
&lt;p>For example instead of typing your mail every time you,
can only write &lt;code>:em&lt;/code> and it expands to your email address.&lt;/p>
&lt;p>&lt;a href="https://espanso.org/">Espanso&lt;/a> is the tool I use for this.&lt;/p>
&lt;p>Some examples I have are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>:date&lt;/code> to current date like 19/02/2023&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="raycast">
Raycast
&lt;a class="anchor" href="#raycast">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.raycast.com">Raycast&lt;/a> is the single best application I have in this list.&lt;/p>
&lt;p>What does it do?&lt;/p>
&lt;p>It gives a launch bar(like Spotlight) that can open applications,
find files and perform actions. I suggest reading through their
&lt;a href="https://manual.raycast.com/">manual&lt;/a> to understand all it can do.
With Raycast you can integrate the stuff you need while reading/coding to quickly
pull them off without leaving your current work.&lt;/p>
&lt;p>Raycast is easy to extend yourself, every time you find yourself doing something
over an over or need to open something regularly, take a look at it&amp;rsquo;s
&lt;a href="https://www.raycast.com/store">store&lt;/a>
to check if there&amp;rsquo;s a solution.&lt;/p>
&lt;p>For example these are some of the things I&amp;rsquo;m using:
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="My Raycast" src="https://glyphack.com/my-raycast.png" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;p>&lt;a href="https://www.raycast.com/raycast/browser-bookmarks">Search bookmarks&lt;/a>
Start bookmarking any page you need to visit frequently, for example
homepages for your projects.&lt;/p>
&lt;p>The reason this is handy is that, first you don&amp;rsquo;t need to open browser to search
and through the history to open frequently visited pages also you don&amp;rsquo;t have to
navigate through the pages to get to where you want.
Imagine navigating through Confluence to update some page you have to do everyday.
These days I just bookmark things I want to visit again and don&amp;rsquo;t bother with organizing them.&lt;/p>
&lt;p>Clipboard history &amp;amp; edit for traveling trough clipboard and change the content.&lt;/p>
&lt;p>&lt;a href="https://www.raycast.com/raycast/github">Github&lt;/a>
extension is also useful to check notifications.
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="Raycast Github" src="https://glyphack.com/raycast-github-pr.png" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;h2 class="heading" id="hammerspoon">
Hammerspoon
&lt;a class="anchor" href="#hammerspoon">#&lt;/a>
&lt;/h2>
&lt;p>This one&amp;rsquo;s the most powerful tool, it&amp;rsquo;s a bridge between MacOS and Lua. You can
&lt;a href="https://www.hammerspoon.org/docs/index.html">customize anything&lt;/a>
with it&amp;rsquo;s builtin libraries called spoons.&lt;/p>
&lt;p>You can take a look at
&lt;a href="https://github.com/Glyphack/dotfiles/blob/master/hammerspoon/init.lua">my config&lt;/a>
for inspirations.&lt;/p>
&lt;p>One useful feature if you do multiple meetings per day(which you probably do)
is it have a global shortcut to mute/unmute your mic to don&amp;rsquo;t annoy others with
noise in the meeting and quickly unmute. I&amp;rsquo;m doing this with &lt;a href="https://github.com/cmaahs/global-mute-spoon">global mute spoon&lt;/a>.&lt;/p>
&lt;p>Here&amp;rsquo;s how the configuration looks like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> GlobalMute &lt;span style="color:#f92672">=&lt;/span> hs.loadSpoon(&lt;span style="color:#e6db74">&amp;#34;GlobalMute&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GlobalMute:bindHotkeys({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toggle &lt;span style="color:#f92672">=&lt;/span> { hyper, &lt;span style="color:#e6db74">&amp;#34;t&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For example I have a microphone that is both input and output device.
When I connect this microphone I don&amp;rsquo;t want to set it as my output device but that&amp;rsquo;s what mac does by default.
In Hammerspoon I can setup a callback to set my input/output device when the microphone is connected.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">audiodeviceCallback&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current &lt;span style="color:#f92672">=&lt;/span> hs.audiodevice.defaultInputDevice():name()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Current device: &amp;#34;&lt;/span> &lt;span style="color:#f92672">..&lt;/span> current)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> current &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;External Microphone&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Forcing default output to Internal Speakers&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.audiodevice.findOutputByName(&lt;span style="color:#e6db74">&amp;#34;MacBook Pro Speakers&amp;#34;&lt;/span>):setDefaultOutputDevice()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hs.audiodevice.watcher.setCallback(audiodeviceCallback)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hs.audiodevice.watcher.start()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 class="heading" id="switching-windows">
Switching Windows
&lt;a class="anchor" href="#switching-windows">#&lt;/a>
&lt;/h2>
&lt;p>Another Raycast feature is setting keybinding to open application windows.
This is useful when you want to have one application on the screen.
For example for me it&amp;rsquo;s terminal and browser.
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="Raycast Apps" src="https://glyphack.com/raycast-apps.png" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;p>These days I&amp;rsquo;m using &lt;a href="https://glyphack.com/blog/a-better-keyboard/">a new solution&lt;/a> based on Hammerspoon for this.&lt;/p>
&lt;h2 class="heading" id="terminal">
Terminal
&lt;a class="anchor" href="#terminal">#&lt;/a>
&lt;/h2>
&lt;p>If you made it through here you might as well be a CLI user.
This post is not about terminal as it&amp;rsquo;s not related to MacOS but here are a few tips.&lt;/p>
&lt;p>Use a fuzzy finder like &lt;a href="https://github.com/junegunn/fzf">fzf&lt;/a> for searching directories and history.
I have the following Fish keybinding to do a fuzzy search in my home directory and select a folder I want to &lt;code>cd&lt;/code> into.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">set&lt;/span> &lt;span style="color:#a6e22e">-x&lt;/span> FZF_ALT_C_COMMAND &lt;span style="color:#e6db74">&amp;#34;fd -t d . &lt;/span>$PROGRAMMING_DIR&lt;span style="color:#e6db74"> -d 3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 class="heading" id="configure-git">
Configure Git
&lt;a class="anchor" href="#configure-git">#&lt;/a>
&lt;/h3>
&lt;p>A good one to start can be git,
you can setup &lt;a href="https://github.com/Glyphack/dotfiles/blob/master/gitconf/.gitignore_global">global ignore file&lt;/a> to ignore files for your specific environment in every project. So you don&amp;rsquo;t need to add your &lt;code>.idea&lt;/code> folder to every project.
&lt;a href="https://github.com/Glyphack/dotfiles/blob/master/gitconf/.gitconfig">Aliases&lt;/a> are useful for making shorter commands.&lt;/p>
&lt;p>Git work trees are a perfect solution if you want to have access to multiple branches at the same time.
For example having the master branch and a feature branch allows you to run benchmarks on both at the same time.&lt;/p>
&lt;h3 class="heading" id="neovim">
Neovim
&lt;a class="anchor" href="#neovim">#&lt;/a>
&lt;/h3>
&lt;p>There are a lot of guides to configure and work with Neovim,
I suggest &lt;a href="https://www.youtube.com/watch?v=w7i4amO_zaE">this&lt;/a>
and
&lt;a href="https://www.youtube.com/watch?v=stqUbv-5u2s">this&lt;/a>.
You can also find the plugins/tools I use or think is interesting to check in my
&lt;a href="https://github.com/stars/Glyphack/lists/tools">stars list&lt;/a>.&lt;/p>
&lt;h3 class="heading" id="learn-your-code-editor">
Learn Your Code Editor
&lt;a class="anchor" href="#learn-your-code-editor">#&lt;/a>
&lt;/h3>
&lt;p>Even if you don&amp;rsquo;t use something like Neovim,
your editor supports a lot of customization, and should be customized.
When you find some action requires a lot of effort, try to customize it in your Editor.&lt;/p>
&lt;p>For example, most of the time I stage part of the file I&amp;rsquo;m editing for commits.
In VSCode you need to open the version control panel,
scroll through the file and right click to select stage selected.
This is super hard if you have to do it 20 times in a productive day.
I have a config in my vim to directly stage hunks in my editor to commit,
but I&amp;rsquo;m sure you can find a VSCode equivalent.&lt;/p></description></item><item><title>Rate Limiter From Scratch in Python Part 1</title><link>https://glyphack.com/rate-limiter-python-1/</link><pubDate>Tue, 14 Feb 2023 23:19:18 +0100</pubDate><guid>https://glyphack.com/rate-limiter-python-1/</guid><description>&lt;h2 class="heading" id="introduction">
Introduction
&lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>After reading &lt;a href="https://bytebytego.com/">ByteByteGo course&lt;/a>
motivated me to write a rate limiter.
So I decided to do it in &lt;a href="https://aosabook.org/en/500L/introduction.html">500lines&lt;/a>
theme.&lt;/p>
&lt;p>We will focus on how to create the interfaces and components,
to allow extensibility in the predicted ways.&lt;/p>
&lt;p>You can find the complete source code &lt;a href="https://github.com/Glyphack/hera-limit">here&lt;/a>.&lt;/p>
&lt;h2 class="heading" id="what-is-a-rate-limiter">
What is a Rate Limiter?
&lt;a class="anchor" href="#what-is-a-rate-limiter">#&lt;/a>
&lt;/h2>
&lt;p>Well, there are a lot of
&lt;a href="https://www.cloudflare.com/en-gb/learning/bots/what-is-rate-limiting/">great explanations&lt;/a>
on what is a rate limiter, but I&amp;rsquo;ll give a minimal introduction to it for this post.&lt;/p>
&lt;p>A rate limiter is software that limits how many times
someone can repeat an action in your software. Take Twitter as an example;
they need to specify how often someone can send a tweet per minute; otherwise,
one person can create 1 million tweets in a second and fill up all their server resources.&lt;/p>
&lt;h2 class="heading" id="high-level-design">
High Level Design
&lt;a class="anchor" href="#high-level-design">#&lt;/a>
&lt;/h2>
&lt;p>First off, what should our rate limiter do?
The rate limiter should be a function that takes in a request,
decides if the request can go through or not based on the current statistics.&lt;/p>
&lt;p>We are going to implement the following features:&lt;/p>
&lt;ol>
&lt;li>Rule-based rate limiting: let the user define rules
&lt;ul>
&lt;li>with a simpler version (without nested rules) of &lt;a href="https://github.com/envoyproxy/ratelimit#configuration">envoy rate limit config&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Support both local memory and Redis as storage backend&lt;/li>
&lt;li>Support the following rate-limit algorithms:&lt;/li>
&lt;li>Token bucket&lt;/li>
&lt;li>Fixed window&lt;/li>
&lt;li>Sliding window log&lt;/li>
&lt;li>Sliding window counter&lt;/li>
&lt;li>Distributed deployment model:
&lt;ul>
&lt;li>deploying multiple instances with consistent and eventual consistency models.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>What are the components of our system?&lt;/p>
&lt;p>
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="System Components" src="https://glyphack.com/rate-limiter-components.png" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;p>Breaking down the components:&lt;/p>
&lt;p>&lt;strong>Rules storage&lt;/strong>:
it is responsible for loading rules and providing them to the rate limiter.&lt;/p>
&lt;p>Separating this component allows the service independent of how the rules
should be loaded into the service.
We want to start the application with a set of rules saved on disk,
but it&amp;rsquo;s helpful to be able to add/remove rules from an API endpoint
while the application is running.&lt;/p>
&lt;p>Although we will not implement that part in this guide, separating this is good
for easier testing and future extensibility.&lt;/p>
&lt;p>&lt;strong>Storage&lt;/strong> :
This component is responsible for holding data used by rate-limiting algorithms.&lt;/p>
&lt;p>Creating an interface for storage is helpful because
we can ignore the underlying storage implementation in rate limit algorithms.
Allowing us to use multiple storage backends such as Redis or local memory
without touching the rate limit algorithm code.
We can implement operations &lt;code>exists&lt;/code>, &lt;code>get_value&lt;/code>, &lt;code>set&lt;/code>, &lt;code>incr&lt;/code> for the above algorithms.&lt;/p>
&lt;p>Note that we assume that our data store for this software is a key/value store.
We are not creating a general store that every application can use.
This data store helps with writing a more straightforward interface
and implementation for storage.
For example, we don&amp;rsquo;t require to support where/filtering clause.&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=tKbV6BpH-C8">This video&lt;/a>
gives a nice explanation of why sometimes we must do this.&lt;/p>
&lt;style>
#callout {
background: #f9f9f9;
padding: 1.5em 1.25em;
border-radius: 3px;
display: flex;
flex-direction: row;
margin-bottom: 20px;
}
#callout-inner {
margin-left: 1em;
}
@media (max-width: 767px) {
#callout {
padding: 1.5em 0.75em 1.5em 0.6em;
}
#callout-inner {
margin-left: 0.5em;
}
}
&lt;/style>
&lt;div id="callout" style="">
&lt;div>✅&lt;/div>
&lt;div id="callout-inner"> In the above abstraction, we are not creating a generic storage but only a key-value store. This abstraction limits the extensibility of the code but makes the work easier. Which makes it a good choice for rate limiter problem scope. Always be careful when creating a very generic abstraction.&lt;/div>
&lt;/div>
&lt;p>&lt;strong>Limit Strategy&lt;/strong>:
This component implements the rate limit algorithms without knowing the
underlying storage or API implementation.&lt;/p>
&lt;p>It should take in storage and a request and provide a result whether it&amp;rsquo;s limited.&lt;/p>
&lt;p>The request details are essential to decide whether to limit,
but we only need the request data, IP, and path.
So it&amp;rsquo;s better only to take in these values and
not depend on a particular request type.
Then in the future, we can write adapters to convert a gRPC request to this
function&amp;rsquo;s input format.&lt;/p>
&lt;p>Service: takes care of orchestrating all the components.
Upon startup, it loads all the rules into memory and creates a list of limit strategies to check.
The flow of handling requests:&lt;/p>
&lt;ol>
&lt;li>Run all the rules that apply to the request path&lt;/li>
&lt;li>Rules answer whether to allow or deny the request.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>API&lt;/strong>: This layer is an interface for other programs to call the rate limiter.&lt;/p>
&lt;p>For example, this part can be exposed to the API gateway. We will not implement the API, but we will implement the logic to rate limit requests. Separating the API and rate limit service is helpful as we can expose different interfaces to integrate with other tools, for example:&lt;/p>
&lt;ul>
&lt;li>Importing the rate limiter directly into the app&lt;/li>
&lt;li>Making it available as a &lt;a href="https://docs.konghq.com/gateway/latest/plugin-development/">Kong plugin&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The rule structure is part of the application interface. Users can define them to rate limit the services,
and just like an API, we don&amp;rsquo;t change them much.&lt;/p>
&lt;p>On the other hand, the LimitStrategy and Storage can be swapped and replaced with different implementations.
So a rule can stay the same while the limiter enforcing the rule can be changed to relax the rule or make it more strict.&lt;/p>
&lt;h2 class="heading" id="implementation">
Implementation
&lt;a class="anchor" href="#implementation">#&lt;/a>
&lt;/h2>
&lt;h3 class="heading" id="defining-interfaces">
Defining Interfaces
&lt;a class="anchor" href="#defining-interfaces">#&lt;/a>
&lt;/h3>
&lt;p>Based on the above rule structure we can use the following structure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> dataclasses &lt;span style="color:#f92672">import&lt;/span> dataclass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> enum &lt;span style="color:#f92672">import&lt;/span> Enum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> typing &lt;span style="color:#f92672">import&lt;/span> List, Optional
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Unit&lt;/span>(str, Enum):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SECOND &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;second&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MINUTE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;minute&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HOUR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hour&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">to_seconds&lt;/span>(self) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> int:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> self &lt;span style="color:#f92672">==&lt;/span> Unit&lt;span style="color:#f92672">.&lt;/span>SECOND:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> self &lt;span style="color:#f92672">==&lt;/span> Unit&lt;span style="color:#f92672">.&lt;/span>MINUTE:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> self &lt;span style="color:#f92672">==&lt;/span> Unit&lt;span style="color:#f92672">.&lt;/span>HOUR:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">3600&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Unknown unit: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>self&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Descriptor&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key: str
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unit: Unit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requests_per_unit: int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value: Optional[str] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Rule&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path: str
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> descriptors: List[Descriptor]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">match&lt;/span>(self, path: str) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> bool:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>path &lt;span style="color:#f92672">==&lt;/span> path
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>dataclass&lt;/code> is used here for easier initialization.&lt;/p>
&lt;p>Now let&amp;rsquo;s define the storage interface&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> abc &lt;span style="color:#f92672">import&lt;/span> ABC, abstractmethod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> enum &lt;span style="color:#f92672">import&lt;/span> Enum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">StorageEngines&lt;/span>(str, Enum):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> REDIS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;redis&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MEMORY &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;memory&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AbstractStorage&lt;/span>(ABC):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>(self, key):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">NotImplementedError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">set&lt;/span>(self, key, value, ttl_seconds: int):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">NotImplementedError&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>get&lt;/code> and &lt;code>set&lt;/code> are the required methods for implementing the above algorithms.
other operations such as &lt;a href="https://redis.io/commands/decr/">decr&lt;/a>
are also available which can increase the performance of our code.&lt;/p>
&lt;p>Limit strategies only depend on the storage &amp;amp; rule components.
It should also have a request type for itself which can be used by
other components calling it to pass in a request with a generic form.
So it does not depend on a specific type of request, but only it&amp;rsquo;s data and path.&lt;/p>
&lt;p>The only public function is &lt;code>do_limit&lt;/code>
which takes in a request and determines if it&amp;rsquo;s limited or not.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LimitStrategies&lt;/span>(str, Enum):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TOKEN_BUCKET &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;token_bucket&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Request&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path: str
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: dict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AbstractStrategy&lt;/span>(abc&lt;span style="color:#f92672">.&lt;/span>ABC, metaclass&lt;span style="color:#f92672">=&lt;/span>abc&lt;span style="color:#f92672">.&lt;/span>ABCMeta):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend: AbstractStorage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor: Descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>storage_backend &lt;span style="color:#f92672">=&lt;/span> storage_backend
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>rule_descriptor &lt;span style="color:#f92672">=&lt;/span> rule_descriptor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@abc.abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">do_limit&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request: Request,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">NotImplementedError&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 class="heading" id="token-bucket">
Token Bucket
&lt;a class="anchor" href="#token-bucket">#&lt;/a>
&lt;/h3>
&lt;p>Now that the interfaces are clear we can start implementing the algorithm.&lt;/p>
&lt;p>From the rule structure,
we can use the &lt;code>unit&lt;/code> to to refresh tokens in the bucket.
and the &lt;code>request_per_unit&lt;/code> to determine bucket capacity.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TokenBucket&lt;/span>(AbstractStrategy):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> storage_backend: AbstractStorage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor: Descriptor,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> su
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 class="heading" id="test-rate-limiter-service">
Test Rate Limiter Service
&lt;a class="anchor" href="#test-rate-limiter-service">#&lt;/a>
&lt;/h4>
&lt;p>For rate limiter service we need to create two fixtures, config and local storage:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@pytest.fixture&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">local_storage&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> memory&lt;span style="color:#f92672">.&lt;/span>Memory()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@pytest.fixture&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Config(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> limit_strategy&lt;span style="color:#f92672">=&lt;/span>LimitStrategies&lt;span style="color:#f92672">.&lt;/span>TOKEN_BUCKET,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now what can be tested in the service?
With the limit strategy we were testing if the rule descriptor is applied correctly.&lt;/p>
&lt;p>Here we should check if the rule is applied correctly,
this means we can still test the rule descriptor part,
but it&amp;rsquo;s not necessary since if a rule descriptor is not applied correctly
then the limit strategy test must throw an error(otherwise we end up with an
untested strategy which is a nightmare).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_rate_limit_service_applies_the_rule&lt;/span>(local_storage: memory&lt;span style="color:#f92672">.&lt;/span>Memory, config: Config):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule_descriptor &lt;span style="color:#f92672">=&lt;/span> Descriptor(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requests_per_unit&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unit&lt;span style="color:#f92672">=&lt;/span>Unit&lt;span style="color:#f92672">.&lt;/span>SECOND,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule &lt;span style="color:#f92672">=&lt;/span> Rule(path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/limited-path&amp;#34;&lt;/span>, descriptors&lt;span style="color:#f92672">=&lt;/span>[rule_descriptor])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rate_limit_service &lt;span style="color:#f92672">=&lt;/span> RateLimitService(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config&lt;span style="color:#f92672">=&lt;/span>config, storage_engine&lt;span style="color:#f92672">=&lt;/span>local_storage, rules&lt;span style="color:#f92672">=&lt;/span>[rule]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request &lt;span style="color:#f92672">=&lt;/span> Request(path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/limited-path&amp;#34;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> rate_limit_service&lt;span style="color:#f92672">.&lt;/span>do_limit(request) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> rate_limit_service&lt;span style="color:#f92672">.&lt;/span>do_limit(request) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time_now &lt;span style="color:#f92672">=&lt;/span> datetime&lt;span style="color:#f92672">.&lt;/span>datetime&lt;span style="color:#f92672">.&lt;/span>now() &lt;span style="color:#f92672">+&lt;/span> datetime&lt;span style="color:#f92672">.&lt;/span>timedelta(seconds&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> freezegun&lt;span style="color:#f92672">.&lt;/span>freeze_time(time_now):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> rate_limit_service&lt;span style="color:#f92672">.&lt;/span>do_limit(request) &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 class="heading" id="conclusion">
Conclusion
&lt;a class="anchor" href="#conclusion">#&lt;/a>
&lt;/h2>
&lt;p>So far we have a working rate limiter with one implemented rule.
I think this would be enough for one read,
In the next post we will add more rate limiting algorithms and see
how the current structure of the program can be extended.&lt;/p>
&lt;p>You can find the &lt;a href="https://github.com/Glyphack/hera-limit">complete source code&lt;/a>
on my Github.&lt;/p></description></item><item><title>Everything you need to know about splitting CDK stacks</title><link>https://glyphack.com/splitting-cdk-stacks/</link><pubDate>Sun, 13 Nov 2022 09:49:50 +0330</pubDate><guid>https://glyphack.com/splitting-cdk-stacks/</guid><description>&lt;p>AWS CDK is a tool that lets you define your cloud resources
in a languages such as python.
And like any other project as the codebase grows, it needs to be split into components.&lt;/p>
&lt;p>CDK projects can be split into multiple stacks.
Stack is a single deployable unit in CDK.
when you deploy it all the resources inside it will get deployed.&lt;/p>
&lt;p>Knowing a few points in the beginning can help to create a good project structure,
and avoiding common pitfalls like dependency issues.&lt;/p>
&lt;p>The questions to ask when considering splitting a stack:&lt;/p>
&lt;ul>
&lt;li>Which components should be extracted?&lt;/li>
&lt;li>Should this new code be a stack or a construct?&lt;/li>
&lt;li>which components belong to this stack?&lt;/li>
&lt;li>What cross-stack dependencies are created?&lt;/li>
&lt;/ul>
&lt;p>I’m sharing the lessons I learned writing and refactoring multiple cdk projects.&lt;/p>
&lt;h2 class="heading" id="splitting-stacks">
Splitting stacks
&lt;a class="anchor" href="#splitting-stacks">#&lt;/a>
&lt;/h2>
&lt;p>When components can be deployed separately, it&amp;rsquo;s good to split the stacks.
Smaller stacks are deployed faster and it&amp;rsquo;s easier to maintain them.&lt;/p>
&lt;p>You can extract some parts of a stack into another stack and add it as a dependency.
Keep in mind that when &lt;code>StackA&lt;/code> depends on &lt;code>StackB&lt;/code> then:&lt;/p>
&lt;ul>
&lt;li>To Deploy &lt;code>StackA&lt;/code> the &lt;code>StackB&lt;/code> must be deployed.&lt;/li>
&lt;li>When stacks are deployed &lt;code>StackB&lt;/code> cannot be updated without updating &lt;code>StackA&lt;/code> first.&lt;/li>
&lt;/ul>
&lt;p>This two way relation can cause problems which we&amp;rsquo;ll talk about it later.&lt;/p>
&lt;h3 class="heading" id="how-to-decide-the-number-of-stacks">
How to Decide the Number of Stacks?
&lt;a class="anchor" href="#how-to-decide-the-number-of-stacks">#&lt;/a>
&lt;/h3>
&lt;p>A simple rule for separation is based on:&lt;/p>
&lt;ol>
&lt;li>Application domain&lt;/li>
&lt;li>Resources life cycle&lt;/li>
&lt;/ol>
&lt;p>Multiple stacks for apps in different domains is a separation based on domain.
Separating based on life cycle can be done for rarely deployed resources like databases.&lt;/p>
&lt;p>You can find a good reference on these examples and stacks in
&lt;a href="https://github.com/kevinslin/open-cdk#stacks">open-cdk guide&lt;/a>.&lt;/p>
&lt;h2 class="heading" id="creating-constructs">
Creating constructs
&lt;a class="anchor" href="#creating-constructs">#&lt;/a>
&lt;/h2>
&lt;p>CDK has another solution for having smaller stacks
which is creating a re-suable component called construct.
To decide whether a code should be a stack or a construct we can check:&lt;/p>
&lt;ol>
&lt;li>Can be used in other places: a S3 Bucket with specific options.&lt;/li>
&lt;li>A second stack would be always deployed deleted with current stack(highly coupled).&lt;/li>
&lt;/ol>
&lt;p>Creating constructs is also easier;
because you are not introducing any dependencies between stacks.
If you delete an stack all constructs inside it are removed.&lt;/p>
&lt;h2 class="heading" id="separated-stacks-and-dependencies">
Separated Stacks and Dependencies
&lt;a class="anchor" href="#separated-stacks-and-dependencies">#&lt;/a>
&lt;/h2>
&lt;p>Imagine we have an API with lambda and API gateway, and a route53 hosted zone.
This infrastructure has two properties:&lt;/p>
&lt;ul>
&lt;li>Lambda can frequently be changed, but the API endpoint is same.&lt;/li>
&lt;li>deploying a resource like a hosted zone takes a lot of time.
So it&amp;rsquo;s better to deploy it separately, once.&lt;/li>
&lt;li>A hosted zone record must point to API endpoint.&lt;/li>
&lt;/ul>
&lt;p>By splitting this stack into two:&lt;/p>
&lt;ol>
&lt;li>API stack&lt;/li>
&lt;li>Hosted zone stack&lt;/li>
&lt;/ol>
&lt;p>
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="example-cdk-stack" src="https://glyphack.com/example-cdk-stack-deps.excalidraw.png" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;h3 class="heading" id="dependency-problem-and-solution">
Dependency problem and Solution
&lt;a class="anchor" href="#dependency-problem-and-solution">#&lt;/a>
&lt;/h3>
&lt;p>What dependencies did we create?
If our API endpoint changes then the Hosted zone needs to be updated
to point to the new endpoint.
This dependencies between stack, can cause problems if not considered carefully.
If you now try to update the API endpoint(which is part of API stack)
when all the stacks are deployed you will get the following error:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Export ApiStack:ExportsOutputFnGetAtt-******
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cannot be deletedas it is in use by HostedZoneStack
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The issue is that the Hosted Zone stack is using the referenced endpoint
from ApiStack and without deleting the hosted zone you cannot delete the reference.&lt;/p>
&lt;p>You have two solutions to either destroy them both or &lt;a href="https://github.com/aws/aws-cdk/tree/main/packages/aws-cdk-lib#removing-automatic-cross-stack-references">do a 2 phase deployment&lt;/a>.
Although the 2 phase deployment always works it&amp;rsquo;s manual work.
It&amp;rsquo;s fine for a database migration but this should not be something to do every week.&lt;/p>
&lt;p>&lt;em>Solution to prevent the issue&lt;/em>:
&lt;strong>Document&lt;/strong> not changing parts in your CDK app.
Our assumption is that our API endpoint is not going to change frequently,
otherwise we are just deploying stacks together all the time.&lt;/p>
&lt;p>Another solution is to use parameter store to reference these dependencies.
In this method you can change anything since CDK does not know about your dependencies.
The downside of this method is that you have to manage dependencies now,
actually you are now the compiler :D.&lt;/p>
&lt;p>I would not recommend this method Because you are loosing the type checks,
like &lt;code>any&lt;/code> in a typed language.&lt;/p>
&lt;p>It&amp;rsquo;s a solution where you want to share resources between multiple CDK apps where
you can&amp;rsquo;t pass the objects.
For example if you are referencing DB name in applications as env vars,
it&amp;rsquo;s better to save the DB name in parameter store and retrieve in runtime.
Because that resource can be deployed multiple times but your app does not need
to be redeployed.&lt;/p>
&lt;p>Now Let me give you a &lt;strong>Bad&lt;/strong> splitting example:&lt;/p>
&lt;p>Imagine we have a EC2 with an application load balancer.
The EC2 id must be set in load balancer to route the traffic.&lt;/p>
&lt;p>If we try to separate these into load balancer and app stacks,
when ever we want to redeploy the EC2 the other stack must be destroyed and redeployed.&lt;/p>
&lt;h3 class="heading" id="remove-security-group-dependencies">
Remove Security Group dependencies
&lt;a class="anchor" href="#remove-security-group-dependencies">#&lt;/a>
&lt;/h3>
&lt;p>A common dependency between stacks is the security group rules.
For example we have a database with and we want our EC2 to access it.
One solution could be:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// DB Stack
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">dbInstance&lt;/span> &lt;span style="color:#f92672">=&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// App Stack
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">dbInstance&lt;/span>.&lt;span style="color:#a6e22e">connections&lt;/span>.&lt;span style="color:#a6e22e">allowFrom&lt;/span>(&lt;span style="color:#a6e22e">ec2Instance&lt;/span>, &lt;span style="color:#a6e22e">ec2&lt;/span>.&lt;span style="color:#a6e22e">Port&lt;/span>.&lt;span style="color:#a6e22e">tcp&lt;/span>(&lt;span style="color:#ae81ff">5432&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But in this code DB stacks depends on the EC2 instance which can change.
Is there a way to make our database stack completely independent?&lt;/p>
&lt;p>Surprisingly you can use the dependency inversion principle:&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Low level policies should depend upon high level policies.&lt;/em>&lt;/p>&lt;/blockquote>
&lt;p>How can we make the application dependent on database in this case?
We can just flip the dependency.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// DB stack
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">dbInstance&lt;/span> &lt;span style="color:#f92672">=&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// App stack
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Ec2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">ec2&lt;/span>.&lt;span style="color:#a6e22e">Instance&lt;/span>(...)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Ec2&lt;/span>.&lt;span style="color:#a6e22e">connections&lt;/span>.&lt;span style="color:#a6e22e">allowTo&lt;/span>(&lt;span style="color:#a6e22e">Db&lt;/span>, ...)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this method your database is not aware of what resources are connected to it.
You made it a high level policy and other services are now aware of how to connect.&lt;/p>
&lt;h3 class="heading" id="remove-unnecessary-dependencies">
Remove unnecessary dependencies
&lt;a class="anchor" href="#remove-unnecessary-dependencies">#&lt;/a>
&lt;/h3>
&lt;p>Removing redundant dependencies reduces the overhead of managing them between stacks.
The security group was an example of how to do this.
Important lesson here is to understand how each line of
CDK is connecting your resources together.&lt;/p>
&lt;h2 class="heading" id="conclusion">
Conclusion
&lt;a class="anchor" href="#conclusion">#&lt;/a>
&lt;/h2>
&lt;p>Knowing how to split stacks is an art of managing dependencies.
When I first started to do it before knowing these topics, I ran into
issues I did not except and it helped me see the problem from a different aspect.
It&amp;rsquo;s not only about separating code but it&amp;rsquo;s about which resources should be grouped.&lt;/p>
&lt;p>I hope knowing this will help you avoiding this common pitfall.&lt;/p></description></item><item><title>Planning My Day</title><link>https://glyphack.com/planning-my-day/</link><pubDate>Wed, 07 Sep 2022 23:22:58 +0430</pubDate><guid>https://glyphack.com/planning-my-day/</guid><description>&lt;p>A while back I started planning my day before starting my day. I did this because I wanted to have a morning routine for myself,
but most of the time I found myself starting to pickup something to read or already replying to emails or slack. So by setting this
rule for myself to write down everything I want to do for the day first, helped to overcome this habit.&lt;/p>
&lt;p>Since then I found some improvements that can be done along with writing down the plan for the day. I&amp;rsquo;ll list my observation here, and my
goal is to implement these in the &lt;a href="https://github.com/Glyphack/koal">koal&lt;/a> app, as a default way of planning the day.&lt;/p>
&lt;h2 class="heading" id="choosing-what-to-do">
Choosing what to do
&lt;a class="anchor" href="#choosing-what-to-do">#&lt;/a>
&lt;/h2>
&lt;p>I have a long list of things I want to try/learn/experiment; and the list continues to expand everyday when I come across new things.
So in this situation my mind is full of different things to do, I cannot concentrate on one thing and finish it in a reasonable time.
Sometimes I saw that It&amp;rsquo;s been months that I&amp;rsquo;m working on something without making much progress and that was because I did not spend
time continuously to finish it.&lt;/p>
&lt;p>One thing that I think is related to this is this quote from &lt;a href="https://jamesclear.com/atomic-habits">atomic habits book&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Success is the product of daily habits—not once-in-a-lifetime transformations.&lt;/p>&lt;/blockquote>
&lt;p>It tries to say that you don&amp;rsquo;t reach your goals in a single step, you create daily habits based on them.
I borrowed this definition of success and tried to use it in my planning.&lt;/p>
&lt;p>This is the first thing I realized I have to do:
&lt;strong>If I want to do something I have to do it everyday, no matter how small is my progress is&lt;/strong>&lt;/p>
&lt;p>This helps a lot on different aspects of reaching my goal.
When I do my work continuously I&amp;rsquo;m always aware of where I left off,
I could more easily get in the zone, and needed less time to get focused.
This method can be very powerful even if you &lt;a href="https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924">only spend 10 minutes a day on something&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>How, exactly, did I manage to write a book in this short a time? I had one simple rule: I had to work on the book for just ten minutes, every day, no excuses. Ever.&lt;/p>
&lt;p>The original reason I tracked my time, in fact, was that I wanted to motivate myself by having a streak of days, and I figured that instead of just tallying check marks, I’d write down exactly how long I spent. It worked — I never missed a day.&lt;/p>&lt;/blockquote>
&lt;p>A challenge that comes with this approach is that I no longer can have so many ongoing work at once,
I decided to re plan my goals so they are:&lt;/p>
&lt;ul>
&lt;li>more specific: instead of saying I want to learn a tool I said I want to use the tool do make something.&lt;/li>
&lt;li>split into approachable goals: an example was that I wanted to get 1800 chess ELO, but this journey is not a single step, in each ELO range you need to focus on something and get better at it. So it split this into two parts of getting to 1400 and the getting to 1800&lt;/li>
&lt;/ul>
&lt;p>Then I picked only 5 or 6 goals at each point, I had to have enough time for all of them to make continuous progress on each.
Each day I started by browsing my current work, thinking what is the next small step I can take today and write it down in Koal.&lt;/p>
&lt;h2 class="heading" id="repetitive-tasks">
Repetitive tasks
&lt;a class="anchor" href="#repetitive-tasks">#&lt;/a>
&lt;/h2>
&lt;p>There are things I want to do everyday, like my morning routine.
Having a prepared list of these kind of work saves a lot of time,
because I don&amp;rsquo;t have to remember, and write them down everyday.
Even some of my goals consists of repetitive tasks,
like for chess I wanted to play a game everyday.&lt;/p>
&lt;p>Writing down this list also helped me with creating a habit of doing these things, For example when I
added meditation to this list, only by seeing this everyday I did not forgot about it.&lt;/p>
&lt;p>For me this list is very simple, I just wrote down things I have to do. There are some things that I don&amp;rsquo;t
do everyday but I still listed them only to not forget to do them.&lt;/p>
&lt;h2 class="heading" id="being-focused-on-tasks">
Being focused on tasks
&lt;a class="anchor" href="#being-focused-on-tasks">#&lt;/a>
&lt;/h2>
&lt;p>I continued with my approach for some time and realized there are somethings I need to do to improve my focus.&lt;/p>
&lt;p>Sometimes I tried to do multi tasking because I had number of small things to do, So when I was waiting for something to finish
I started writing down an email, and if it was finished I got back to it and then I lost my focus.&lt;/p>
&lt;p>Sometimes I was not even waiting for something but I just jumped to a different thing, because I was not focused.
Some tasks require you to be focused for the whole time to finish it, like writing a blog post or writing code,
In these cases I could not do something that steals my focus like browsing social media while I&amp;rsquo;m waiting.
But there are things that do not steal the focus, like pouring a cup of tea or doing the dishes.&lt;/p>
&lt;p>I slightly changed my habit to only do these kind of tasks that do not require a context switch,
while I&amp;rsquo;m blocked on my current task.&lt;/p>
&lt;p>How to change this habit?&lt;/p>
&lt;ul>
&lt;li>Try to have a list of things you can do while waiting.&lt;/li>
&lt;li>Use a pomodoro or a time tracker, this helps to focus because it only requires a short amount of focused work.&lt;/li>
&lt;li>Rewarding myself after the focus time, &lt;a href="https://www.frugalconfessions.com/save-me-money/reward-yourself/">this list&lt;/a> is a good one if you want to get started&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="having-an-uninterrupted-focus-time">
Having an uninterrupted focus time
&lt;a class="anchor" href="#having-an-uninterrupted-focus-time">#&lt;/a>
&lt;/h2>
&lt;p>Not all of the day I have the same productivity and energy, I found that I achieve the most when I&amp;rsquo;m working uninterrupted.
To leverage this, I started to mark a time window of 2-3 hours for doing focused and uninterrupted work.
This is really important to set right, in different days I have meetings at different hours and some days I have a busy morning,
and some days I have a busy afternoon.
I try to find a time window that I can block for myself to focus on important things I have to do.&lt;/p>
&lt;p>In the planning I also write down when is this uninterrupted focus time, when the time comes I put my phone away and minimize
the chance of loosing focus.&lt;/p>
&lt;h2 class="heading" id="choosing-one-thing-to-complete-everyday">
Choosing one thing to complete everyday
&lt;a class="anchor" href="#choosing-one-thing-to-complete-everyday">#&lt;/a>
&lt;/h2>
&lt;p>While I have a list of things to do, I know what is the most important one for today to complete.
This can be something from my work that I want to get done, or reaching a milestone in one of the goals.
This task is very important because it brings me joy and motivation when I finish it.&lt;/p>
&lt;p>I mark the important task of the day and try to start that one during my uninterrupted time. This helps me to make sure I can get it done.
The other benefit is that every few days I reach an important milestone in my goals or work,
Which means that I&amp;rsquo;m one step closer to finish it.
This task does not have to be a serious deadline or anything, it&amp;rsquo;s just a thing I decide on.
For example if I&amp;rsquo;m working on a new feature the important part is to sending it for review.
When I know today is the day for it to be done I use my most productive time to finish it.&lt;/p>
&lt;p>When I started to mark the important task to be done for a day,
I made a lot more progress in my goals. Because I was finishing these important milestones when it was needed for progress.
It&amp;rsquo;s like there are some parts of each goal which require a lot of effort to get it done.
If I don&amp;rsquo;t put some serious time on my goals from time to time I cannot make significant progress.&lt;/p>
&lt;h2 class="heading" id="writing-down-detailed-to-dos">
Writing down detailed to-dos
&lt;a class="anchor" href="#writing-down-detailed-to-dos">#&lt;/a>
&lt;/h2>
&lt;p>While to-do list should be short I found it useful to add what I need for the task to be done in the task.
When I add an entry of reading the article about something I attach the link there.
If I want to check the to-do search the google for the article and read it I might encounter
things that can steal my focus along the way, like finding another interesting article in the search result.&lt;/p>
&lt;h2 class="heading" id="leverage-boredom">
Leverage Boredom
&lt;a class="anchor" href="#leverage-boredom">#&lt;/a>
&lt;/h2>
&lt;p>People &lt;a href="https://www.science.org/content/article/people-would-rather-be-electrically-shocked-left-alone-their-thoughts">do anything&lt;/a> to escape boredom.&lt;/p>
&lt;p>When I plan my day I try to plan as much as I can so I don&amp;rsquo;t do anything outside the planning, in this way I either have to do the stuff
I planned for or do nothing. This helps to avoid procrastination.&lt;/p>
&lt;p>This is very hard to get write, I sometimes forget some chore tasks or something unplanned happens, but the good part is most of the day
I&amp;rsquo;m facing my plan and can&amp;rsquo;t do other things before complete the tasks.&lt;/p>
&lt;h2 class="heading" id="rewarding">
Rewarding
&lt;a class="anchor" href="#rewarding">#&lt;/a>
&lt;/h2>
&lt;p>Most of my motivation to do something comes from either the joy of doing the thing or the joy of finishing it.
For some goals(specially the ones that takes more time) it&amp;rsquo;s hard to have these two.
For example if your goal is to study for something for 3-4 months it&amp;rsquo;s gonna be very hard to keep the motivation.
I wish I would know sooner that I have to reward myself for doing my tasks, and this really works well with these kind of tasks.&lt;/p>
&lt;p>I try to reward myself after doing a couple of tasks, this can be a video game or watching a YouTube video,
but there are also other resources to &lt;a href="https://www.frugalconfessions.com/save-me-money/reward-yourself/">reward yourself without money&lt;/a>.
One other effective method is to reward yourself with money after doing something. For example I can put aside 10$ each
time I do X and use that money to buy something I like.
When I started streaming my rule was that I won&amp;rsquo;t buy fancy mic/webcam stuff until I create videos for certain amount of time.&lt;/p>
&lt;p>One way to apply this can be by having a list of rewards beside items planned for the day.&lt;/p>
&lt;h2 class="heading" id="conclusion">
Conclusion
&lt;a class="anchor" href="#conclusion">#&lt;/a>
&lt;/h2>
&lt;p>Using this approach and planning the tasks in the beginning of the day, helped me a lot on being more organized, and following
my goals. To summarize the full list into steps for planning the day:&lt;/p>
&lt;ol>
&lt;li>Going through list of current ongoing projects and see list what to do next for each&lt;/li>
&lt;li>Going over repetitive tasks and add them to my current list&lt;/li>
&lt;li>Setting my uninterrupted focus time for the day&lt;/li>
&lt;li>Getting started on the tasks, setting pomodoro timer&lt;/li>
&lt;li>After some tasks checking my reward lists and pick up one to enjoy&lt;/li>
&lt;li>If anything is left from the work which I know have to pick up tomorrow I write it down in a note.&lt;/li>
&lt;/ol>
&lt;p>I&amp;rsquo;ll try to update the list if I find more useful tricks but for now this is it. Hope you enjoyed it.&lt;/p></description></item><item><title>Stateful Stream Processing</title><link>https://glyphack.com/stateful-stream-processing/</link><pubDate>Mon, 15 Aug 2022 08:53:57 +0430</pubDate><guid>https://glyphack.com/stateful-stream-processing/</guid><description>&lt;p>A pattern that I have recently seen in a project is data replication through
real-time stream processing. This pattern happens when a company has all of
it&amp;rsquo;s data stored on centralized databases and applications access this data,
this means that two example services like &amp;ldquo;search&amp;rdquo; and &amp;ldquo;product catalog&amp;rdquo; are
depending on the same data.
In this situation some services cannot function by only request the data
through API, they need a snapshot of the data.
Do address this requirement the real-time data replication solutions come
handy.
With this approach we need a event driven architecture to handle incoming data
and apply required transformations.
All stream processing frameworks such as Kafka Streams support doing stream
joins to denormalize the data and while they offer very straightforward
performant solutions the join support is limited in some cases.&lt;/p>
&lt;h2 class="heading" id="streaming-changes-from-database">
Streaming Changes from Database
&lt;a class="anchor" href="#streaming-changes-from-database">#&lt;/a>
&lt;/h2>
&lt;p>We can start by implementing a change data capture system with a tool like
Debizium and Apache Kafka. An example architecture is the following picture:
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="streaming-database-changes" src="https://glyphack.com/streaming-database-changes.excalidraw.png" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;p>Now the downstream services can use the data product topic coming out of Kafka.
Let&amp;rsquo;s focus on how to implement the stream processing component.&lt;/p>
&lt;p>As discussed earlier this use case is very suitable for a tool like Kafka
Streams but if we have requirements to join data like:&lt;/p>
&lt;ul>
&lt;li>Join on primary and non primary keys&lt;/li>
&lt;li>Having no time window on when the join can occur&lt;/li>
&lt;li>Support denormalizing database relations&lt;/li>
&lt;/ul>
&lt;p>Then you cannot utilize full power of Kafka streams.
Because Kafka streams joins the data on record key then all records that are
going to be joined need to be published with the same key.
Now if a stream needs to be joined with multiple streams then it has to bNnne
published in multiple topics with different keys.
This approach will result in the following diagram&lt;/p>
&lt;p>
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="reparition-data-join" src="https://glyphack.com/repartion-data-to-join.excalidraw.png" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;p>This can lead to a very expensive solution both in terms of cost and
development.&lt;/p>
&lt;h2 class="heading" id="problem-and-possible-solutions">
Problem and Possible Solutions
&lt;a class="anchor" href="#problem-and-possible-solutions">#&lt;/a>
&lt;/h2>
&lt;p>Now that we know the pattern and the limit let&amp;rsquo;s try to solve it with for an
example business.&lt;/p>
&lt;p>My goal is to find a solution which is easy to implement not the fastest one
, but a balance between easy and cost efficient and low latency solutions.
It&amp;rsquo;s also possible to come up with a range of different configurations and package them
as solutions so different users can choose different configurations.&lt;/p>
&lt;p>Imagine you are doing this for Github, they want to extract all user data and
it&amp;rsquo;s interactions with the platform into an easy to use data structure named
&lt;code>UserProfile&lt;/code>.&lt;/p>
&lt;p>Let&amp;rsquo;s start by giving a very simple example data model:
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="github-example-data-model" src="https://glyphack.com/github-example-data-model.excalidraw.png" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;p>With following definitions:&lt;/p>
&lt;p>&lt;strong>User&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>id&lt;/li>
&lt;li>email&lt;/li>
&lt;li>username&lt;/li>
&lt;li>registered_at&lt;/li>
&lt;/ul>
&lt;p>Pk: email&lt;/p>
&lt;p>&lt;strong>Repo&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>name&lt;/li>
&lt;li>owner&lt;/li>
&lt;li>description&lt;/li>
&lt;li>star_count&lt;/li>
&lt;li>fork_count&lt;/li>
&lt;li>created_at&lt;/li>
&lt;li>updated_at&lt;/li>
&lt;/ul>
&lt;p>Pk: (owner,name)&lt;/p>
&lt;p>&lt;strong>Pull Request&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>title&lt;/li>
&lt;li>repo&lt;/li>
&lt;li>repo_owner&lt;/li>
&lt;li>index&lt;/li>
&lt;li>author&lt;/li>
&lt;li>status&lt;/li>
&lt;li>created_at&lt;/li>
&lt;/ul>
&lt;p>Pk: (repo,repo_owner,index)&lt;/p>
&lt;p>&lt;strong>Star&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>username&lt;/li>
&lt;li>repo_name&lt;/li>
&lt;li>repo_owner&lt;/li>
&lt;li>created_at&lt;/li>
&lt;/ul>
&lt;p>Pk: (username, repo_name, repo_owner)&lt;/p>
&lt;p>&lt;strong>Payment Info&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>id&lt;/li>
&lt;li>user_id&lt;/li>
&lt;li>verified&lt;/li>
&lt;/ul>
&lt;p>Pk: id&lt;/p>
&lt;p>Now let&amp;rsquo;s say the &lt;code>UserProfile&lt;/code> is going to have the structure:&lt;/p>
&lt;p>&lt;strong>User Profile&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>email&lt;/li>
&lt;li>username&lt;/li>
&lt;li>starred_repos (many to many rel)
&lt;ul>
&lt;li>repo&lt;/li>
&lt;li>description&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>pull_requests (one to many rel)
&lt;ul>
&lt;li>repo&lt;/li>
&lt;li>index&lt;/li>
&lt;li>title&lt;/li>
&lt;li>created_at&lt;/li>
&lt;li>status&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>payment_verified&lt;/li>
&lt;/ul>
&lt;p>In this case when we are consuming events form User, Pull Request and Star
table then we need to do join these streams and embed the pull request and
star information inside the &lt;code>UserProfile&lt;/code> output stream.
If we start by using message keys as join keys here to join User and Pull
Request streams then the Pull Request has to be published with &lt;code>author&lt;/code> field
as a key.
In case we need to create another data product for pull requests
data depends on the repo and index we need to create another stream.&lt;/p>
&lt;p>Before that let&amp;rsquo;s see what query join do we need to perform on these streams
to get the result.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-SQL" data-lang="SQL">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">select&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">from&lt;/span> users
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">left&lt;/span> &lt;span style="color:#66d9ef">outer&lt;/span> &lt;span style="color:#66d9ef">join&lt;/span> star
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">on&lt;/span> star.username &lt;span style="color:#f92672">=&lt;/span> username
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">left&lt;/span> &lt;span style="color:#66d9ef">outer&lt;/span> &lt;span style="color:#66d9ef">join&lt;/span> pull_request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">on&lt;/span> pull_request.author &lt;span style="color:#f92672">=&lt;/span> username
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">left&lt;/span> &lt;span style="color:#66d9ef">outer&lt;/span> &lt;span style="color:#66d9ef">join&lt;/span> payment_info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">on&lt;/span> payment_info.id &lt;span style="color:#f92672">=&lt;/span> id
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that in this query we only want to get a single record with &lt;code>UserProfile&lt;/code>
structure.
This means to embed all pull requests into record as a list, and add
payment_verified value as a single value.&lt;/p>
&lt;h2 class="heading" id="solutions">
Solutions
&lt;a class="anchor" href="#solutions">#&lt;/a>
&lt;/h2>
&lt;p>To give a solution I&amp;rsquo;m focusing on providing something that can work at huge
scale, imagine we are going to create a hundred data products so system should
make it very easy to onboard a new table.&lt;/p>
&lt;h3 class="heading" id="solution-1-using-rdbms">
Solution 1: Using RDBMS
&lt;a class="anchor" href="#solution-1-using-rdbms">#&lt;/a>
&lt;/h3>
&lt;p>I started with the idea of why not just moving all the computation on the database?
After all the SQL language has nice features to do these transformations.&lt;/p>
&lt;p>
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="rdbms-solution" src="https://glyphack.com/running-transformations-on-db.excalidraw.png" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;p>With this method we can have a generic application that reads streams and place
them in database under a table with the topic name.
So to onboard a new topic we have to feed this service two values:&lt;/p>
&lt;ul>
&lt;li>table name to insert data into&lt;/li>
&lt;li>table schema and mapping of event fields into table fields&lt;/li>
&lt;/ul>
&lt;p>After we insert the data in the database we
&lt;a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Lambda.html">trigger&lt;/a> a lambda function to run the SQL query, get the data and embed the joins into a single document and produce message to Kafka.&lt;/p>
&lt;p>This lambda function requires these inputs:&lt;/p>
&lt;ul>
&lt;li>a mapping from table names to SQL queries&lt;/li>
&lt;/ul>
&lt;p>After lambda is triggered it will lookup the mapping and run the SQL query. In our case it will get the user back with all matched pull request.
Now we need a custom logic in lambda to embed all the matched Pull Request
entities into &lt;code>UserInfo&lt;/code> message.&lt;/p>
&lt;h4 class="heading" id="benefits">
Benefits
&lt;a class="anchor" href="#benefits">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>Implementation is very generic&lt;/li>
&lt;li>We have all the capabilities of SQL to do the processing&lt;/li>
&lt;li>Each topic can be joined with any other topic with any valid SQL condition&lt;/li>
&lt;/ul>
&lt;h4 class="heading" id="drawbacks">
Drawbacks
&lt;a class="anchor" href="#drawbacks">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>The fact that we put all the computation on the database and specially join
queries will result in a huge amount of costs&lt;/li>
&lt;li>The architecture is not truly real-time, we should utilize indexes on
database to make sure query returns with low latency&lt;/li>
&lt;/ul>
&lt;h3 class="heading" id="solution-2-join-data-in-stream-processor">
Solution 2: Join Data In Stream Processor
&lt;a class="anchor" href="#solution-2-join-data-in-stream-processor">#&lt;/a>
&lt;/h3>
&lt;p>To attempt to fix the previous solution drawbacks, a reasonable way can be moving the join logic to stream processor application.&lt;/p>
&lt;p>In this case the stream processor has a data store named state store that is used to keep track of latests state of records consumed.
To get a better understand of how the state store works, Imagine the scenario:&lt;/p>
&lt;ul>
&lt;li>A new pull request is created with information &lt;code>{ title: &amp;quot;PR&amp;quot;, status: &amp;quot;Open&amp;quot;, ...}&lt;/code>&lt;/li>
&lt;li>Stream processor consumes the message and insert it into the state store&lt;/li>
&lt;li>The pull request is updated and it&amp;rsquo;s closed so another event is emitted with body &lt;code>{ title: &amp;quot;PR&amp;quot;, status: &amp;quot;Closed&amp;quot;, ...}&lt;/code>&lt;/li>
&lt;li>Stream processor consumes the new event updates the previous record in the state store using the primary key of the pull request.&lt;/li>
&lt;/ul>
&lt;p>So at any given point the state store has latest state of an entity.&lt;/p>
&lt;p>We can leverage this state store to join events as they are consumed by creating 3 tables: &lt;code>pull_request&lt;/code>, &lt;code>user&lt;/code>, &lt;code>user_info&lt;/code>.&lt;/p>
&lt;p>
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="join data in processor" src="https://glyphack.com/join-in-processor-rdbms.excalidraw.png" >
&lt;/div>
&lt;/figure>
This is how the example procedure looks like:&lt;/p>
&lt;ol>
&lt;li>When a pull request event is consumed and inserted into a intermediate table&lt;/li>
&lt;li>When a user event is consumed, application queries the pull request table to check if there&amp;rsquo;s any matched records with the join criteria. If there&amp;rsquo;s any it creates the user_info message and saves it into database.&lt;/li>
&lt;li>Finally application also saves the &lt;code>user&lt;/code> message in step 2 into database in case there&amp;rsquo;s other joins for user table.&lt;/li>
&lt;/ol>
&lt;p>Or in a case that the order of incoming events is not guaranteed when the user event comes in application joins it with the pull request table and creates the user_info message.
Here also based on the join type we either publish a new &lt;code>user_info&lt;/code> message or not, in this case this is a left join where the left is user entity:&lt;/p>
&lt;ol>
&lt;li>If user event is consumed even if it do not match any pull request the &lt;code>user_info&lt;/code> message must be published.&lt;/li>
&lt;li>If pull_request event is consumed &lt;code>user_info&lt;/code> message will only be published when pull request matches a user record, then the application updates the corresponding &lt;code>user_info&lt;/code> message with the new pull request and publishes the message again.&lt;/li>
&lt;/ol>
&lt;h4 class="heading" id="benefits-1">
Benefits
&lt;a class="anchor" href="#benefits-1">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>Ability to execute all SQL queries&lt;/li>
&lt;li>Can do complex joins&lt;/li>
&lt;li>Can index database on the fields that are queried for joins to decrease the processing time&lt;/li>
&lt;/ul>
&lt;h4 class="heading" id="drawbacks-1">
Drawbacks
&lt;a class="anchor" href="#drawbacks-1">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>The RDBMS database is used for a lot of read/write operations which can become slow and expensive&lt;/li>
&lt;li>The join logic is split in processing events from left and right side of the join.&lt;/li>
&lt;/ul>
&lt;h3 class="heading" id="using-another-database-as-state-store">
Using Another Database as State Store
&lt;a class="anchor" href="#using-another-database-as-state-store">#&lt;/a>
&lt;/h3>
&lt;p>Following the idea of previous solution to move the join logic to application, we can make an adjustment to DB choice.
The pattern is inserting a record but retrieving it only by specific fields.
Usually key value store databases provide fast read and writes with this limitation.&lt;/p>
&lt;p>Let&amp;rsquo;s say like the previous method processor consumes events, and saves them inside a KV store like dynamoDB.
Now it&amp;rsquo;s important to specify a unique key for records so they don&amp;rsquo;t overwrite each other, primary keys are:&lt;/p>
&lt;ol>
&lt;li>User: email&lt;/li>
&lt;li>Pull request: (repo,repo_owner,index)&lt;/li>
&lt;li>Payment Info: id&lt;/li>
&lt;/ol>
&lt;p>When the application consumes a user event it&amp;rsquo;s required to join this field with pull requests that have the same username.
This is not possible since our hash key is the PK, which is email in this case.&lt;/p>
&lt;p>Now we use some auxiliary tables to make this possible.
We create a table called &lt;code>join_user_pr&lt;/code> with key being the join condition value(username) and value be the primary key
of the user entity with that username, And similarly a table called &lt;code>join_pr_user&lt;/code> for when joining an incoming PR event
with User.&lt;/p>
&lt;p>Application can use this table as a lookup table to do joins.
An example when &lt;code>user&lt;/code> event is coming in:&lt;/p>
&lt;ol>
&lt;li>Save user in &lt;code>Users&lt;/code> table and insert record &lt;code>{user.username: user.email}&lt;/code> into &lt;code>join_pr_user&lt;/code>&lt;/li>
&lt;li>Query the &lt;code>join_user_pr&lt;/code> with the username to get back primary keys of PRs which has this username.&lt;/li>
&lt;li>Query the &lt;code>pull_reqest&lt;/code> table with primary key of PR and construct the &lt;code>user_info&lt;/code> message and publish&lt;/li>
&lt;/ol>
&lt;p>When &lt;code>pull_request&lt;/code> event comes in:&lt;/p>
&lt;ol>
&lt;li>Save pull_request event in&lt;code>pull_request&lt;/code> table and insert record &lt;code>{pull_request.pk: pull_request.username}&lt;/code> into &lt;code>join_user_pr&lt;/code>.&lt;/li>
&lt;li>Query the &lt;code>join_pr_user&lt;/code> table with pull_request username to get back user email for that PR.&lt;/li>
&lt;li>Query user table with email and construct the &lt;code>user_info&lt;/code> message and publish&lt;/li>
&lt;/ol>
&lt;p>Since DynamoDB(and other KV stores) provide a fast way to read and write the process time is not going to grow in large
volume of data.
But we are creating duplicate data to be able to execute these queries, this can also be solved with
Secondary Indexes in DynamoDB. Secondary Indexes can be fine for small number of joins but if we want to join the User
with 20 different tables the cost of User table with 20 SI will be high and more than having the auxiliary tables.&lt;/p>
&lt;h4 class="heading" id="benefits-2">
Benefits
&lt;a class="anchor" href="#benefits-2">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>Can support large volume of data&lt;/li>
&lt;li>Application can support multiple joins on a single record with low process time.(DynamoDB can provide 10ms read times)&lt;/li>
&lt;/ul>
&lt;h4 class="heading" id="drawbacks-2">
Drawbacks
&lt;a class="anchor" href="#drawbacks-2">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>Data is duplicated&lt;/li>
&lt;li>Coordination of what tables and fields to query makes the application complex, the given example has 6 steps for a single join&lt;/li>
&lt;/ul>
&lt;h3 class="heading" id="leveraging-the-dynamodb-global-secondary-indexes">
Leveraging the DynamoDB Global Secondary Indexes
&lt;a class="anchor" href="#leveraging-the-dynamodb-global-secondary-indexes">#&lt;/a>
&lt;/h3>
&lt;p>The previous solution was really close to achieve a very good result but still the 1 lookup and 1 query per join statement can cause
long process time in some cases.
Now we&amp;rsquo;ll try to exploit another feature of DynamoDB, Global Secondary Indexes, to solve this problem.&lt;/p>
&lt;p>Before that let&amp;rsquo;s state what we exactly need from state store:&lt;/p>
&lt;ul>
&lt;li>Being able to get all records of a topic with given join condition, for example all pull_requests with a particular username&lt;/li>
&lt;/ul>
&lt;p>We can use a single table for all the records to make this join possible and easier.
Imagine we have a table with a composite primary key with following definition:&lt;/p>
&lt;ul>
&lt;li>Partition Key: TABLE#{table_name}&lt;/li>
&lt;li>Sort Key: entity PK&lt;/li>
&lt;/ul>
&lt;p>For example we insert all &lt;code>user&lt;/code> records in the table with Partition Key of &lt;code>TABLE#users&lt;/code> and Sort key of &lt;code>user.email&lt;/code>,
The same happens for pull_request as well(we can concatenate multiple columns for the Sort Key).&lt;/p>
&lt;p>Now how can we join a user with all of it&amp;rsquo;s pull_requests? Using a Global Secondary Index.
Let&amp;rsquo;s say we create a column called GSI_1(Global Secondary Index column names can be meaningless and be reused in DynamoDB),
We are going to use this column in both &lt;code>user&lt;/code> and &lt;code>pull_request&lt;/code> entities.
For users we insert the username value in the GSI_1 and for pull requests we insert the username in GSI_1.&lt;/p>
&lt;p>When a &lt;code>user&lt;/code> event comes in the application will:&lt;/p>
&lt;ol>
&lt;li>Insert it in the &lt;code>user&lt;/code> table and fills the GSI values according to joins specified.&lt;/li>
&lt;li>Query the &lt;code>pull_request&lt;/code> table with the &lt;code>GSI_1=={user.username}&lt;/code> condition, This will return all the PRs for that username&lt;/li>
&lt;li>Create the &lt;code>user_info&lt;/code> message and publish&lt;/li>
&lt;/ol>
&lt;p>When a &lt;code>pull_request&lt;/code> event comes in the application will do the same things again the GSI_1 will be used and PR will be matched
with the correct user record.&lt;/p>
&lt;p>Now the problem will be managing the GSI fields we create. We need to create GSI fields for every single join that an entity has.
In our example if we want to join the user record with payment info we have to create a new GSI_2 field for the user and save the &lt;code>user.id&lt;/code> in that field.
But for the &lt;code>payment_info&lt;/code> record we can insert the &lt;code>user.id&lt;/code> in the GSI_1 field because the only join Payment Info has is with the User.
This allows us to reuse the GSI field for multiple purpose so we don&amp;rsquo;t hit the 20 GSI limit unless we have a table with 20 different joins.
Also we now can get back all pull requests for a user with a single query, this will enable us to perform multiple joins without loosing performance.&lt;/p>
&lt;p>To manage the GSI fields and what they are used for in each record we need another storage to save this information.
We can have a small PostgreSQL instance that knows for example in User records the GSI_1 field is used to join with Pull Request entity.&lt;/p></description></item><item><title>How to Setup 2 Factor Authentication Code Generator on PC</title><link>https://glyphack.com/2fa-pc/</link><pubDate>Thu, 17 Mar 2022 23:19:14 +0330</pubDate><guid>https://glyphack.com/2fa-pc/</guid><description>&lt;p>I use 2 factor authentication with almost all of my accounts, the only downside of this is that when I need to access something frequently or automate some task I have to manually enter this code from my phone.&lt;/p>
&lt;p>So I searched a bit and found these tools to make this process easier, I imported 2fa keys to my laptop and can generate keys with a command so I can copy the code and also the command can be used in automated tasks. Note that in this way anyone with access to your laptop has access to 2fa codes too.&lt;/p>
&lt;h2 class="heading" id="setup-2fa-code-on-your-machine">
Setup 2FA code on your machine
&lt;a class="anchor" href="#setup-2fa-code-on-your-machine">#&lt;/a>
&lt;/h2>
&lt;p>Here&amp;rsquo;s the process:&lt;/p>
&lt;h3 class="heading" id="1-export-2fa-accounts-from-google-authenticator">
1. Export 2FA Accounts From Google Authenticator
&lt;a class="anchor" href="#1-export-2fa-accounts-from-google-authenticator">#&lt;/a>
&lt;/h3>
&lt;p>You probably have already setup your accounts with google authenticator. You can use the &lt;a href="https://support.google.com/accounts/thread/107807857/how-to-export-2fa-codes-from-google-authenticator?hl=en">export option&lt;/a> to export the accounts you need. Export will be a qr code so you need a way to convert it to text. On mac I did it with &lt;a href="https://apps.apple.com/us/app/qr-journal/id483820530?mt=12">qr journal&lt;/a> .&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install --cask qr-journal
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 class="heading" id="2-extract-account-secret-key">
2. Extract Account Secret Key
&lt;a class="anchor" href="#2-extract-account-secret-key">#&lt;/a>
&lt;/h3>
&lt;p>Once you have the qr code as text you can use &lt;a href="https://github.com/scito/extract_otp_secret_keys">extract_otp_secret_keys&lt;/a> to read the text and get the secret strings. save exported qr code in a text file and read it with like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gh repo clone scito/extract_otp_secret_keys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python extract_otp_secret_keys/extract_otp_secret_keys.py -p exported.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will output the final secret key for accounts.&lt;/p>
&lt;h3 class="heading" id="3-install-a-2fa-code-generator">
3. Install a 2FA Code Generator
&lt;a class="anchor" href="#3-install-a-2fa-code-generator">#&lt;/a>
&lt;/h3>
&lt;p>I used the &lt;a href="https://github.com/rsc/2fa">2fa&lt;/a> app to import accounts in terminal.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go install rsc.io/2fa@latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2fa -add account_name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that you have this you can use the command &lt;code>2fa&lt;/code> to get all of your accounts 2FA codes or &lt;code>2fa account_name&lt;/code> to get the 2FA code for a specific account, the latter is useful when writing scripts.&lt;/p></description></item><item><title>Fixing One Bug Leads to Another</title><link>https://glyphack.com/fixing-one-bug-leads-to-another/</link><pubDate>Sat, 05 Feb 2022 09:49:50 +0330</pubDate><guid>https://glyphack.com/fixing-one-bug-leads-to-another/</guid><description>&lt;p>One thing that frequently frustrates me when I&amp;rsquo;m working is sloppy work. I&amp;rsquo;m using the word &amp;ldquo;work&amp;rdquo; here because it can refer to anything, but here I&amp;rsquo;ll talk about sloppy code.&lt;/p>
&lt;p>Recently, someone from my previous team asked me to help them fix an issue on a system while the maintainer was not available. At first, I discussed this with my team lead and didn&amp;rsquo;t get involved in the issue, but after a week, the problem was still there, and they asked me for my help again. So I finally decided to give it a try.&lt;/p>
&lt;h2 class="heading" id="the-story">
The story
&lt;a class="anchor" href="#the-story">#&lt;/a>
&lt;/h2>
&lt;p>The issue was that one of the microservices was consuming messages twice from a Kafka topic. Kafka client consumes a message in this order:&lt;/p>
&lt;ol>
&lt;li>Read a new message&lt;/li>
&lt;li>Process the message&lt;/li>
&lt;li>Commit the message
Working with at least one delivery model where each message is delivered to you at least once, duplicates might occur in your system when a message is delivered twice or more.
An example scenario of a duplicate message problem that can occur here is when your application reads the message, updates some business entity in the database, and fails before committing the message. You would see the message coming back again.&lt;/li>
&lt;/ol>
&lt;p>To overcome this issue, the application has to make the consumer idempotent with &lt;a href="https://chrisrichardson.net/post/microservices/patterns/2020/10/16/idempotent-consumer.html#:~:text=Specifically%2C%20if%20Apache%20Kafka%20invokes,execute%20the%20database%20transaction%20repeatedly">idempotent consumer pattern&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Read message
Begin database transaction
INSERT into PROCESSED_MESSAGE (subscriberId, ID) VALUES(subscriberId, message.ID)
Update one or more business objects
Commit transaction
Acknowledge message
After starting the database transaction, the message handler inserts the message’s ID into the &lt;code>PROCESSED_MESSAGE&lt;/code> table. Since the &lt;code>(subscriberId, messageID)&lt;/code> is the &lt;code>PROCESSED_MESSAGE&lt;/code> table’s primary key the &lt;code>INSERT&lt;/code> will fail if the message has been processed successfully. The message handler can then abort the transaction and acknowledge the message.&lt;/p>&lt;/blockquote>
&lt;p>So I checked if the code was idempotent or not, and hopefully, it had. With several problems:&lt;/p>
&lt;p>&lt;strong>Sloppy code&lt;/strong>,
The steps were in the wrong order. The insert in &lt;code>PROCESSED_MESSAGE&lt;/code> was the last step. It should be the first action because you want to assume the message is processed, and if any error occurs, the transaction will fail. The insert will be reverted, so you don&amp;rsquo;t have to manually decide where to mark the message as read in the code process flow.
Also, The &lt;code>messageID&lt;/code> was not unique, so two concurrent inserts of the same message would not cause any issue, while it should. It&amp;rsquo;s always better to crash than to be inconsistent; the latter will take much more time to find out and recover.&lt;/p>
&lt;p>&lt;strong>Not knowing about the business domain of your application&lt;/strong>,
The third problem; the message ID was generated by the whole body of the message to string, literally a TextField in PostgresSQL for deduplication and searching! While it was inefficient and expensive to use your database for matching full text for deduplication. It&amp;rsquo;s also not working if you change the format of the same message(like updating the schema).
I can guess that this happens because developers can be far from the business domain, but you should always understand why you are writing a piece of code. By asking questions like what unique values are we looking for in the message? From the product manager, you can use this information to do the deduplication for that use case.&lt;/p>
&lt;p>I fixed the algorithm and changed the table schema to have a better deduplication key by discussing this with business people to discover the unique values in this message. Everything was done, and I started testing the code; while I was doing that, I checked the logs and realized that the application was consuming messages from 2 weeks ago. This should not happen when we are committing the messages. I dug more into the issue and found out the duplication bug was part of a more significant issue. Kafka consumer was not committing the messages correctly, so it caused duplicates even after a successful message process. And even worse than that, the application was not failing if the commit failed; it silently ignored the issue. Until that moment, the deduplication logic was not only deduplication but serving as Kafka offset manager!&lt;/p>
&lt;p>After realizing that it was not easy to fix and needed proper investigation, I handed it to the original maintainer. But I did investigate why this issue was happening just for my curiosity and ended up with this hypothesis.
The issue was that Kafka has a &lt;a href="https://docs.confluent.io/platform/current/installation/configuration/consumer-configs.html#consumerconfigs_max.poll.interval.ms">max poll interval&lt;/a> configuration which determines how long it takes for the consumer to poll a message(read a new message from the topic). If a consumer reaches this time limit before polling a message, it will be considered unhealthy and replaced with a new consumer. Meanwhile, the consumer has a timeout to commit all the pending messages to offset, and if it cannot, then those messages are not considered as done and will be consumed again.&lt;/p>
&lt;p>The point here is that the second bug was buried under the first issue, and I brought it up by fixing the first one. Kind of a rabbit hole, and who knows, I would not face &lt;a href="https://en.wikipedia.org/wiki/Lernaean_Hydra">Hydra&lt;/a> if I continued fixing the problem?
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="Hydra, a see monster that that as soon as one head was cut off, two more heads would emerge from the fresh wound" src="https://glyphack.com/Hydra.png" >
&lt;/div>
&lt;/figure>
&lt;/p>
&lt;h2 class="heading" id="yak-shaving">
Yak shaving
&lt;a class="anchor" href="#yak-shaving">#&lt;/a>
&lt;/h2>
&lt;p>The more precise term about this situation is &lt;a href="https://seths.blog/2005/03/dont_shave_that/">Yak Shaving&lt;/a>. It&amp;rsquo;s a situation where you have to fix something else before working on the current issue.
It is essential to be ready to go down this path before actually starting. For me, it was always a frustrating experience because You can&amp;rsquo;t get it done, and estimations become incorrect, then you have no clue where you are until you can resolve the final issue.&lt;/p>
&lt;h2 class="heading" id="what-did-i-learn">
What did I learn
&lt;a class="anchor" href="#what-did-i-learn">#&lt;/a>
&lt;/h2>
&lt;p>Some bug fixes seem easy to solve, like this one. You and the others might have no idea why some issue is happening. When a request like this comes to me from now on, I&amp;rsquo;ll be asking for a time to investigate the issue and how it is happening. It might take more time; in this case, I only had a couple of days to work on it, so I would not have a chance to fix the issue.
I&amp;rsquo;m not saying all the bug fixes should be like this; if you worked with a system and know why something is wrong and are sure about the system behavior based on experience, go ahead and work on the fix. But for me, there were a lot of changes to the system after I left the team, so the system was not what I used to know.&lt;/p>
&lt;p>And also, don&amp;rsquo;t forget the chance of ending up in a Yak Shaving. Investigate enough to see if anything else is wrong except the current issue.
As said in pragmatic programmer&lt;/p>
&lt;blockquote>
&lt;p>Is the problem being reported a direct result of the underlying bug, or merely a symptom?&lt;/p>&lt;/blockquote>
&lt;p>It&amp;rsquo;s tempting to help others with something you are sure you can. But the bottom line is if someone asks for help, they expect the issue to be resolved, and this kind of help is not helpful anyway.&lt;/p></description></item><item><title>How Write and Organize Software Documentation</title><link>https://glyphack.com/write-software-documentation/</link><pubDate>Sun, 23 Jan 2022 17:30:40 +0330</pubDate><guid>https://glyphack.com/write-software-documentation/</guid><description>&lt;p>Software documents play an important role in software development, everyone pays attention to writing documentation but just like writing code, writing the text is not enough but it has to be readable and understandable for other people, after all the purpose of documenting is to communicate. Recently I was reading documentation of a system and noticed that there&amp;rsquo;s something strange about it. although all the components are documented, but still it&amp;rsquo;s not easy to find information on something.&lt;/p>
&lt;p>Let&amp;rsquo;s review the documentation role in these two situations, onboarding a new person with the system and improving collaboration between a team. This comes down to these two questions:&lt;/p>
&lt;ol>
&lt;li>Can I hand over my technical docs to someone and expect them to have all information they need to make their first commit?&lt;/li>
&lt;li>If situation X happens, do my teammates have to call someone to know what is happening?
So every day, when one of these happens, think about the answers and see how well your documentation is. For example, when you get similar questions from teammates about a system, think of it as a failure in the documentation system, not all questions can be answered inside docs, but the frequent ones must be answered.&lt;/li>
&lt;/ol>
&lt;h2 class="heading" id="avoid-common-problems-of-technical-software-documentation">
Avoid Common Problems of Technical Software Documentation
&lt;a class="anchor" href="#avoid-common-problems-of-technical-software-documentation">#&lt;/a>
&lt;/h2>
&lt;p>So what are the problems that can be in your technical notes?&lt;/p>
&lt;h3 class="heading" id="non-existent-documents">
Non existent documents
&lt;a class="anchor" href="#non-existent-documents">#&lt;/a>
&lt;/h3>
&lt;h4 class="heading" id="no-entry-point-link-around-a-topic">
No Entry Point Link Around a Topic
&lt;a class="anchor" href="#no-entry-point-link-around-a-topic">#&lt;/a>
&lt;/h4>
&lt;p>There is no primary documentation around a topic; you have to pass multiple links when someone is on boarded or read a single document after cloning the repo.&lt;/p>
&lt;h4 class="heading" id="cover-all-information-needed-for-a-project">
Cover all information needed for a project
&lt;a class="anchor" href="#cover-all-information-needed-for-a-project">#&lt;/a>
&lt;/h4>
&lt;p>If someone joins your team, they need information on how a system works. They also have to know how to set up their local and sandbox environment and use it.&lt;/p>
&lt;h3 class="heading" id="hidden-documents">
Hidden Documents
&lt;a class="anchor" href="#hidden-documents">#&lt;/a>
&lt;/h3>
&lt;h4 class="heading" id="nesting-overuse">
Nesting Overuse
&lt;a class="anchor" href="#nesting-overuse">#&lt;/a>
&lt;/h4>
&lt;p>Having sub-pages inside sub-pages makes the text to be scattered in different documents. Suppose someone reads a note on compiling a project. They also have to find the testing guide and deployment guide next to that text. It can be another section within that doc or a document next to it. Just make sure you don&amp;rsquo;t need to browse again to find those.
This pattern is similar to coupling the code that is related to each other like putting it inside a single module.&lt;/p>
&lt;h4 class="heading" id="multiple-channels">
Multiple channels
&lt;a class="anchor" href="#multiple-channels">#&lt;/a>
&lt;/h4>
&lt;p>Some materials might be found on the slack channel, others on your documentation tool. Keep all of them in one place as much as possible.&lt;/p>
&lt;h3 class="heading" id="inaccurate-documents">
Inaccurate Documents
&lt;a class="anchor" href="#inaccurate-documents">#&lt;/a>
&lt;/h3>
&lt;p>If the documents are not updated along with the code, they become inaccurate as you change the software. One possible solution is to link the code and document together(by using Readme file) so more people will see the document while writing code.
Here you can see that why is it valuable to have a single document for a topic, for example here if you have 4 documents that has to change after changing system codes then it&amp;rsquo;s much harder to update the documents that a single document.&lt;/p>
&lt;h3 class="heading" id="obsolete-documents">
Obsolete Documents
&lt;a class="anchor" href="#obsolete-documents">#&lt;/a>
&lt;/h3>
&lt;p>If a design is changed and older design decisions don&amp;rsquo;t apply anymore, archive them.&lt;/p>
&lt;h3 class="heading" id="afterthought-documents">
Afterthought Documents
&lt;a class="anchor" href="#afterthought-documents">#&lt;/a>
&lt;/h3>
&lt;p>This is a problem because if you write your docs after delivering a project, you will end up:&lt;/p>
&lt;ol>
&lt;li>Forgetting to include important notes on the topic because you are in the &lt;a href="https://en.wikipedia.org/wiki/Curse_of_knowledge">curse of knowledge&lt;/a>.&lt;/li>
&lt;li>Have to explain the project to someone personally if you need to hand it over in the middle.&lt;/li>
&lt;/ol>
&lt;h2 class="heading" id="how-to-make-technical-documentations-better">
How to Make Technical Documentations Better
&lt;a class="anchor" href="#how-to-make-technical-documentations-better">#&lt;/a>
&lt;/h2>
&lt;p>It&amp;rsquo;s essential to organize documents so that it&amp;rsquo;s visible to everyone.&lt;/p>
&lt;p>&lt;strong>Be Careful with Nesting&lt;/strong>
When newcomers open the documentation, they should locate all the required information they need to work on the project. This means in your top-level page you should have all the topics you want to explain visible there as links or sub-pages.
As an example of a good technical documentation checkout &lt;a href="https://wiki.crdb.io/wiki/spaces/CRDB/overview">CockroachDB documents&lt;/a>, There are all the things from introduction to deploying the project listed on the first page with only 1 level nesting.
My personal suggestion about this is choose a topic and write all the relevant information to that topic in the page. if a sub topic grows over time you can create a sub-page for it later.&lt;/p>
&lt;p>&lt;strong>Make it like a story&lt;/strong>
It should be easy to follow your documents from beginning to the end. Make sure the topics are in the right order. Keep similar topics in different contexts separate, e.g. keep end-user documents separate from system specification documents but link them because the developer needs to know about the user when writing docs.
This means all the journey from finding the repo to clone to deploying a feature can be found inside technical docs.&lt;/p>
&lt;p>&lt;strong>Make Documentation Writing an Ongoing process&lt;/strong>
It&amp;rsquo;s hard to keep documents that no one reads updated, make sure your documents have users by sending people document links instead of answering questions in Slack.&lt;/p>
&lt;p>&lt;strong>Writing Software Documentation is a Collaborative Process&lt;/strong>
Write documents with the mindset of other people are going to use them. so you should considering:&lt;/p>
&lt;ul>
&lt;li>Ask your team to review the docs you write&lt;/li>
&lt;li>Put new pages you create on draft&lt;/li>
&lt;/ul>
&lt;h2 class="heading" id="other-resources">
Other resources
&lt;a class="anchor" href="#other-resources">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://microsoft.github.io/code-with-engineering-playbook/documentation/guidance/project-and-repositories/">Documenting code repositories&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.prototypr.io/software-documentation-types-and-best-practices-1726ca595c7f">Type of documentations&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>How I Stay Focused and Manage Time</title><link>https://glyphack.com/how-i-stay-focused-and-manage-time/</link><pubDate>Mon, 03 Jan 2022 19:10:52 +0330</pubDate><guid>https://glyphack.com/how-i-stay-focused-and-manage-time/</guid><description>&lt;p>A few weeks ago, I experienced one of these busy weeks with lots of meetings, Slack messages, working on different tasks. Although I did many things, I didn&amp;rsquo;t feel like getting anything done. So I decided to see how can I improve this.&lt;/p>
&lt;p>First of all, the cost of getting interrupted while developing is high. You need time to get back on what you were doing, and if this happens a lot, you can&amp;rsquo;t manage to get many things done.
The second thing I noticed was that I have to do better with planning for my day. I have a mix of personal stuff, university, and work. Some days, I&amp;rsquo;m constantly switching between tasks with different contexts, and I get myself out of the zone.&lt;/p>
&lt;h1 class="heading" id="my-setup">
My setup
&lt;a class="anchor" href="#my-setup">#&lt;/a>
&lt;/h1>
&lt;p>I&amp;rsquo;ve experimented with different productivity tools for focus and time management tools. I was looking for a simple enough task manager with a built-in time tracker that you can decide on something you must do in the day and track your time while doing them for the rest of the day. I could not find such a tool, so I combined different apps to achieve this.&lt;/p>
&lt;h3 class="heading" id="daily-planning">
Daily Planning
&lt;a class="anchor" href="#daily-planning">#&lt;/a>
&lt;/h3>
&lt;p>I use &lt;a href="https://www.notion.so/">Notion&lt;/a> as my general notebook to organize projects, learn lists, and other random things that gather here, not to forget them.
I also started to use it as my time management tool just by creating a table where each row is a date, and inside that, I write my day plan:
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="Daily planning with Notion" src="https://glyphack.com/notion-day-plan.png" >
&lt;/div>
&lt;/figure>
Of course, it does not offer any unique feature here that other apps don&amp;rsquo;t. I prefer to write down my tasks as raw notes instead of task management apps to keep them simple and easy enough to do every day.
This way, it helps me two organize my tasks such that:&lt;/p>
&lt;ul>
&lt;li>I know what I want to do upfront, so I can plan to do them appropriately. For example, I can do all of my university stuff together to reduce context switching costs&lt;/li>
&lt;li>If I can&amp;rsquo;t manage to do something on that day, it&amp;rsquo;s not lost, and I can move it to the next day&lt;/li>
&lt;/ul>
&lt;h3 class="heading" id="time-tracking">
Time Tracking
&lt;a class="anchor" href="#time-tracking">#&lt;/a>
&lt;/h3>
&lt;p>I use &lt;a href="https://toggl.com/">Toggl&lt;/a> to track how much time I spend on a task and focus while working.
Toggl has a concept of clients and tasks, I defined my clients as DataChef, University and Personal stuff and tasks are my current work, whenever I decide to work on something I start the timer choose the client and start working. The remarkable feature is that they have a Pomodoro timer too, and I use this technique to focus on my job.
&lt;figure class="">
&lt;div class="img-container" >
&lt;img loading="lazy" alt="Toggl Timeline" src="https://glyphack.com/toggl-timeline.png" >
&lt;/div>
&lt;/figure>
If you&amp;rsquo;re not familiar with Pomodoro, here is the procedure from Wikipedia&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Decide on the task to be done.&lt;/li>
&lt;li>Set the Pomodoro timer (typically for 25 minutes).&lt;/li>
&lt;li>Work on the task.&lt;/li>
&lt;li>End work when the timer rings and take a short break (typically 5–10 minutes).&lt;/li>
&lt;li>If you have fewer than three Pomodoros, go back to Step 2 and repeat until you go through all three Pomodoros.&lt;/li>
&lt;li>After three Pomodoros are done, take the fourth Pomodoro and then take an extended break (traditionally 20 to 30 minutes). Once the long break is finished, return to step 2.&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>I prefer it over other Pomodoro apps because the features it provides, such as reminders, help me to continuously not lose focus and track time.
I started using Toggl with 25 min focus 5 min break and increased the time to 45 min focus in just two weeks!&lt;/p>
&lt;h1 class="heading" id="conclusion">
Conclusion
&lt;a class="anchor" href="#conclusion">#&lt;/a>
&lt;/h1>
&lt;p>I think task management and time tracking are not only for teams, but people can also boost their productivity with these methods.
I did not go over all the features of the tools I mentioned because it&amp;rsquo;s not the tools that are important but the techniques you put in place to help yourself with focus and time management.&lt;/p></description></item></channel></rss>